/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_fesapi(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_fesapi(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_fesapi(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <string>


typedef unsigned long long ULongLongArray;

SWIGINTERN ULongLongArray *new_ULongLongArray(int nelements){
  return new unsigned long long[nelements];
}
SWIGINTERN void delete_ULongLongArray(ULongLongArray *self){
  delete [] self;
}
SWIGINTERN unsigned long long ULongLongArray_getitem(ULongLongArray *self,int index){
  return self[index];
}
SWIGINTERN void ULongLongArray_setitem(ULongLongArray *self,int index,unsigned long long value){
  self[index] = value;
}
SWIGINTERN unsigned long long *ULongLongArray_cast(ULongLongArray *self){
  return self;
}
SWIGINTERN ULongLongArray *ULongLongArray_frompointer(unsigned long long *t){
  return (ULongLongArray *) t;
}

typedef unsigned long ULongArray;

SWIGINTERN ULongArray *new_ULongArray(int nelements){
  return new unsigned long[nelements];
}
SWIGINTERN void delete_ULongArray(ULongArray *self){
  delete [] self;
}
SWIGINTERN unsigned long ULongArray_getitem(ULongArray *self,int index){
  return self[index];
}
SWIGINTERN void ULongArray_setitem(ULongArray *self,int index,unsigned long value){
  self[index] = value;
}
SWIGINTERN unsigned long *ULongArray_cast(ULongArray *self){
  return self;
}
SWIGINTERN ULongArray *ULongArray_frompointer(unsigned long *t){
  return (ULongArray *) t;
}

typedef unsigned int UIntArray;

SWIGINTERN UIntArray *new_UIntArray(int nelements){
  return new unsigned int[nelements];
}
SWIGINTERN void delete_UIntArray(UIntArray *self){
  delete [] self;
}
SWIGINTERN unsigned int UIntArray_getitem(UIntArray *self,int index){
  return self[index];
}
SWIGINTERN void UIntArray_setitem(UIntArray *self,int index,unsigned int value){
  self[index] = value;
}
SWIGINTERN unsigned int *UIntArray_cast(UIntArray *self){
  return self;
}
SWIGINTERN UIntArray *UIntArray_frompointer(unsigned int *t){
  return (UIntArray *) t;
}

typedef int IntArray;

SWIGINTERN IntArray *new_IntArray(int nelements){
  return new int[nelements];
}
SWIGINTERN void delete_IntArray(IntArray *self){
  delete [] self;
}
SWIGINTERN int IntArray_getitem(IntArray *self,int index){
  return self[index];
}
SWIGINTERN void IntArray_setitem(IntArray *self,int index,int value){
  self[index] = value;
}
SWIGINTERN int *IntArray_cast(IntArray *self){
  return self;
}
SWIGINTERN IntArray *IntArray_frompointer(int *t){
  return (IntArray *) t;
}

typedef long LongArray;

SWIGINTERN LongArray *new_LongArray(int nelements){
  return new long[nelements];
}
SWIGINTERN void delete_LongArray(LongArray *self){
  delete [] self;
}
SWIGINTERN long LongArray_getitem(LongArray *self,int index){
  return self[index];
}
SWIGINTERN void LongArray_setitem(LongArray *self,int index,long value){
  self[index] = value;
}
SWIGINTERN long *LongArray_cast(LongArray *self){
  return self;
}
SWIGINTERN LongArray *LongArray_frompointer(long *t){
  return (LongArray *) t;
}

typedef float FloatArray;

SWIGINTERN FloatArray *new_FloatArray(int nelements){
  return new float[nelements];
}
SWIGINTERN void delete_FloatArray(FloatArray *self){
  delete [] self;
}
SWIGINTERN float FloatArray_getitem(FloatArray *self,int index){
  return self[index];
}
SWIGINTERN void FloatArray_setitem(FloatArray *self,int index,float value){
  self[index] = value;
}
SWIGINTERN float *FloatArray_cast(FloatArray *self){
  return self;
}
SWIGINTERN FloatArray *FloatArray_frompointer(float *t){
  return (FloatArray *) t;
}

typedef double DoubleArray;

SWIGINTERN DoubleArray *new_DoubleArray(int nelements){
  return new double[nelements];
}
SWIGINTERN void delete_DoubleArray(DoubleArray *self){
  delete [] self;
}
SWIGINTERN double DoubleArray_getitem(DoubleArray *self,int index){
  return self[index];
}
SWIGINTERN void DoubleArray_setitem(DoubleArray *self,int index,double value){
  self[index] = value;
}
SWIGINTERN double *DoubleArray_cast(DoubleArray *self){
  return self;
}
SWIGINTERN DoubleArray *DoubleArray_frompointer(double *t){
  return (DoubleArray *) t;
}

typedef short ShortArray;

SWIGINTERN ShortArray *new_ShortArray(int nelements){
  return new short[nelements];
}
SWIGINTERN void delete_ShortArray(ShortArray *self){
  delete [] self;
}
SWIGINTERN short ShortArray_getitem(ShortArray *self,int index){
  return self[index];
}
SWIGINTERN void ShortArray_setitem(ShortArray *self,int index,short value){
  self[index] = value;
}
SWIGINTERN short *ShortArray_cast(ShortArray *self){
  return self;
}
SWIGINTERN ShortArray *ShortArray_frompointer(short *t){
  return (ShortArray *) t;
}

typedef unsigned short UShortArray;

SWIGINTERN UShortArray *new_UShortArray(int nelements){
  return new unsigned short[nelements];
}
SWIGINTERN void delete_UShortArray(UShortArray *self){
  delete [] self;
}
SWIGINTERN unsigned short UShortArray_getitem(UShortArray *self,int index){
  return self[index];
}
SWIGINTERN void UShortArray_setitem(UShortArray *self,int index,unsigned short value){
  self[index] = value;
}
SWIGINTERN unsigned short *UShortArray_cast(UShortArray *self){
  return self;
}
SWIGINTERN UShortArray *UShortArray_frompointer(unsigned short *t){
  return (UShortArray *) t;
}

typedef char CharArray;

SWIGINTERN CharArray *new_CharArray(int nelements){
  return new char[nelements];
}
SWIGINTERN void delete_CharArray(CharArray *self){
  delete [] self;
}
SWIGINTERN char CharArray_getitem(CharArray *self,int index){
  return self[index];
}
SWIGINTERN void CharArray_setitem(CharArray *self,int index,char value){
  self[index] = value;
}
SWIGINTERN char *CharArray_cast(CharArray *self){
  return self;
}
SWIGINTERN CharArray *CharArray_frompointer(char *t){
  return (CharArray *) t;
}

typedef unsigned char UCharArray;

SWIGINTERN UCharArray *new_UCharArray(int nelements){
  return new unsigned char[nelements];
}
SWIGINTERN void delete_UCharArray(UCharArray *self){
  delete [] self;
}
SWIGINTERN unsigned char UCharArray_getitem(UCharArray *self,int index){
  return self[index];
}
SWIGINTERN void UCharArray_setitem(UCharArray *self,int index,unsigned char value){
  self[index] = value;
}
SWIGINTERN unsigned char *UCharArray_cast(UCharArray *self){
  return self;
}
SWIGINTERN UCharArray *UCharArray_frompointer(unsigned char *t){
  return (UCharArray *) t;
}

typedef bool BoolArray;

SWIGINTERN BoolArray *new_BoolArray(int nelements){
  return new bool[nelements];
}
SWIGINTERN void delete_BoolArray(BoolArray *self){
  delete [] self;
}
SWIGINTERN bool BoolArray_getitem(BoolArray *self,int index){
  return self[index];
}
SWIGINTERN void BoolArray_setitem(BoolArray *self,int index,bool value){
  self[index] = value;
}
SWIGINTERN bool *BoolArray_cast(BoolArray *self){
  return self;
}
SWIGINTERN BoolArray *BoolArray_frompointer(bool *t){
  return (BoolArray *) t;
}

SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#define SWIG_FILE_WITH_INIT // In case we use Python Swig Wrapping

#include "resqml2_0/LocalDepth3dCrs.h"
#include "resqml2_0/LocalTime3dCrs.h"
#include "resqml2_0/MdDatum.h"

#include "resqml2_0/Horizon.h"
#include "resqml2_0/Fault.h"
#include "resqml2_0/Fracture.h"
#include "resqml2_0/FrontierFeature.h"
#include "resqml2_0/WellboreFeature.h"
#include "resqml2_0/SeismicLineFeature.h"
#include "resqml2_0/SeismicLineSetFeature.h"
#include "resqml2_0/SeismicLatticeFeature.h"
#include "resqml2_0/OrganizationFeature.h"
#include "resqml2_0/StratigraphicUnitFeature.h"
#include "resqml2_0/FluidBoundaryFeature.h"

#include "resqml2_0/GenericFeatureInterpretation.h"
#include "resqml2_0/HorizonInterpretation.h"
#include "resqml2_0/FaultInterpretation.h"
#include "resqml2_0/WellboreInterpretation.h"
#include "resqml2_0/StratigraphicUnitInterpretation.h"
#include "resqml2_0/StructuralOrganizationInterpretation.h"
#include "resqml2_0/StratigraphicColumnRankInterpretation.h"
#include "resqml2_0/StratigraphicOccurrenceInterpretation.h"
#include "resqml2_0/EarthModelInterpretation.h"

#include "resqml2_0/PolylineSetRepresentation.h"
#include "resqml2_0/PointSetRepresentation.h"
#include "resqml2_0/PlaneSetRepresentation.h"
#include "resqml2_0/PolylineRepresentation.h"
#include "resqml2_0/Grid2dRepresentation.h"
#include "resqml2_0/Grid2dSetRepresentation.h"
#include "resqml2_0/TriangulatedSetRepresentation.h"
#include "resqml2_0/WellboreTrajectoryRepresentation.h"
#include "resqml2_0/WellboreMarker.h"
#include "resqml2_0/WellboreMarkerFrameRepresentation.h"
#include "resqml2_0/NonSealedSurfaceFrameworkRepresentation.h"
#include "resqml2_0/SealedSurfaceFrameworkRepresentation.h"
#include "resqml2_0/IjkGridRepresentation.h"
#include "resqml2_0/UnstructuredGridRepresentation.h"
#include "resqml2_0/SubRepresentation.h"
#include "resqml2_0/GridConnectionSetRepresentation.h"

#include "resqml2_0/TimeSeries.h"

#include "resqml2_0/PropertyKind.h"
#include "resqml2_0/StringTableLookup.h"
#include "resqml2_0/DiscreteProperty.h"
#include "resqml2_0/CategoricalProperty.h"
#include "resqml2_0/CommentProperty.h"
#include "resqml2_0/ContinuousProperty.h"

#include "resqml2_0/HdfProxy.h"
#include "resqml2_0/PropertyKindMapper.h"


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< resqml2_0::LocalDepth3dCrs * > *new_std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::LocalDepth3dCrs * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::LocalDepth3dCrs * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::LocalDepth3dCrs *std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__getitemcopy(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::LocalDepth3dCrs *const &std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__getitem(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__setitem(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index,resqml2_0::LocalDepth3dCrs *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__AddRange(std::vector< resqml2_0::LocalDepth3dCrs * > *self,std::vector< resqml2_0::LocalDepth3dCrs * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::LocalDepth3dCrs * > *std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__GetRange(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::LocalDepth3dCrs * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Insert(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index,resqml2_0::LocalDepth3dCrs *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__InsertRange(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index,std::vector< resqml2_0::LocalDepth3dCrs * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__RemoveAt(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__RemoveRange(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::LocalDepth3dCrs * > *std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Repeat(resqml2_0::LocalDepth3dCrs *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::LocalDepth3dCrs * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::LocalDepth3dCrs * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__SetRange(std::vector< resqml2_0::LocalDepth3dCrs * > *self,int index,std::vector< resqml2_0::LocalDepth3dCrs * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Contains(std::vector< resqml2_0::LocalDepth3dCrs * > *self,resqml2_0::LocalDepth3dCrs *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__IndexOf(std::vector< resqml2_0::LocalDepth3dCrs * > *self,resqml2_0::LocalDepth3dCrs *const &value){
        int index = -1;
        std::vector< resqml2_0::LocalDepth3dCrs * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__LastIndexOf(std::vector< resqml2_0::LocalDepth3dCrs * > *self,resqml2_0::LocalDepth3dCrs *const &value){
        int index = -1;
        std::vector< resqml2_0::LocalDepth3dCrs * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Remove(std::vector< resqml2_0::LocalDepth3dCrs * > *self,resqml2_0::LocalDepth3dCrs *const &value){
        std::vector< resqml2_0::LocalDepth3dCrs * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::LocalTime3dCrs * > *new_std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::LocalTime3dCrs * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::LocalTime3dCrs * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::LocalTime3dCrs *std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__getitemcopy(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::LocalTime3dCrs *const &std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__getitem(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__setitem(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index,resqml2_0::LocalTime3dCrs *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__AddRange(std::vector< resqml2_0::LocalTime3dCrs * > *self,std::vector< resqml2_0::LocalTime3dCrs * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::LocalTime3dCrs * > *std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__GetRange(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::LocalTime3dCrs * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Insert(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index,resqml2_0::LocalTime3dCrs *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__InsertRange(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index,std::vector< resqml2_0::LocalTime3dCrs * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__RemoveAt(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__RemoveRange(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::LocalTime3dCrs * > *std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Repeat(resqml2_0::LocalTime3dCrs *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::LocalTime3dCrs * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::LocalTime3dCrs * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__SetRange(std::vector< resqml2_0::LocalTime3dCrs * > *self,int index,std::vector< resqml2_0::LocalTime3dCrs * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Contains(std::vector< resqml2_0::LocalTime3dCrs * > *self,resqml2_0::LocalTime3dCrs *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__IndexOf(std::vector< resqml2_0::LocalTime3dCrs * > *self,resqml2_0::LocalTime3dCrs *const &value){
        int index = -1;
        std::vector< resqml2_0::LocalTime3dCrs * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__LastIndexOf(std::vector< resqml2_0::LocalTime3dCrs * > *self,resqml2_0::LocalTime3dCrs *const &value){
        int index = -1;
        std::vector< resqml2_0::LocalTime3dCrs * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Remove(std::vector< resqml2_0::LocalTime3dCrs * > *self,resqml2_0::LocalTime3dCrs *const &value){
        std::vector< resqml2_0::LocalTime3dCrs * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicColumn * > *new_std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::StratigraphicColumn * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::StratigraphicColumn * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::StratigraphicColumn *std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__getitemcopy(std::vector< resqml2_0::StratigraphicColumn * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::StratigraphicColumn *const &std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__getitem(std::vector< resqml2_0::StratigraphicColumn * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__setitem(std::vector< resqml2_0::StratigraphicColumn * > *self,int index,resqml2_0::StratigraphicColumn *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__AddRange(std::vector< resqml2_0::StratigraphicColumn * > *self,std::vector< resqml2_0::StratigraphicColumn * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicColumn * > *std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__GetRange(std::vector< resqml2_0::StratigraphicColumn * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::StratigraphicColumn * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Insert(std::vector< resqml2_0::StratigraphicColumn * > *self,int index,resqml2_0::StratigraphicColumn *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__InsertRange(std::vector< resqml2_0::StratigraphicColumn * > *self,int index,std::vector< resqml2_0::StratigraphicColumn * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__RemoveAt(std::vector< resqml2_0::StratigraphicColumn * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__RemoveRange(std::vector< resqml2_0::StratigraphicColumn * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicColumn * > *std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Repeat(resqml2_0::StratigraphicColumn *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::StratigraphicColumn * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::StratigraphicColumn * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::StratigraphicColumn * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__SetRange(std::vector< resqml2_0::StratigraphicColumn * > *self,int index,std::vector< resqml2_0::StratigraphicColumn * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Contains(std::vector< resqml2_0::StratigraphicColumn * > *self,resqml2_0::StratigraphicColumn *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__IndexOf(std::vector< resqml2_0::StratigraphicColumn * > *self,resqml2_0::StratigraphicColumn *const &value){
        int index = -1;
        std::vector< resqml2_0::StratigraphicColumn * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__LastIndexOf(std::vector< resqml2_0::StratigraphicColumn * > *self,resqml2_0::StratigraphicColumn *const &value){
        int index = -1;
        std::vector< resqml2_0::StratigraphicColumn * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Remove(std::vector< resqml2_0::StratigraphicColumn * > *self,resqml2_0::StratigraphicColumn *const &value){
        std::vector< resqml2_0::StratigraphicColumn * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *new_std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::StratigraphicColumnRankInterpretation *std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__getitemcopy(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::StratigraphicColumnRankInterpretation *const &std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__getitem(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__setitem(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index,resqml2_0::StratigraphicColumnRankInterpretation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__AddRange(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__GetRange(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Insert(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index,resqml2_0::StratigraphicColumnRankInterpretation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__InsertRange(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index,std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__RemoveAt(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__RemoveRange(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Repeat(resqml2_0::StratigraphicColumnRankInterpretation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__SetRange(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,int index,std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Contains(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,resqml2_0::StratigraphicColumnRankInterpretation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__IndexOf(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,resqml2_0::StratigraphicColumnRankInterpretation *const &value){
        int index = -1;
        std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,resqml2_0::StratigraphicColumnRankInterpretation *const &value){
        int index = -1;
        std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Remove(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *self,resqml2_0::StratigraphicColumnRankInterpretation *const &value){
        std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::Fault * > *new_std_vector_Sl_resqml2_0_Fault_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::Fault * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::Fault * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::Fault *std_vector_Sl_resqml2_0_Fault_Sm__Sg__getitemcopy(std::vector< resqml2_0::Fault * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::Fault *const &std_vector_Sl_resqml2_0_Fault_Sm__Sg__getitem(std::vector< resqml2_0::Fault * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fault_Sm__Sg__setitem(std::vector< resqml2_0::Fault * > *self,int index,resqml2_0::Fault *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fault_Sm__Sg__AddRange(std::vector< resqml2_0::Fault * > *self,std::vector< resqml2_0::Fault * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::Fault * > *std_vector_Sl_resqml2_0_Fault_Sm__Sg__GetRange(std::vector< resqml2_0::Fault * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::Fault * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fault_Sm__Sg__Insert(std::vector< resqml2_0::Fault * > *self,int index,resqml2_0::Fault *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fault_Sm__Sg__InsertRange(std::vector< resqml2_0::Fault * > *self,int index,std::vector< resqml2_0::Fault * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fault_Sm__Sg__RemoveAt(std::vector< resqml2_0::Fault * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fault_Sm__Sg__RemoveRange(std::vector< resqml2_0::Fault * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::Fault * > *std_vector_Sl_resqml2_0_Fault_Sm__Sg__Repeat(resqml2_0::Fault *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::Fault * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fault_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::Fault * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fault_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::Fault * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fault_Sm__Sg__SetRange(std::vector< resqml2_0::Fault * > *self,int index,std::vector< resqml2_0::Fault * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Fault_Sm__Sg__Contains(std::vector< resqml2_0::Fault * > *self,resqml2_0::Fault *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Fault_Sm__Sg__IndexOf(std::vector< resqml2_0::Fault * > *self,resqml2_0::Fault *const &value){
        int index = -1;
        std::vector< resqml2_0::Fault * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Fault_Sm__Sg__LastIndexOf(std::vector< resqml2_0::Fault * > *self,resqml2_0::Fault *const &value){
        int index = -1;
        std::vector< resqml2_0::Fault * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Fault_Sm__Sg__Remove(std::vector< resqml2_0::Fault * > *self,resqml2_0::Fault *const &value){
        std::vector< resqml2_0::Fault * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::Fracture * > *new_std_vector_Sl_resqml2_0_Fracture_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::Fracture * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::Fracture * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::Fracture *std_vector_Sl_resqml2_0_Fracture_Sm__Sg__getitemcopy(std::vector< resqml2_0::Fracture * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::Fracture *const &std_vector_Sl_resqml2_0_Fracture_Sm__Sg__getitem(std::vector< resqml2_0::Fracture * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fracture_Sm__Sg__setitem(std::vector< resqml2_0::Fracture * > *self,int index,resqml2_0::Fracture *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fracture_Sm__Sg__AddRange(std::vector< resqml2_0::Fracture * > *self,std::vector< resqml2_0::Fracture * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::Fracture * > *std_vector_Sl_resqml2_0_Fracture_Sm__Sg__GetRange(std::vector< resqml2_0::Fracture * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::Fracture * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Insert(std::vector< resqml2_0::Fracture * > *self,int index,resqml2_0::Fracture *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fracture_Sm__Sg__InsertRange(std::vector< resqml2_0::Fracture * > *self,int index,std::vector< resqml2_0::Fracture * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fracture_Sm__Sg__RemoveAt(std::vector< resqml2_0::Fracture * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fracture_Sm__Sg__RemoveRange(std::vector< resqml2_0::Fracture * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::Fracture * > *std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Repeat(resqml2_0::Fracture *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::Fracture * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::Fracture * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::Fracture * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Fracture_Sm__Sg__SetRange(std::vector< resqml2_0::Fracture * > *self,int index,std::vector< resqml2_0::Fracture * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Contains(std::vector< resqml2_0::Fracture * > *self,resqml2_0::Fracture *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Fracture_Sm__Sg__IndexOf(std::vector< resqml2_0::Fracture * > *self,resqml2_0::Fracture *const &value){
        int index = -1;
        std::vector< resqml2_0::Fracture * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Fracture_Sm__Sg__LastIndexOf(std::vector< resqml2_0::Fracture * > *self,resqml2_0::Fracture *const &value){
        int index = -1;
        std::vector< resqml2_0::Fracture * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Remove(std::vector< resqml2_0::Fracture * > *self,resqml2_0::Fracture *const &value){
        std::vector< resqml2_0::Fracture * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::Horizon * > *new_std_vector_Sl_resqml2_0_Horizon_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::Horizon * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::Horizon * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::Horizon *std_vector_Sl_resqml2_0_Horizon_Sm__Sg__getitemcopy(std::vector< resqml2_0::Horizon * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::Horizon *const &std_vector_Sl_resqml2_0_Horizon_Sm__Sg__getitem(std::vector< resqml2_0::Horizon * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Horizon_Sm__Sg__setitem(std::vector< resqml2_0::Horizon * > *self,int index,resqml2_0::Horizon *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Horizon_Sm__Sg__AddRange(std::vector< resqml2_0::Horizon * > *self,std::vector< resqml2_0::Horizon * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::Horizon * > *std_vector_Sl_resqml2_0_Horizon_Sm__Sg__GetRange(std::vector< resqml2_0::Horizon * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::Horizon * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Insert(std::vector< resqml2_0::Horizon * > *self,int index,resqml2_0::Horizon *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Horizon_Sm__Sg__InsertRange(std::vector< resqml2_0::Horizon * > *self,int index,std::vector< resqml2_0::Horizon * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Horizon_Sm__Sg__RemoveAt(std::vector< resqml2_0::Horizon * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Horizon_Sm__Sg__RemoveRange(std::vector< resqml2_0::Horizon * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::Horizon * > *std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Repeat(resqml2_0::Horizon *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::Horizon * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::Horizon * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::Horizon * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Horizon_Sm__Sg__SetRange(std::vector< resqml2_0::Horizon * > *self,int index,std::vector< resqml2_0::Horizon * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Contains(std::vector< resqml2_0::Horizon * > *self,resqml2_0::Horizon *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Horizon_Sm__Sg__IndexOf(std::vector< resqml2_0::Horizon * > *self,resqml2_0::Horizon *const &value){
        int index = -1;
        std::vector< resqml2_0::Horizon * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Horizon_Sm__Sg__LastIndexOf(std::vector< resqml2_0::Horizon * > *self,resqml2_0::Horizon *const &value){
        int index = -1;
        std::vector< resqml2_0::Horizon * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Remove(std::vector< resqml2_0::Horizon * > *self,resqml2_0::Horizon *const &value){
        std::vector< resqml2_0::Horizon * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicUnitInterpretation * > *new_std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::StratigraphicUnitInterpretation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::StratigraphicUnitInterpretation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::StratigraphicUnitInterpretation *std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__getitemcopy(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::StratigraphicUnitInterpretation *const &std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__getitem(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__setitem(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index,resqml2_0::StratigraphicUnitInterpretation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__AddRange(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,std::vector< resqml2_0::StratigraphicUnitInterpretation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicUnitInterpretation * > *std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__GetRange(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::StratigraphicUnitInterpretation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Insert(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index,resqml2_0::StratigraphicUnitInterpretation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__InsertRange(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index,std::vector< resqml2_0::StratigraphicUnitInterpretation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__RemoveAt(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__RemoveRange(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicUnitInterpretation * > *std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Repeat(resqml2_0::StratigraphicUnitInterpretation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::StratigraphicUnitInterpretation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__SetRange(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,int index,std::vector< resqml2_0::StratigraphicUnitInterpretation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Contains(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,resqml2_0::StratigraphicUnitInterpretation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__IndexOf(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,resqml2_0::StratigraphicUnitInterpretation *const &value){
        int index = -1;
        std::vector< resqml2_0::StratigraphicUnitInterpretation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,resqml2_0::StratigraphicUnitInterpretation *const &value){
        int index = -1;
        std::vector< resqml2_0::StratigraphicUnitInterpretation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Remove(std::vector< resqml2_0::StratigraphicUnitInterpretation * > *self,resqml2_0::StratigraphicUnitInterpretation *const &value){
        std::vector< resqml2_0::StratigraphicUnitInterpretation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *new_std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::StratigraphicOccurrenceInterpretation *std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__getitemcopy(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::StratigraphicOccurrenceInterpretation *const &std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__getitem(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__setitem(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index,resqml2_0::StratigraphicOccurrenceInterpretation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__AddRange(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__GetRange(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Insert(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index,resqml2_0::StratigraphicOccurrenceInterpretation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__InsertRange(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index,std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__RemoveAt(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__RemoveRange(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Repeat(resqml2_0::StratigraphicOccurrenceInterpretation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__SetRange(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,int index,std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Contains(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,resqml2_0::StratigraphicOccurrenceInterpretation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__IndexOf(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,resqml2_0::StratigraphicOccurrenceInterpretation *const &value){
        int index = -1;
        std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,resqml2_0::StratigraphicOccurrenceInterpretation *const &value){
        int index = -1;
        std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Remove(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *self,resqml2_0::StratigraphicOccurrenceInterpretation *const &value){
        std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::HorizonInterpretation * > *new_std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::HorizonInterpretation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::HorizonInterpretation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::HorizonInterpretation *std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__getitemcopy(std::vector< resqml2_0::HorizonInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::HorizonInterpretation *const &std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__getitem(std::vector< resqml2_0::HorizonInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__setitem(std::vector< resqml2_0::HorizonInterpretation * > *self,int index,resqml2_0::HorizonInterpretation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__AddRange(std::vector< resqml2_0::HorizonInterpretation * > *self,std::vector< resqml2_0::HorizonInterpretation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::HorizonInterpretation * > *std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__GetRange(std::vector< resqml2_0::HorizonInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::HorizonInterpretation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Insert(std::vector< resqml2_0::HorizonInterpretation * > *self,int index,resqml2_0::HorizonInterpretation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__InsertRange(std::vector< resqml2_0::HorizonInterpretation * > *self,int index,std::vector< resqml2_0::HorizonInterpretation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__RemoveAt(std::vector< resqml2_0::HorizonInterpretation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__RemoveRange(std::vector< resqml2_0::HorizonInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::HorizonInterpretation * > *std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Repeat(resqml2_0::HorizonInterpretation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::HorizonInterpretation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::HorizonInterpretation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::HorizonInterpretation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__SetRange(std::vector< resqml2_0::HorizonInterpretation * > *self,int index,std::vector< resqml2_0::HorizonInterpretation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Contains(std::vector< resqml2_0::HorizonInterpretation * > *self,resqml2_0::HorizonInterpretation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__IndexOf(std::vector< resqml2_0::HorizonInterpretation * > *self,resqml2_0::HorizonInterpretation *const &value){
        int index = -1;
        std::vector< resqml2_0::HorizonInterpretation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::HorizonInterpretation * > *self,resqml2_0::HorizonInterpretation *const &value){
        int index = -1;
        std::vector< resqml2_0::HorizonInterpretation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Remove(std::vector< resqml2_0::HorizonInterpretation * > *self,resqml2_0::HorizonInterpretation *const &value){
        std::vector< resqml2_0::HorizonInterpretation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::Grid2dSetRepresentation * > *new_std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::Grid2dSetRepresentation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::Grid2dSetRepresentation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::Grid2dSetRepresentation *std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__getitemcopy(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::Grid2dSetRepresentation *const &std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__getitem(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__setitem(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index,resqml2_0::Grid2dSetRepresentation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__AddRange(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,std::vector< resqml2_0::Grid2dSetRepresentation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::Grid2dSetRepresentation * > *std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__GetRange(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::Grid2dSetRepresentation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Insert(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index,resqml2_0::Grid2dSetRepresentation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__InsertRange(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index,std::vector< resqml2_0::Grid2dSetRepresentation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__RemoveAt(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__RemoveRange(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::Grid2dSetRepresentation * > *std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Repeat(resqml2_0::Grid2dSetRepresentation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::Grid2dSetRepresentation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::Grid2dSetRepresentation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__SetRange(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,int index,std::vector< resqml2_0::Grid2dSetRepresentation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Contains(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,resqml2_0::Grid2dSetRepresentation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__IndexOf(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,resqml2_0::Grid2dSetRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::Grid2dSetRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,resqml2_0::Grid2dSetRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::Grid2dSetRepresentation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Remove(std::vector< resqml2_0::Grid2dSetRepresentation * > *self,resqml2_0::Grid2dSetRepresentation *const &value){
        std::vector< resqml2_0::Grid2dSetRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::Grid2dRepresentation * > *new_std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::Grid2dRepresentation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::Grid2dRepresentation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::Grid2dRepresentation *std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__getitemcopy(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::Grid2dRepresentation *const &std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__getitem(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__setitem(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index,resqml2_0::Grid2dRepresentation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__AddRange(std::vector< resqml2_0::Grid2dRepresentation * > *self,std::vector< resqml2_0::Grid2dRepresentation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::Grid2dRepresentation * > *std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__GetRange(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::Grid2dRepresentation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Insert(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index,resqml2_0::Grid2dRepresentation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__InsertRange(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index,std::vector< resqml2_0::Grid2dRepresentation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__RemoveAt(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__RemoveRange(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::Grid2dRepresentation * > *std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Repeat(resqml2_0::Grid2dRepresentation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::Grid2dRepresentation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::Grid2dRepresentation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__SetRange(std::vector< resqml2_0::Grid2dRepresentation * > *self,int index,std::vector< resqml2_0::Grid2dRepresentation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Contains(std::vector< resqml2_0::Grid2dRepresentation * > *self,resqml2_0::Grid2dRepresentation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__IndexOf(std::vector< resqml2_0::Grid2dRepresentation * > *self,resqml2_0::Grid2dRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::Grid2dRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::Grid2dRepresentation * > *self,resqml2_0::Grid2dRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::Grid2dRepresentation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Remove(std::vector< resqml2_0::Grid2dRepresentation * > *self,resqml2_0::Grid2dRepresentation *const &value){
        std::vector< resqml2_0::Grid2dRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::PolylineRepresentation * > *new_std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::PolylineRepresentation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::PolylineRepresentation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::PolylineRepresentation *std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__getitemcopy(std::vector< resqml2_0::PolylineRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::PolylineRepresentation *const &std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__getitem(std::vector< resqml2_0::PolylineRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__setitem(std::vector< resqml2_0::PolylineRepresentation * > *self,int index,resqml2_0::PolylineRepresentation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__AddRange(std::vector< resqml2_0::PolylineRepresentation * > *self,std::vector< resqml2_0::PolylineRepresentation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::PolylineRepresentation * > *std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__GetRange(std::vector< resqml2_0::PolylineRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::PolylineRepresentation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Insert(std::vector< resqml2_0::PolylineRepresentation * > *self,int index,resqml2_0::PolylineRepresentation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__InsertRange(std::vector< resqml2_0::PolylineRepresentation * > *self,int index,std::vector< resqml2_0::PolylineRepresentation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__RemoveAt(std::vector< resqml2_0::PolylineRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__RemoveRange(std::vector< resqml2_0::PolylineRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::PolylineRepresentation * > *std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Repeat(resqml2_0::PolylineRepresentation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::PolylineRepresentation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::PolylineRepresentation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::PolylineRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__SetRange(std::vector< resqml2_0::PolylineRepresentation * > *self,int index,std::vector< resqml2_0::PolylineRepresentation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Contains(std::vector< resqml2_0::PolylineRepresentation * > *self,resqml2_0::PolylineRepresentation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__IndexOf(std::vector< resqml2_0::PolylineRepresentation * > *self,resqml2_0::PolylineRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::PolylineRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::PolylineRepresentation * > *self,resqml2_0::PolylineRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::PolylineRepresentation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Remove(std::vector< resqml2_0::PolylineRepresentation * > *self,resqml2_0::PolylineRepresentation *const &value){
        std::vector< resqml2_0::PolylineRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::PolylineSetRepresentation * > *new_std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::PolylineSetRepresentation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::PolylineSetRepresentation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::PolylineSetRepresentation *std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__getitemcopy(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::PolylineSetRepresentation *const &std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__getitem(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__setitem(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index,resqml2_0::PolylineSetRepresentation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__AddRange(std::vector< resqml2_0::PolylineSetRepresentation * > *self,std::vector< resqml2_0::PolylineSetRepresentation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::PolylineSetRepresentation * > *std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__GetRange(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::PolylineSetRepresentation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Insert(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index,resqml2_0::PolylineSetRepresentation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__InsertRange(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index,std::vector< resqml2_0::PolylineSetRepresentation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__RemoveAt(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__RemoveRange(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::PolylineSetRepresentation * > *std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Repeat(resqml2_0::PolylineSetRepresentation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::PolylineSetRepresentation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::PolylineSetRepresentation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__SetRange(std::vector< resqml2_0::PolylineSetRepresentation * > *self,int index,std::vector< resqml2_0::PolylineSetRepresentation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Contains(std::vector< resqml2_0::PolylineSetRepresentation * > *self,resqml2_0::PolylineSetRepresentation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__IndexOf(std::vector< resqml2_0::PolylineSetRepresentation * > *self,resqml2_0::PolylineSetRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::PolylineSetRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::PolylineSetRepresentation * > *self,resqml2_0::PolylineSetRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::PolylineSetRepresentation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Remove(std::vector< resqml2_0::PolylineSetRepresentation * > *self,resqml2_0::PolylineSetRepresentation *const &value){
        std::vector< resqml2_0::PolylineSetRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::TriangulatedSetRepresentation * > *new_std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::TriangulatedSetRepresentation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::TriangulatedSetRepresentation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::TriangulatedSetRepresentation *std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__getitemcopy(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::TriangulatedSetRepresentation *const &std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__getitem(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__setitem(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index,resqml2_0::TriangulatedSetRepresentation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__AddRange(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,std::vector< resqml2_0::TriangulatedSetRepresentation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::TriangulatedSetRepresentation * > *std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__GetRange(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::TriangulatedSetRepresentation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Insert(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index,resqml2_0::TriangulatedSetRepresentation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__InsertRange(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index,std::vector< resqml2_0::TriangulatedSetRepresentation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__RemoveAt(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__RemoveRange(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::TriangulatedSetRepresentation * > *std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Repeat(resqml2_0::TriangulatedSetRepresentation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::TriangulatedSetRepresentation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__SetRange(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,int index,std::vector< resqml2_0::TriangulatedSetRepresentation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Contains(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,resqml2_0::TriangulatedSetRepresentation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__IndexOf(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,resqml2_0::TriangulatedSetRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::TriangulatedSetRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,resqml2_0::TriangulatedSetRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::TriangulatedSetRepresentation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Remove(std::vector< resqml2_0::TriangulatedSetRepresentation * > *self,resqml2_0::TriangulatedSetRepresentation *const &value){
        std::vector< resqml2_0::TriangulatedSetRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::SeismicLineFeature * > *new_std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::SeismicLineFeature * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::SeismicLineFeature * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::SeismicLineFeature *std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__getitemcopy(std::vector< resqml2_0::SeismicLineFeature * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::SeismicLineFeature *const &std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__getitem(std::vector< resqml2_0::SeismicLineFeature * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__setitem(std::vector< resqml2_0::SeismicLineFeature * > *self,int index,resqml2_0::SeismicLineFeature *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__AddRange(std::vector< resqml2_0::SeismicLineFeature * > *self,std::vector< resqml2_0::SeismicLineFeature * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::SeismicLineFeature * > *std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__GetRange(std::vector< resqml2_0::SeismicLineFeature * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::SeismicLineFeature * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Insert(std::vector< resqml2_0::SeismicLineFeature * > *self,int index,resqml2_0::SeismicLineFeature *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__InsertRange(std::vector< resqml2_0::SeismicLineFeature * > *self,int index,std::vector< resqml2_0::SeismicLineFeature * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__RemoveAt(std::vector< resqml2_0::SeismicLineFeature * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__RemoveRange(std::vector< resqml2_0::SeismicLineFeature * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::SeismicLineFeature * > *std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Repeat(resqml2_0::SeismicLineFeature *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::SeismicLineFeature * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::SeismicLineFeature * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::SeismicLineFeature * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__SetRange(std::vector< resqml2_0::SeismicLineFeature * > *self,int index,std::vector< resqml2_0::SeismicLineFeature * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Contains(std::vector< resqml2_0::SeismicLineFeature * > *self,resqml2_0::SeismicLineFeature *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__IndexOf(std::vector< resqml2_0::SeismicLineFeature * > *self,resqml2_0::SeismicLineFeature *const &value){
        int index = -1;
        std::vector< resqml2_0::SeismicLineFeature * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__LastIndexOf(std::vector< resqml2_0::SeismicLineFeature * > *self,resqml2_0::SeismicLineFeature *const &value){
        int index = -1;
        std::vector< resqml2_0::SeismicLineFeature * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Remove(std::vector< resqml2_0::SeismicLineFeature * > *self,resqml2_0::SeismicLineFeature *const &value){
        std::vector< resqml2_0::SeismicLineFeature * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::WellboreFeature * > *new_std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::WellboreFeature * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::WellboreFeature * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::WellboreFeature *std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__getitemcopy(std::vector< resqml2_0::WellboreFeature * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::WellboreFeature *const &std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__getitem(std::vector< resqml2_0::WellboreFeature * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__setitem(std::vector< resqml2_0::WellboreFeature * > *self,int index,resqml2_0::WellboreFeature *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__AddRange(std::vector< resqml2_0::WellboreFeature * > *self,std::vector< resqml2_0::WellboreFeature * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::WellboreFeature * > *std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__GetRange(std::vector< resqml2_0::WellboreFeature * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::WellboreFeature * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Insert(std::vector< resqml2_0::WellboreFeature * > *self,int index,resqml2_0::WellboreFeature *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__InsertRange(std::vector< resqml2_0::WellboreFeature * > *self,int index,std::vector< resqml2_0::WellboreFeature * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__RemoveAt(std::vector< resqml2_0::WellboreFeature * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__RemoveRange(std::vector< resqml2_0::WellboreFeature * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::WellboreFeature * > *std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Repeat(resqml2_0::WellboreFeature *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::WellboreFeature * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::WellboreFeature * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::WellboreFeature * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__SetRange(std::vector< resqml2_0::WellboreFeature * > *self,int index,std::vector< resqml2_0::WellboreFeature * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Contains(std::vector< resqml2_0::WellboreFeature * > *self,resqml2_0::WellboreFeature *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__IndexOf(std::vector< resqml2_0::WellboreFeature * > *self,resqml2_0::WellboreFeature *const &value){
        int index = -1;
        std::vector< resqml2_0::WellboreFeature * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__LastIndexOf(std::vector< resqml2_0::WellboreFeature * > *self,resqml2_0::WellboreFeature *const &value){
        int index = -1;
        std::vector< resqml2_0::WellboreFeature * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Remove(std::vector< resqml2_0::WellboreFeature * > *self,resqml2_0::WellboreFeature *const &value){
        std::vector< resqml2_0::WellboreFeature * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *new_std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::WellboreTrajectoryRepresentation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::WellboreTrajectoryRepresentation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::WellboreTrajectoryRepresentation *std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__getitemcopy(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::WellboreTrajectoryRepresentation *const &std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__getitem(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__setitem(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index,resqml2_0::WellboreTrajectoryRepresentation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__AddRange(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__GetRange(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::WellboreTrajectoryRepresentation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Insert(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index,resqml2_0::WellboreTrajectoryRepresentation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__InsertRange(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index,std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__RemoveAt(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__RemoveRange(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Repeat(resqml2_0::WellboreTrajectoryRepresentation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::WellboreTrajectoryRepresentation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__SetRange(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,int index,std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Contains(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,resqml2_0::WellboreTrajectoryRepresentation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__IndexOf(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,resqml2_0::WellboreTrajectoryRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::WellboreTrajectoryRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,resqml2_0::WellboreTrajectoryRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::WellboreTrajectoryRepresentation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Remove(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *self,resqml2_0::WellboreTrajectoryRepresentation *const &value){
        std::vector< resqml2_0::WellboreTrajectoryRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *new_std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::WellboreMarkerFrameRepresentation *std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__getitemcopy(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::WellboreMarkerFrameRepresentation *const &std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__getitem(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__setitem(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index,resqml2_0::WellboreMarkerFrameRepresentation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__AddRange(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__GetRange(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Insert(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index,resqml2_0::WellboreMarkerFrameRepresentation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__InsertRange(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index,std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__RemoveAt(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__RemoveRange(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Repeat(resqml2_0::WellboreMarkerFrameRepresentation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__SetRange(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,int index,std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Contains(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,resqml2_0::WellboreMarkerFrameRepresentation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__IndexOf(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,resqml2_0::WellboreMarkerFrameRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,resqml2_0::WellboreMarkerFrameRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Remove(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *self,resqml2_0::WellboreMarkerFrameRepresentation *const &value){
        std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::HdfProxy * > *new_std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::HdfProxy * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::HdfProxy * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::HdfProxy *std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__getitemcopy(std::vector< resqml2_0::HdfProxy * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::HdfProxy *const &std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__getitem(std::vector< resqml2_0::HdfProxy * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__setitem(std::vector< resqml2_0::HdfProxy * > *self,int index,resqml2_0::HdfProxy *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__AddRange(std::vector< resqml2_0::HdfProxy * > *self,std::vector< resqml2_0::HdfProxy * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::HdfProxy * > *std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__GetRange(std::vector< resqml2_0::HdfProxy * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::HdfProxy * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Insert(std::vector< resqml2_0::HdfProxy * > *self,int index,resqml2_0::HdfProxy *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__InsertRange(std::vector< resqml2_0::HdfProxy * > *self,int index,std::vector< resqml2_0::HdfProxy * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__RemoveAt(std::vector< resqml2_0::HdfProxy * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__RemoveRange(std::vector< resqml2_0::HdfProxy * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::HdfProxy * > *std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Repeat(resqml2_0::HdfProxy *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::HdfProxy * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::HdfProxy * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::HdfProxy * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__SetRange(std::vector< resqml2_0::HdfProxy * > *self,int index,std::vector< resqml2_0::HdfProxy * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Contains(std::vector< resqml2_0::HdfProxy * > *self,resqml2_0::HdfProxy *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__IndexOf(std::vector< resqml2_0::HdfProxy * > *self,resqml2_0::HdfProxy *const &value){
        int index = -1;
        std::vector< resqml2_0::HdfProxy * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__LastIndexOf(std::vector< resqml2_0::HdfProxy * > *self,resqml2_0::HdfProxy *const &value){
        int index = -1;
        std::vector< resqml2_0::HdfProxy * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Remove(std::vector< resqml2_0::HdfProxy * > *self,resqml2_0::HdfProxy *const &value){
        std::vector< resqml2_0::HdfProxy * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::IjkGridRepresentation * > *new_std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::IjkGridRepresentation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::IjkGridRepresentation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::IjkGridRepresentation *std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__getitemcopy(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::IjkGridRepresentation *const &std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__getitem(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__setitem(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index,resqml2_0::IjkGridRepresentation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__AddRange(std::vector< resqml2_0::IjkGridRepresentation * > *self,std::vector< resqml2_0::IjkGridRepresentation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::IjkGridRepresentation * > *std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__GetRange(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::IjkGridRepresentation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Insert(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index,resqml2_0::IjkGridRepresentation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__InsertRange(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index,std::vector< resqml2_0::IjkGridRepresentation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__RemoveAt(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__RemoveRange(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::IjkGridRepresentation * > *std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Repeat(resqml2_0::IjkGridRepresentation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::IjkGridRepresentation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::IjkGridRepresentation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__SetRange(std::vector< resqml2_0::IjkGridRepresentation * > *self,int index,std::vector< resqml2_0::IjkGridRepresentation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Contains(std::vector< resqml2_0::IjkGridRepresentation * > *self,resqml2_0::IjkGridRepresentation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__IndexOf(std::vector< resqml2_0::IjkGridRepresentation * > *self,resqml2_0::IjkGridRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::IjkGridRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::IjkGridRepresentation * > *self,resqml2_0::IjkGridRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::IjkGridRepresentation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Remove(std::vector< resqml2_0::IjkGridRepresentation * > *self,resqml2_0::IjkGridRepresentation *const &value){
        std::vector< resqml2_0::IjkGridRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::UnstructuredGridRepresentation * > *new_std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::UnstructuredGridRepresentation * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::UnstructuredGridRepresentation * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::UnstructuredGridRepresentation *std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__getitemcopy(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::UnstructuredGridRepresentation *const &std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__getitem(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__setitem(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index,resqml2_0::UnstructuredGridRepresentation *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__AddRange(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,std::vector< resqml2_0::UnstructuredGridRepresentation * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::UnstructuredGridRepresentation * > *std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__GetRange(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::UnstructuredGridRepresentation * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Insert(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index,resqml2_0::UnstructuredGridRepresentation *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__InsertRange(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index,std::vector< resqml2_0::UnstructuredGridRepresentation * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__RemoveAt(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__RemoveRange(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::UnstructuredGridRepresentation * > *std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Repeat(resqml2_0::UnstructuredGridRepresentation *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::UnstructuredGridRepresentation * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__SetRange(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,int index,std::vector< resqml2_0::UnstructuredGridRepresentation * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Contains(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,resqml2_0::UnstructuredGridRepresentation *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__IndexOf(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,resqml2_0::UnstructuredGridRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::UnstructuredGridRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__LastIndexOf(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,resqml2_0::UnstructuredGridRepresentation *const &value){
        int index = -1;
        std::vector< resqml2_0::UnstructuredGridRepresentation * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Remove(std::vector< resqml2_0::UnstructuredGridRepresentation * > *self,resqml2_0::UnstructuredGridRepresentation *const &value){
        std::vector< resqml2_0::UnstructuredGridRepresentation * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< resqml2_0::WellboreMarker * > *new_std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg___SWIG_2(int capacity){
        std::vector< resqml2_0::WellboreMarker * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< resqml2_0::WellboreMarker * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN resqml2_0::WellboreMarker *std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__getitemcopy(std::vector< resqml2_0::WellboreMarker * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN resqml2_0::WellboreMarker *const &std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__getitem(std::vector< resqml2_0::WellboreMarker * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__setitem(std::vector< resqml2_0::WellboreMarker * > *self,int index,resqml2_0::WellboreMarker *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__AddRange(std::vector< resqml2_0::WellboreMarker * > *self,std::vector< resqml2_0::WellboreMarker * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< resqml2_0::WellboreMarker * > *std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__GetRange(std::vector< resqml2_0::WellboreMarker * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< resqml2_0::WellboreMarker * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Insert(std::vector< resqml2_0::WellboreMarker * > *self,int index,resqml2_0::WellboreMarker *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__InsertRange(std::vector< resqml2_0::WellboreMarker * > *self,int index,std::vector< resqml2_0::WellboreMarker * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__RemoveAt(std::vector< resqml2_0::WellboreMarker * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__RemoveRange(std::vector< resqml2_0::WellboreMarker * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< resqml2_0::WellboreMarker * > *std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Repeat(resqml2_0::WellboreMarker *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< resqml2_0::WellboreMarker * >(count, value);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Reverse__SWIG_0(std::vector< resqml2_0::WellboreMarker * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Reverse__SWIG_1(std::vector< resqml2_0::WellboreMarker * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__SetRange(std::vector< resqml2_0::WellboreMarker * > *self,int index,std::vector< resqml2_0::WellboreMarker * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Contains(std::vector< resqml2_0::WellboreMarker * > *self,resqml2_0::WellboreMarker *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__IndexOf(std::vector< resqml2_0::WellboreMarker * > *self,resqml2_0::WellboreMarker *const &value){
        int index = -1;
        std::vector< resqml2_0::WellboreMarker * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__LastIndexOf(std::vector< resqml2_0::WellboreMarker * > *self,resqml2_0::WellboreMarker *const &value){
        int index = -1;
        std::vector< resqml2_0::WellboreMarker * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Remove(std::vector< resqml2_0::WellboreMarker * > *self,resqml2_0::WellboreMarker *const &value){
        std::vector< resqml2_0::WellboreMarker * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#include "witsml1_4_1_1/Well.h"
#include "witsml1_4_1_1/CoordinateReferenceSystem.h"
#include "witsml1_4_1_1/Wellbore.h"

SWIGINTERN std::vector< witsml1_4_1_1::Wellbore * > *new_std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg___SWIG_2(int capacity){
        std::vector< witsml1_4_1_1::Wellbore * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< witsml1_4_1_1::Wellbore * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN witsml1_4_1_1::Wellbore *std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__getitemcopy(std::vector< witsml1_4_1_1::Wellbore * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN witsml1_4_1_1::Wellbore *const &std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__getitem(std::vector< witsml1_4_1_1::Wellbore * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__setitem(std::vector< witsml1_4_1_1::Wellbore * > *self,int index,witsml1_4_1_1::Wellbore *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__AddRange(std::vector< witsml1_4_1_1::Wellbore * > *self,std::vector< witsml1_4_1_1::Wellbore * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< witsml1_4_1_1::Wellbore * > *std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__GetRange(std::vector< witsml1_4_1_1::Wellbore * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< witsml1_4_1_1::Wellbore * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Insert(std::vector< witsml1_4_1_1::Wellbore * > *self,int index,witsml1_4_1_1::Wellbore *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__InsertRange(std::vector< witsml1_4_1_1::Wellbore * > *self,int index,std::vector< witsml1_4_1_1::Wellbore * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__RemoveAt(std::vector< witsml1_4_1_1::Wellbore * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__RemoveRange(std::vector< witsml1_4_1_1::Wellbore * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< witsml1_4_1_1::Wellbore * > *std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Repeat(witsml1_4_1_1::Wellbore *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< witsml1_4_1_1::Wellbore * >(count, value);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Reverse__SWIG_0(std::vector< witsml1_4_1_1::Wellbore * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Reverse__SWIG_1(std::vector< witsml1_4_1_1::Wellbore * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__SetRange(std::vector< witsml1_4_1_1::Wellbore * > *self,int index,std::vector< witsml1_4_1_1::Wellbore * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Contains(std::vector< witsml1_4_1_1::Wellbore * > *self,witsml1_4_1_1::Wellbore *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__IndexOf(std::vector< witsml1_4_1_1::Wellbore * > *self,witsml1_4_1_1::Wellbore *const &value){
        int index = -1;
        std::vector< witsml1_4_1_1::Wellbore * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__LastIndexOf(std::vector< witsml1_4_1_1::Wellbore * > *self,witsml1_4_1_1::Wellbore *const &value){
        int index = -1;
        std::vector< witsml1_4_1_1::Wellbore * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Remove(std::vector< witsml1_4_1_1::Wellbore * > *self,witsml1_4_1_1::Wellbore *const &value){
        std::vector< witsml1_4_1_1::Wellbore * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< witsml1_4_1_1::Trajectory * > *new_std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg___SWIG_2(int capacity){
        std::vector< witsml1_4_1_1::Trajectory * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< witsml1_4_1_1::Trajectory * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN witsml1_4_1_1::Trajectory *std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__getitemcopy(std::vector< witsml1_4_1_1::Trajectory * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN witsml1_4_1_1::Trajectory *const &std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__getitem(std::vector< witsml1_4_1_1::Trajectory * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__setitem(std::vector< witsml1_4_1_1::Trajectory * > *self,int index,witsml1_4_1_1::Trajectory *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__AddRange(std::vector< witsml1_4_1_1::Trajectory * > *self,std::vector< witsml1_4_1_1::Trajectory * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< witsml1_4_1_1::Trajectory * > *std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__GetRange(std::vector< witsml1_4_1_1::Trajectory * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< witsml1_4_1_1::Trajectory * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Insert(std::vector< witsml1_4_1_1::Trajectory * > *self,int index,witsml1_4_1_1::Trajectory *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__InsertRange(std::vector< witsml1_4_1_1::Trajectory * > *self,int index,std::vector< witsml1_4_1_1::Trajectory * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__RemoveAt(std::vector< witsml1_4_1_1::Trajectory * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__RemoveRange(std::vector< witsml1_4_1_1::Trajectory * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< witsml1_4_1_1::Trajectory * > *std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Repeat(witsml1_4_1_1::Trajectory *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< witsml1_4_1_1::Trajectory * >(count, value);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Reverse__SWIG_0(std::vector< witsml1_4_1_1::Trajectory * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Reverse__SWIG_1(std::vector< witsml1_4_1_1::Trajectory * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__SetRange(std::vector< witsml1_4_1_1::Trajectory * > *self,int index,std::vector< witsml1_4_1_1::Trajectory * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Contains(std::vector< witsml1_4_1_1::Trajectory * > *self,witsml1_4_1_1::Trajectory *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__IndexOf(std::vector< witsml1_4_1_1::Trajectory * > *self,witsml1_4_1_1::Trajectory *const &value){
        int index = -1;
        std::vector< witsml1_4_1_1::Trajectory * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__LastIndexOf(std::vector< witsml1_4_1_1::Trajectory * > *self,witsml1_4_1_1::Trajectory *const &value){
        int index = -1;
        std::vector< witsml1_4_1_1::Trajectory * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Remove(std::vector< witsml1_4_1_1::Trajectory * > *self,witsml1_4_1_1::Trajectory *const &value){
        std::vector< witsml1_4_1_1::Trajectory * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< witsml1_4_1_1::Log * > *new_std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg___SWIG_2(int capacity){
        std::vector< witsml1_4_1_1::Log * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< witsml1_4_1_1::Log * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN witsml1_4_1_1::Log *std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__getitemcopy(std::vector< witsml1_4_1_1::Log * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN witsml1_4_1_1::Log *const &std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__getitem(std::vector< witsml1_4_1_1::Log * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__setitem(std::vector< witsml1_4_1_1::Log * > *self,int index,witsml1_4_1_1::Log *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__AddRange(std::vector< witsml1_4_1_1::Log * > *self,std::vector< witsml1_4_1_1::Log * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< witsml1_4_1_1::Log * > *std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__GetRange(std::vector< witsml1_4_1_1::Log * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< witsml1_4_1_1::Log * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Insert(std::vector< witsml1_4_1_1::Log * > *self,int index,witsml1_4_1_1::Log *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__InsertRange(std::vector< witsml1_4_1_1::Log * > *self,int index,std::vector< witsml1_4_1_1::Log * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__RemoveAt(std::vector< witsml1_4_1_1::Log * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__RemoveRange(std::vector< witsml1_4_1_1::Log * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< witsml1_4_1_1::Log * > *std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Repeat(witsml1_4_1_1::Log *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< witsml1_4_1_1::Log * >(count, value);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Reverse__SWIG_0(std::vector< witsml1_4_1_1::Log * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Reverse__SWIG_1(std::vector< witsml1_4_1_1::Log * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__SetRange(std::vector< witsml1_4_1_1::Log * > *self,int index,std::vector< witsml1_4_1_1::Log * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Contains(std::vector< witsml1_4_1_1::Log * > *self,witsml1_4_1_1::Log *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__IndexOf(std::vector< witsml1_4_1_1::Log * > *self,witsml1_4_1_1::Log *const &value){
        int index = -1;
        std::vector< witsml1_4_1_1::Log * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__LastIndexOf(std::vector< witsml1_4_1_1::Log * > *self,witsml1_4_1_1::Log *const &value){
        int index = -1;
        std::vector< witsml1_4_1_1::Log * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Remove(std::vector< witsml1_4_1_1::Log * > *self,witsml1_4_1_1::Log *const &value){
        std::vector< witsml1_4_1_1::Log * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< witsml1_4_1_1::FormationMarker * > *new_std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg___SWIG_2(int capacity){
        std::vector< witsml1_4_1_1::FormationMarker * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< witsml1_4_1_1::FormationMarker * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN witsml1_4_1_1::FormationMarker *std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__getitemcopy(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN witsml1_4_1_1::FormationMarker *const &std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__getitem(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__setitem(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index,witsml1_4_1_1::FormationMarker *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__AddRange(std::vector< witsml1_4_1_1::FormationMarker * > *self,std::vector< witsml1_4_1_1::FormationMarker * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< witsml1_4_1_1::FormationMarker * > *std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__GetRange(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< witsml1_4_1_1::FormationMarker * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Insert(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index,witsml1_4_1_1::FormationMarker *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__InsertRange(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index,std::vector< witsml1_4_1_1::FormationMarker * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__RemoveAt(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__RemoveRange(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< witsml1_4_1_1::FormationMarker * > *std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Repeat(witsml1_4_1_1::FormationMarker *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< witsml1_4_1_1::FormationMarker * >(count, value);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Reverse__SWIG_0(std::vector< witsml1_4_1_1::FormationMarker * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Reverse__SWIG_1(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__SetRange(std::vector< witsml1_4_1_1::FormationMarker * > *self,int index,std::vector< witsml1_4_1_1::FormationMarker * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Contains(std::vector< witsml1_4_1_1::FormationMarker * > *self,witsml1_4_1_1::FormationMarker *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__IndexOf(std::vector< witsml1_4_1_1::FormationMarker * > *self,witsml1_4_1_1::FormationMarker *const &value){
        int index = -1;
        std::vector< witsml1_4_1_1::FormationMarker * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__LastIndexOf(std::vector< witsml1_4_1_1::FormationMarker * > *self,witsml1_4_1_1::FormationMarker *const &value){
        int index = -1;
        std::vector< witsml1_4_1_1::FormationMarker * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Remove(std::vector< witsml1_4_1_1::FormationMarker * > *self,witsml1_4_1_1::FormationMarker *const &value){
        std::vector< witsml1_4_1_1::FormationMarker * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_ULongLongArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  ULongLongArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ULongLongArray *)new_ULongLongArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ULongLongArray(void * jarg1) {
  ULongLongArray *arg1 = (ULongLongArray *) 0 ;
  
  arg1 = (ULongLongArray *)jarg1; 
  delete_ULongLongArray(arg1);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ULongLongArray_getitem(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  ULongLongArray *arg1 = (ULongLongArray *) 0 ;
  int arg2 ;
  unsigned long long result;
  
  arg1 = (ULongLongArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned long long)ULongLongArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ULongLongArray_setitem(void * jarg1, int jarg2, unsigned long long jarg3) {
  ULongLongArray *arg1 = (ULongLongArray *) 0 ;
  int arg2 ;
  unsigned long long arg3 ;
  
  arg1 = (ULongLongArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned long long)jarg3; 
  ULongLongArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ULongLongArray_cast(void * jarg1) {
  void * jresult ;
  ULongLongArray *arg1 = (ULongLongArray *) 0 ;
  unsigned long long *result = 0 ;
  
  arg1 = (ULongLongArray *)jarg1; 
  result = (unsigned long long *)ULongLongArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ULongLongArray_frompointer(void * jarg1) {
  void * jresult ;
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  ULongLongArray *result = 0 ;
  
  arg1 = (unsigned long long *)jarg1; 
  result = (ULongLongArray *)ULongLongArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ULongArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  ULongArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ULongArray *)new_ULongArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ULongArray(void * jarg1) {
  ULongArray *arg1 = (ULongArray *) 0 ;
  
  arg1 = (ULongArray *)jarg1; 
  delete_ULongArray(arg1);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ULongArray_getitem(void * jarg1, int jarg2) {
  unsigned long jresult ;
  ULongArray *arg1 = (ULongArray *) 0 ;
  int arg2 ;
  unsigned long result;
  
  arg1 = (ULongArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned long)ULongArray_getitem(arg1,arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ULongArray_setitem(void * jarg1, int jarg2, unsigned long jarg3) {
  ULongArray *arg1 = (ULongArray *) 0 ;
  int arg2 ;
  unsigned long arg3 ;
  
  arg1 = (ULongArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned long)jarg3; 
  ULongArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ULongArray_cast(void * jarg1) {
  void * jresult ;
  ULongArray *arg1 = (ULongArray *) 0 ;
  unsigned long *result = 0 ;
  
  arg1 = (ULongArray *)jarg1; 
  result = (unsigned long *)ULongArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ULongArray_frompointer(void * jarg1) {
  void * jresult ;
  unsigned long *arg1 = (unsigned long *) 0 ;
  ULongArray *result = 0 ;
  
  arg1 = (unsigned long *)jarg1; 
  result = (ULongArray *)ULongArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UIntArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  UIntArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (UIntArray *)new_UIntArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UIntArray(void * jarg1) {
  UIntArray *arg1 = (UIntArray *) 0 ;
  
  arg1 = (UIntArray *)jarg1; 
  delete_UIntArray(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UIntArray_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  UIntArray *arg1 = (UIntArray *) 0 ;
  int arg2 ;
  unsigned int result;
  
  arg1 = (UIntArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned int)UIntArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UIntArray_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  UIntArray *arg1 = (UIntArray *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (UIntArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  UIntArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIntArray_cast(void * jarg1) {
  void * jresult ;
  UIntArray *arg1 = (UIntArray *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (UIntArray *)jarg1; 
  result = (unsigned int *)UIntArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UIntArray_frompointer(void * jarg1) {
  void * jresult ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  UIntArray *result = 0 ;
  
  arg1 = (unsigned int *)jarg1; 
  result = (UIntArray *)UIntArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  IntArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (IntArray *)new_IntArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArray(void * jarg1) {
  IntArray *arg1 = (IntArray *) 0 ;
  
  arg1 = (IntArray *)jarg1; 
  delete_IntArray(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_getitem(void * jarg1, int jarg2) {
  int jresult ;
  IntArray *arg1 = (IntArray *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)IntArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_setitem(void * jarg1, int jarg2, int jarg3) {
  IntArray *arg1 = (IntArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (IntArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  IntArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArray_cast(void * jarg1) {
  void * jresult ;
  IntArray *arg1 = (IntArray *) 0 ;
  int *result = 0 ;
  
  arg1 = (IntArray *)jarg1; 
  result = (int *)IntArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArray_frompointer(void * jarg1) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  IntArray *result = 0 ;
  
  arg1 = (int *)jarg1; 
  result = (IntArray *)IntArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LongArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  LongArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (LongArray *)new_LongArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LongArray(void * jarg1) {
  LongArray *arg1 = (LongArray *) 0 ;
  
  arg1 = (LongArray *)jarg1; 
  delete_LongArray(arg1);
}


SWIGEXPORT long SWIGSTDCALL CSharp_LongArray_getitem(void * jarg1, int jarg2) {
  long jresult ;
  LongArray *arg1 = (LongArray *) 0 ;
  int arg2 ;
  long result;
  
  arg1 = (LongArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (long)LongArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LongArray_setitem(void * jarg1, int jarg2, long jarg3) {
  LongArray *arg1 = (LongArray *) 0 ;
  int arg2 ;
  long arg3 ;
  
  arg1 = (LongArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long)jarg3; 
  LongArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LongArray_cast(void * jarg1) {
  void * jresult ;
  LongArray *arg1 = (LongArray *) 0 ;
  long *result = 0 ;
  
  arg1 = (LongArray *)jarg1; 
  result = (long *)LongArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LongArray_frompointer(void * jarg1) {
  void * jresult ;
  long *arg1 = (long *) 0 ;
  LongArray *result = 0 ;
  
  arg1 = (long *)jarg1; 
  result = (LongArray *)LongArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FloatArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  FloatArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (FloatArray *)new_FloatArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FloatArray(void * jarg1) {
  FloatArray *arg1 = (FloatArray *) 0 ;
  
  arg1 = (FloatArray *)jarg1; 
  delete_FloatArray(arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_FloatArray_getitem(void * jarg1, int jarg2) {
  float jresult ;
  FloatArray *arg1 = (FloatArray *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (FloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)FloatArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatArray_setitem(void * jarg1, int jarg2, float jarg3) {
  FloatArray *arg1 = (FloatArray *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (FloatArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  FloatArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FloatArray_cast(void * jarg1) {
  void * jresult ;
  FloatArray *arg1 = (FloatArray *) 0 ;
  float *result = 0 ;
  
  arg1 = (FloatArray *)jarg1; 
  result = (float *)FloatArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FloatArray_frompointer(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  FloatArray *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (FloatArray *)FloatArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DoubleArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  DoubleArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (DoubleArray *)new_DoubleArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DoubleArray(void * jarg1) {
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  
  arg1 = (DoubleArray *)jarg1; 
  delete_DoubleArray(arg1);
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleArray_getitem(void * jarg1, int jarg2) {
  double jresult ;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (DoubleArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)DoubleArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleArray_setitem(void * jarg1, int jarg2, double jarg3) {
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (DoubleArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  DoubleArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleArray_cast(void * jarg1) {
  void * jresult ;
  DoubleArray *arg1 = (DoubleArray *) 0 ;
  double *result = 0 ;
  
  arg1 = (DoubleArray *)jarg1; 
  result = (double *)DoubleArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleArray_frompointer(void * jarg1) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  DoubleArray *result = 0 ;
  
  arg1 = (double *)jarg1; 
  result = (DoubleArray *)DoubleArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShortArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  ShortArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ShortArray *)new_ShortArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShortArray(void * jarg1) {
  ShortArray *arg1 = (ShortArray *) 0 ;
  
  arg1 = (ShortArray *)jarg1; 
  delete_ShortArray(arg1);
}


SWIGEXPORT short SWIGSTDCALL CSharp_ShortArray_getitem(void * jarg1, int jarg2) {
  short jresult ;
  ShortArray *arg1 = (ShortArray *) 0 ;
  int arg2 ;
  short result;
  
  arg1 = (ShortArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (short)ShortArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShortArray_setitem(void * jarg1, int jarg2, short jarg3) {
  ShortArray *arg1 = (ShortArray *) 0 ;
  int arg2 ;
  short arg3 ;
  
  arg1 = (ShortArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (short)jarg3; 
  ShortArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShortArray_cast(void * jarg1) {
  void * jresult ;
  ShortArray *arg1 = (ShortArray *) 0 ;
  short *result = 0 ;
  
  arg1 = (ShortArray *)jarg1; 
  result = (short *)ShortArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShortArray_frompointer(void * jarg1) {
  void * jresult ;
  short *arg1 = (short *) 0 ;
  ShortArray *result = 0 ;
  
  arg1 = (short *)jarg1; 
  result = (ShortArray *)ShortArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UShortArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  UShortArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (UShortArray *)new_UShortArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UShortArray(void * jarg1) {
  UShortArray *arg1 = (UShortArray *) 0 ;
  
  arg1 = (UShortArray *)jarg1; 
  delete_UShortArray(arg1);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_UShortArray_getitem(void * jarg1, int jarg2) {
  unsigned short jresult ;
  UShortArray *arg1 = (UShortArray *) 0 ;
  int arg2 ;
  unsigned short result;
  
  arg1 = (UShortArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned short)UShortArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortArray_setitem(void * jarg1, int jarg2, unsigned short jarg3) {
  UShortArray *arg1 = (UShortArray *) 0 ;
  int arg2 ;
  unsigned short arg3 ;
  
  arg1 = (UShortArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned short)jarg3; 
  UShortArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UShortArray_cast(void * jarg1) {
  void * jresult ;
  UShortArray *arg1 = (UShortArray *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (UShortArray *)jarg1; 
  result = (unsigned short *)UShortArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UShortArray_frompointer(void * jarg1) {
  void * jresult ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  UShortArray *result = 0 ;
  
  arg1 = (unsigned short *)jarg1; 
  result = (UShortArray *)UShortArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  CharArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (CharArray *)new_CharArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CharArray(void * jarg1) {
  CharArray *arg1 = (CharArray *) 0 ;
  
  arg1 = (CharArray *)jarg1; 
  delete_CharArray(arg1);
}


SWIGEXPORT char SWIGSTDCALL CSharp_CharArray_getitem(void * jarg1, int jarg2) {
  char jresult ;
  CharArray *arg1 = (CharArray *) 0 ;
  int arg2 ;
  char result;
  
  arg1 = (CharArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char)CharArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharArray_setitem(void * jarg1, int jarg2, char jarg3) {
  CharArray *arg1 = (CharArray *) 0 ;
  int arg2 ;
  char arg3 ;
  
  arg1 = (CharArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  CharArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CharArray_cast(void * jarg1) {
  char * jresult ;
  CharArray *arg1 = (CharArray *) 0 ;
  char *result = 0 ;
  
  arg1 = (CharArray *)jarg1; 
  result = (char *)CharArray_cast(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CharArray_frompointer(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  CharArray *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CharArray *)CharArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UCharArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  UCharArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (UCharArray *)new_UCharArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UCharArray(void * jarg1) {
  UCharArray *arg1 = (UCharArray *) 0 ;
  
  arg1 = (UCharArray *)jarg1; 
  delete_UCharArray(arg1);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_UCharArray_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  UCharArray *arg1 = (UCharArray *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (UCharArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)UCharArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UCharArray_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  UCharArray *arg1 = (UCharArray *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  arg1 = (UCharArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  UCharArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UCharArray_cast(void * jarg1) {
  void * jresult ;
  UCharArray *arg1 = (UCharArray *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (UCharArray *)jarg1; 
  result = (unsigned char *)UCharArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UCharArray_frompointer(void * jarg1) {
  void * jresult ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  UCharArray *result = 0 ;
  
  arg1 = (unsigned char *)jarg1; 
  result = (UCharArray *)UCharArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoolArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  BoolArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BoolArray *)new_BoolArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BoolArray(void * jarg1) {
  BoolArray *arg1 = (BoolArray *) 0 ;
  
  arg1 = (BoolArray *)jarg1; 
  delete_BoolArray(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BoolArray_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BoolArray *arg1 = (BoolArray *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BoolArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)BoolArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolArray_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  BoolArray *arg1 = (BoolArray *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (BoolArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  BoolArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BoolArray_cast(void * jarg1) {
  void * jresult ;
  BoolArray *arg1 = (BoolArray *) 0 ;
  bool *result = 0 ;
  
  arg1 = (BoolArray *)jarg1; 
  result = (bool *)BoolArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BoolArray_frompointer(void * jarg1) {
  void * jresult ;
  bool *arg1 = (bool *) 0 ;
  BoolArray *result = 0 ;
  
  arg1 = (bool *)jarg1; 
  result = (BoolArray *)BoolArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_Clear(void * jarg1) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  resqml2_0::LocalDepth3dCrs **arg2 = 0 ;
  resqml2_0::LocalDepth3dCrs *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalDepth3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalDepth3dCrs **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::LocalDepth3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LocalDepth3dCrsVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  std::vector< resqml2_0::LocalDepth3dCrs * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::LocalDepth3dCrs * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LocalDepth3dCrsVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  std::vector< resqml2_0::LocalDepth3dCrs * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::LocalDepth3dCrs * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  std::vector< resqml2_0::LocalDepth3dCrs * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::LocalDepth3dCrs * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalDepth3dCrsVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::LocalDepth3dCrs * > *)new std::vector< resqml2_0::LocalDepth3dCrs * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalDepth3dCrsVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = 0 ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::LocalDepth3dCrs * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::LocalDepth3dCrs * > *)new std::vector< resqml2_0::LocalDepth3dCrs * >((std::vector< resqml2_0::LocalDepth3dCrs * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalDepth3dCrsVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::LocalDepth3dCrs * > *)new_std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalDepth3dCrsVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  resqml2_0::LocalDepth3dCrs *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::LocalDepth3dCrs *)std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalDepth3dCrsVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  resqml2_0::LocalDepth3dCrs **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::LocalDepth3dCrs **) &std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  resqml2_0::LocalDepth3dCrs **arg3 = 0 ;
  resqml2_0::LocalDepth3dCrs *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::LocalDepth3dCrs *)jarg3;
  arg3 = (resqml2_0::LocalDepth3dCrs **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__setitem(arg1,arg2,(resqml2_0::LocalDepth3dCrs *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::LocalDepth3dCrs * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::LocalDepth3dCrs * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalDepth3dCrsVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::LocalDepth3dCrs * > *)std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  resqml2_0::LocalDepth3dCrs **arg3 = 0 ;
  resqml2_0::LocalDepth3dCrs *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::LocalDepth3dCrs *)jarg3;
  arg3 = (resqml2_0::LocalDepth3dCrs **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Insert(arg1,arg2,(resqml2_0::LocalDepth3dCrs *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::LocalDepth3dCrs * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::LocalDepth3dCrs * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalDepth3dCrsVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::LocalDepth3dCrs **arg1 = 0 ;
  int arg2 ;
  resqml2_0::LocalDepth3dCrs *temp1 = 0 ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *result = 0 ;
  
  temp1 = (resqml2_0::LocalDepth3dCrs *)jarg1;
  arg1 = (resqml2_0::LocalDepth3dCrs **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::LocalDepth3dCrs * > *)std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Repeat((resqml2_0::LocalDepth3dCrs *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalDepth3dCrsVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::LocalDepth3dCrs * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::LocalDepth3dCrs * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocalDepth3dCrsVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  resqml2_0::LocalDepth3dCrs **arg2 = 0 ;
  resqml2_0::LocalDepth3dCrs *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalDepth3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalDepth3dCrs **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Contains(arg1,(resqml2_0::LocalDepth3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LocalDepth3dCrsVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  resqml2_0::LocalDepth3dCrs **arg2 = 0 ;
  resqml2_0::LocalDepth3dCrs *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalDepth3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalDepth3dCrs **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__IndexOf(arg1,(resqml2_0::LocalDepth3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LocalDepth3dCrsVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  resqml2_0::LocalDepth3dCrs **arg2 = 0 ;
  resqml2_0::LocalDepth3dCrs *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalDepth3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalDepth3dCrs **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__LastIndexOf(arg1,(resqml2_0::LocalDepth3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocalDepth3dCrsVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  resqml2_0::LocalDepth3dCrs **arg2 = 0 ;
  resqml2_0::LocalDepth3dCrs *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalDepth3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalDepth3dCrs **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_LocalDepth3dCrs_Sm__Sg__Remove(arg1,(resqml2_0::LocalDepth3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LocalDepth3dCrsVector(void * jarg1) {
  std::vector< resqml2_0::LocalDepth3dCrs * > *arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalDepth3dCrs * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_Clear(void * jarg1) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  resqml2_0::LocalTime3dCrs **arg2 = 0 ;
  resqml2_0::LocalTime3dCrs *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalTime3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalTime3dCrs **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::LocalTime3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LocalTime3dCrsVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  std::vector< resqml2_0::LocalTime3dCrs * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::LocalTime3dCrs * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LocalTime3dCrsVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  std::vector< resqml2_0::LocalTime3dCrs * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::LocalTime3dCrs * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  std::vector< resqml2_0::LocalTime3dCrs * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::LocalTime3dCrs * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalTime3dCrsVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::LocalTime3dCrs * > *)new std::vector< resqml2_0::LocalTime3dCrs * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalTime3dCrsVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = 0 ;
  std::vector< resqml2_0::LocalTime3dCrs * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::LocalTime3dCrs * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::LocalTime3dCrs * > *)new std::vector< resqml2_0::LocalTime3dCrs * >((std::vector< resqml2_0::LocalTime3dCrs * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalTime3dCrsVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::LocalTime3dCrs * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::LocalTime3dCrs * > *)new_std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalTime3dCrsVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  resqml2_0::LocalTime3dCrs *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::LocalTime3dCrs *)std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalTime3dCrsVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  resqml2_0::LocalTime3dCrs **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::LocalTime3dCrs **) &std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  resqml2_0::LocalTime3dCrs **arg3 = 0 ;
  resqml2_0::LocalTime3dCrs *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::LocalTime3dCrs *)jarg3;
  arg3 = (resqml2_0::LocalTime3dCrs **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__setitem(arg1,arg2,(resqml2_0::LocalTime3dCrs *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::LocalTime3dCrs * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::LocalTime3dCrs * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalTime3dCrsVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::LocalTime3dCrs * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::LocalTime3dCrs * > *)std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  resqml2_0::LocalTime3dCrs **arg3 = 0 ;
  resqml2_0::LocalTime3dCrs *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::LocalTime3dCrs *)jarg3;
  arg3 = (resqml2_0::LocalTime3dCrs **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Insert(arg1,arg2,(resqml2_0::LocalTime3dCrs *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::LocalTime3dCrs * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::LocalTime3dCrs * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalTime3dCrsVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::LocalTime3dCrs **arg1 = 0 ;
  int arg2 ;
  resqml2_0::LocalTime3dCrs *temp1 = 0 ;
  std::vector< resqml2_0::LocalTime3dCrs * > *result = 0 ;
  
  temp1 = (resqml2_0::LocalTime3dCrs *)jarg1;
  arg1 = (resqml2_0::LocalTime3dCrs **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::LocalTime3dCrs * > *)std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Repeat((resqml2_0::LocalTime3dCrs *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalTime3dCrsVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::LocalTime3dCrs * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::LocalTime3dCrs * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocalTime3dCrsVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  resqml2_0::LocalTime3dCrs **arg2 = 0 ;
  resqml2_0::LocalTime3dCrs *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalTime3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalTime3dCrs **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Contains(arg1,(resqml2_0::LocalTime3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LocalTime3dCrsVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  resqml2_0::LocalTime3dCrs **arg2 = 0 ;
  resqml2_0::LocalTime3dCrs *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalTime3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalTime3dCrs **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__IndexOf(arg1,(resqml2_0::LocalTime3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LocalTime3dCrsVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  resqml2_0::LocalTime3dCrs **arg2 = 0 ;
  resqml2_0::LocalTime3dCrs *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalTime3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalTime3dCrs **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__LastIndexOf(arg1,(resqml2_0::LocalTime3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LocalTime3dCrsVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  resqml2_0::LocalTime3dCrs **arg2 = 0 ;
  resqml2_0::LocalTime3dCrs *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  temp2 = (resqml2_0::LocalTime3dCrs *)jarg2;
  arg2 = (resqml2_0::LocalTime3dCrs **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_LocalTime3dCrs_Sm__Sg__Remove(arg1,(resqml2_0::LocalTime3dCrs *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LocalTime3dCrsVector(void * jarg1) {
  std::vector< resqml2_0::LocalTime3dCrs * > *arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::LocalTime3dCrs * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_Clear(void * jarg1) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  resqml2_0::StratigraphicColumn **arg2 = 0 ;
  resqml2_0::StratigraphicColumn *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumn *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumn **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::StratigraphicColumn *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StratigraphicColumnVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  std::vector< resqml2_0::StratigraphicColumn * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::StratigraphicColumn * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StratigraphicColumnVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  std::vector< resqml2_0::StratigraphicColumn * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::StratigraphicColumn * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  std::vector< resqml2_0::StratigraphicColumn * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::StratigraphicColumn * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicColumnVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::StratigraphicColumn * > *)new std::vector< resqml2_0::StratigraphicColumn * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicColumnVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = 0 ;
  std::vector< resqml2_0::StratigraphicColumn * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicColumn * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::StratigraphicColumn * > *)new std::vector< resqml2_0::StratigraphicColumn * >((std::vector< resqml2_0::StratigraphicColumn * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicColumnVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::StratigraphicColumn * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicColumn * > *)new_std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicColumnVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumn *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::StratigraphicColumn *)std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicColumnVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumn **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::StratigraphicColumn **) &std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumn **arg3 = 0 ;
  resqml2_0::StratigraphicColumn *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::StratigraphicColumn *)jarg3;
  arg3 = (resqml2_0::StratigraphicColumn **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__setitem(arg1,arg2,(resqml2_0::StratigraphicColumn *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicColumn * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::StratigraphicColumn * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicColumnVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::StratigraphicColumn * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicColumn * > *)std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumn **arg3 = 0 ;
  resqml2_0::StratigraphicColumn *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::StratigraphicColumn *)jarg3;
  arg3 = (resqml2_0::StratigraphicColumn **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Insert(arg1,arg2,(resqml2_0::StratigraphicColumn *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicColumn * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::StratigraphicColumn * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicColumnVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::StratigraphicColumn **arg1 = 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumn *temp1 = 0 ;
  std::vector< resqml2_0::StratigraphicColumn * > *result = 0 ;
  
  temp1 = (resqml2_0::StratigraphicColumn *)jarg1;
  arg1 = (resqml2_0::StratigraphicColumn **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicColumn * > *)std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Repeat((resqml2_0::StratigraphicColumn *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicColumn * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::StratigraphicColumn * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StratigraphicColumnVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  resqml2_0::StratigraphicColumn **arg2 = 0 ;
  resqml2_0::StratigraphicColumn *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumn *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumn **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Contains(arg1,(resqml2_0::StratigraphicColumn *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StratigraphicColumnVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  resqml2_0::StratigraphicColumn **arg2 = 0 ;
  resqml2_0::StratigraphicColumn *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumn *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumn **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__IndexOf(arg1,(resqml2_0::StratigraphicColumn *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StratigraphicColumnVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  resqml2_0::StratigraphicColumn **arg2 = 0 ;
  resqml2_0::StratigraphicColumn *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumn *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumn **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__LastIndexOf(arg1,(resqml2_0::StratigraphicColumn *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StratigraphicColumnVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  resqml2_0::StratigraphicColumn **arg2 = 0 ;
  resqml2_0::StratigraphicColumn *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumn *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumn **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_StratigraphicColumn_Sm__Sg__Remove(arg1,(resqml2_0::StratigraphicColumn *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StratigraphicColumnVector(void * jarg1) {
  std::vector< resqml2_0::StratigraphicColumn * > *arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumn * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumnRankInterpretation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::StratigraphicColumnRankInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicColumnRankInterpretationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)new std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicColumnRankInterpretationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = 0 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)new std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >((std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicColumnRankInterpretationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)new_std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumnRankInterpretation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::StratigraphicColumnRankInterpretation *)std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumnRankInterpretation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::StratigraphicColumnRankInterpretation **) &std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumnRankInterpretation **arg3 = 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg3;
  arg3 = (resqml2_0::StratigraphicColumnRankInterpretation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::StratigraphicColumnRankInterpretation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumnRankInterpretation **arg3 = 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg3;
  arg3 = (resqml2_0::StratigraphicColumnRankInterpretation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::StratigraphicColumnRankInterpretation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::StratigraphicColumnRankInterpretation *temp1 = 0 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *result = 0 ;
  
  temp1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1;
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Repeat((resqml2_0::StratigraphicColumnRankInterpretation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumnRankInterpretation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Contains(arg1,(resqml2_0::StratigraphicColumnRankInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumnRankInterpretation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__IndexOf(arg1,(resqml2_0::StratigraphicColumnRankInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumnRankInterpretation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::StratigraphicColumnRankInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StratigraphicColumnRankInterpretationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicColumnRankInterpretation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_StratigraphicColumnRankInterpretation_Sm__Sg__Remove(arg1,(resqml2_0::StratigraphicColumnRankInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StratigraphicColumnRankInterpretationVector(void * jarg1) {
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_Clear(void * jarg1) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  resqml2_0::Fault **arg2 = 0 ;
  resqml2_0::Fault *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  temp2 = (resqml2_0::Fault *)jarg2;
  arg2 = (resqml2_0::Fault **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::Fault *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FaultVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  std::vector< resqml2_0::Fault * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Fault * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FaultVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  std::vector< resqml2_0::Fault * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Fault * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  std::vector< resqml2_0::Fault * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Fault * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FaultVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::Fault * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::Fault * > *)new std::vector< resqml2_0::Fault * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FaultVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = 0 ;
  std::vector< resqml2_0::Fault * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Fault * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::Fault * > *)new std::vector< resqml2_0::Fault * >((std::vector< resqml2_0::Fault * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FaultVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::Fault * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Fault * > *)new_std_vector_Sl_resqml2_0_Fault_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FaultVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  resqml2_0::Fault *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Fault *)std_vector_Sl_resqml2_0_Fault_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FaultVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  resqml2_0::Fault **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Fault **) &std_vector_Sl_resqml2_0_Fault_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  resqml2_0::Fault **arg3 = 0 ;
  resqml2_0::Fault *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Fault *)jarg3;
  arg3 = (resqml2_0::Fault **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fault_Sm__Sg__setitem(arg1,arg2,(resqml2_0::Fault *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  std::vector< resqml2_0::Fault * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Fault * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Fault * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_Fault_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::Fault * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FaultVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::Fault * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Fault * > *)std_vector_Sl_resqml2_0_Fault_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  resqml2_0::Fault **arg3 = 0 ;
  resqml2_0::Fault *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Fault *)jarg3;
  arg3 = (resqml2_0::Fault **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fault_Sm__Sg__Insert(arg1,arg2,(resqml2_0::Fault *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Fault * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Fault * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Fault * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fault_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::Fault * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fault_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fault_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FaultVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::Fault **arg1 = 0 ;
  int arg2 ;
  resqml2_0::Fault *temp1 = 0 ;
  std::vector< resqml2_0::Fault * > *result = 0 ;
  
  temp1 = (resqml2_0::Fault *)jarg1;
  arg1 = (resqml2_0::Fault **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Fault * > *)std_vector_Sl_resqml2_0_Fault_Sm__Sg__Repeat((resqml2_0::Fault *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_Fault_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fault_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaultVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Fault * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Fault * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Fault * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fault_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::Fault * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FaultVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  resqml2_0::Fault **arg2 = 0 ;
  resqml2_0::Fault *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  temp2 = (resqml2_0::Fault *)jarg2;
  arg2 = (resqml2_0::Fault **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Fault_Sm__Sg__Contains(arg1,(resqml2_0::Fault *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FaultVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  resqml2_0::Fault **arg2 = 0 ;
  resqml2_0::Fault *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  temp2 = (resqml2_0::Fault *)jarg2;
  arg2 = (resqml2_0::Fault **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Fault_Sm__Sg__IndexOf(arg1,(resqml2_0::Fault *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FaultVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  resqml2_0::Fault **arg2 = 0 ;
  resqml2_0::Fault *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  temp2 = (resqml2_0::Fault *)jarg2;
  arg2 = (resqml2_0::Fault **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Fault_Sm__Sg__LastIndexOf(arg1,(resqml2_0::Fault *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FaultVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  resqml2_0::Fault **arg2 = 0 ;
  resqml2_0::Fault *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  temp2 = (resqml2_0::Fault *)jarg2;
  arg2 = (resqml2_0::Fault **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Fault_Sm__Sg__Remove(arg1,(resqml2_0::Fault *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FaultVector(void * jarg1) {
  std::vector< resqml2_0::Fault * > *arg1 = (std::vector< resqml2_0::Fault * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Fault * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_Clear(void * jarg1) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  resqml2_0::Fracture **arg2 = 0 ;
  resqml2_0::Fracture *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  temp2 = (resqml2_0::Fracture *)jarg2;
  arg2 = (resqml2_0::Fracture **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::Fracture *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FractureVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  std::vector< resqml2_0::Fracture * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Fracture * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FractureVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  std::vector< resqml2_0::Fracture * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Fracture * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  std::vector< resqml2_0::Fracture * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Fracture * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FractureVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::Fracture * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::Fracture * > *)new std::vector< resqml2_0::Fracture * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FractureVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = 0 ;
  std::vector< resqml2_0::Fracture * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Fracture * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::Fracture * > *)new std::vector< resqml2_0::Fracture * >((std::vector< resqml2_0::Fracture * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FractureVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::Fracture * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Fracture * > *)new_std_vector_Sl_resqml2_0_Fracture_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FractureVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  resqml2_0::Fracture *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Fracture *)std_vector_Sl_resqml2_0_Fracture_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FractureVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  resqml2_0::Fracture **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Fracture **) &std_vector_Sl_resqml2_0_Fracture_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  resqml2_0::Fracture **arg3 = 0 ;
  resqml2_0::Fracture *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Fracture *)jarg3;
  arg3 = (resqml2_0::Fracture **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fracture_Sm__Sg__setitem(arg1,arg2,(resqml2_0::Fracture *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  std::vector< resqml2_0::Fracture * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Fracture * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Fracture * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_Fracture_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::Fracture * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FractureVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::Fracture * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Fracture * > *)std_vector_Sl_resqml2_0_Fracture_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  resqml2_0::Fracture **arg3 = 0 ;
  resqml2_0::Fracture *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Fracture *)jarg3;
  arg3 = (resqml2_0::Fracture **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Insert(arg1,arg2,(resqml2_0::Fracture *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Fracture * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Fracture * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Fracture * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fracture_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::Fracture * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fracture_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fracture_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FractureVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::Fracture **arg1 = 0 ;
  int arg2 ;
  resqml2_0::Fracture *temp1 = 0 ;
  std::vector< resqml2_0::Fracture * > *result = 0 ;
  
  temp1 = (resqml2_0::Fracture *)jarg1;
  arg1 = (resqml2_0::Fracture **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Fracture * > *)std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Repeat((resqml2_0::Fracture *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FractureVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Fracture * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Fracture * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Fracture * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Fracture_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::Fracture * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FractureVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  resqml2_0::Fracture **arg2 = 0 ;
  resqml2_0::Fracture *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  temp2 = (resqml2_0::Fracture *)jarg2;
  arg2 = (resqml2_0::Fracture **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Contains(arg1,(resqml2_0::Fracture *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FractureVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  resqml2_0::Fracture **arg2 = 0 ;
  resqml2_0::Fracture *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  temp2 = (resqml2_0::Fracture *)jarg2;
  arg2 = (resqml2_0::Fracture **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Fracture_Sm__Sg__IndexOf(arg1,(resqml2_0::Fracture *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FractureVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  resqml2_0::Fracture **arg2 = 0 ;
  resqml2_0::Fracture *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  temp2 = (resqml2_0::Fracture *)jarg2;
  arg2 = (resqml2_0::Fracture **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Fracture_Sm__Sg__LastIndexOf(arg1,(resqml2_0::Fracture *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FractureVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  resqml2_0::Fracture **arg2 = 0 ;
  resqml2_0::Fracture *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  temp2 = (resqml2_0::Fracture *)jarg2;
  arg2 = (resqml2_0::Fracture **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Fracture_Sm__Sg__Remove(arg1,(resqml2_0::Fracture *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FractureVector(void * jarg1) {
  std::vector< resqml2_0::Fracture * > *arg1 = (std::vector< resqml2_0::Fracture * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Fracture * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_Clear(void * jarg1) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  resqml2_0::Horizon **arg2 = 0 ;
  resqml2_0::Horizon *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  temp2 = (resqml2_0::Horizon *)jarg2;
  arg2 = (resqml2_0::Horizon **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::Horizon *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HorizonVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  std::vector< resqml2_0::Horizon * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Horizon * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HorizonVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  std::vector< resqml2_0::Horizon * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Horizon * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  std::vector< resqml2_0::Horizon * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Horizon * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HorizonVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::Horizon * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::Horizon * > *)new std::vector< resqml2_0::Horizon * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HorizonVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = 0 ;
  std::vector< resqml2_0::Horizon * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Horizon * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::Horizon * > *)new std::vector< resqml2_0::Horizon * >((std::vector< resqml2_0::Horizon * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HorizonVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::Horizon * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Horizon * > *)new_std_vector_Sl_resqml2_0_Horizon_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HorizonVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  resqml2_0::Horizon *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Horizon *)std_vector_Sl_resqml2_0_Horizon_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HorizonVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  resqml2_0::Horizon **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Horizon **) &std_vector_Sl_resqml2_0_Horizon_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  resqml2_0::Horizon **arg3 = 0 ;
  resqml2_0::Horizon *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Horizon *)jarg3;
  arg3 = (resqml2_0::Horizon **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Horizon_Sm__Sg__setitem(arg1,arg2,(resqml2_0::Horizon *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  std::vector< resqml2_0::Horizon * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Horizon * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Horizon * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_Horizon_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::Horizon * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HorizonVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::Horizon * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Horizon * > *)std_vector_Sl_resqml2_0_Horizon_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  resqml2_0::Horizon **arg3 = 0 ;
  resqml2_0::Horizon *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Horizon *)jarg3;
  arg3 = (resqml2_0::Horizon **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Insert(arg1,arg2,(resqml2_0::Horizon *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Horizon * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Horizon * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Horizon * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Horizon_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::Horizon * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Horizon_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Horizon_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HorizonVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::Horizon **arg1 = 0 ;
  int arg2 ;
  resqml2_0::Horizon *temp1 = 0 ;
  std::vector< resqml2_0::Horizon * > *result = 0 ;
  
  temp1 = (resqml2_0::Horizon *)jarg1;
  arg1 = (resqml2_0::Horizon **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Horizon * > *)std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Repeat((resqml2_0::Horizon *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Horizon * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Horizon * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Horizon * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Horizon_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::Horizon * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HorizonVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  resqml2_0::Horizon **arg2 = 0 ;
  resqml2_0::Horizon *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  temp2 = (resqml2_0::Horizon *)jarg2;
  arg2 = (resqml2_0::Horizon **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Contains(arg1,(resqml2_0::Horizon *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HorizonVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  resqml2_0::Horizon **arg2 = 0 ;
  resqml2_0::Horizon *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  temp2 = (resqml2_0::Horizon *)jarg2;
  arg2 = (resqml2_0::Horizon **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Horizon_Sm__Sg__IndexOf(arg1,(resqml2_0::Horizon *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HorizonVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  resqml2_0::Horizon **arg2 = 0 ;
  resqml2_0::Horizon *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  temp2 = (resqml2_0::Horizon *)jarg2;
  arg2 = (resqml2_0::Horizon **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Horizon_Sm__Sg__LastIndexOf(arg1,(resqml2_0::Horizon *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HorizonVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  resqml2_0::Horizon **arg2 = 0 ;
  resqml2_0::Horizon *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  temp2 = (resqml2_0::Horizon *)jarg2;
  arg2 = (resqml2_0::Horizon **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Horizon_Sm__Sg__Remove(arg1,(resqml2_0::Horizon *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HorizonVector(void * jarg1) {
  std::vector< resqml2_0::Horizon * > *arg1 = (std::vector< resqml2_0::Horizon * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Horizon * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  resqml2_0::StratigraphicUnitInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicUnitInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicUnitInterpretation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::StratigraphicUnitInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::StratigraphicUnitInterpretation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::StratigraphicUnitInterpretation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicUnitInterpretationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)new std::vector< resqml2_0::StratigraphicUnitInterpretation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicUnitInterpretationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = 0 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicUnitInterpretation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)new std::vector< resqml2_0::StratigraphicUnitInterpretation * >((std::vector< resqml2_0::StratigraphicUnitInterpretation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicUnitInterpretationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)new_std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicUnitInterpretation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::StratigraphicUnitInterpretation *)std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicUnitInterpretation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::StratigraphicUnitInterpretation **) &std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicUnitInterpretation **arg3 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::StratigraphicUnitInterpretation *)jarg3;
  arg3 = (resqml2_0::StratigraphicUnitInterpretation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::StratigraphicUnitInterpretation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicUnitInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::StratigraphicUnitInterpretation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicUnitInterpretation **arg3 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::StratigraphicUnitInterpretation *)jarg3;
  arg3 = (resqml2_0::StratigraphicUnitInterpretation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::StratigraphicUnitInterpretation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicUnitInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::StratigraphicUnitInterpretation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::StratigraphicUnitInterpretation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::StratigraphicUnitInterpretation *temp1 = 0 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *result = 0 ;
  
  temp1 = (resqml2_0::StratigraphicUnitInterpretation *)jarg1;
  arg1 = (resqml2_0::StratigraphicUnitInterpretation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Repeat((resqml2_0::StratigraphicUnitInterpretation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicUnitInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::StratigraphicUnitInterpretation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  resqml2_0::StratigraphicUnitInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicUnitInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicUnitInterpretation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Contains(arg1,(resqml2_0::StratigraphicUnitInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  resqml2_0::StratigraphicUnitInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicUnitInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicUnitInterpretation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__IndexOf(arg1,(resqml2_0::StratigraphicUnitInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  resqml2_0::StratigraphicUnitInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicUnitInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicUnitInterpretation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::StratigraphicUnitInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StratigraphicUnitInterpretationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  resqml2_0::StratigraphicUnitInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicUnitInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicUnitInterpretation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_StratigraphicUnitInterpretation_Sm__Sg__Remove(arg1,(resqml2_0::StratigraphicUnitInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StratigraphicUnitInterpretationVector(void * jarg1) {
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicUnitInterpretation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicOccurrenceInterpretation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::StratigraphicOccurrenceInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicOccurrenceInterpretationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)new std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicOccurrenceInterpretationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = 0 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)new std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >((std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StratigraphicOccurrenceInterpretationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)new_std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::StratigraphicOccurrenceInterpretation *)std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicOccurrenceInterpretation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::StratigraphicOccurrenceInterpretation **) &std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicOccurrenceInterpretation **arg3 = 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg3;
  arg3 = (resqml2_0::StratigraphicOccurrenceInterpretation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::StratigraphicOccurrenceInterpretation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::StratigraphicOccurrenceInterpretation **arg3 = 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg3;
  arg3 = (resqml2_0::StratigraphicOccurrenceInterpretation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::StratigraphicOccurrenceInterpretation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::StratigraphicOccurrenceInterpretation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *temp1 = 0 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *result = 0 ;
  
  temp1 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg1;
  arg1 = (resqml2_0::StratigraphicOccurrenceInterpretation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Repeat((resqml2_0::StratigraphicOccurrenceInterpretation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicOccurrenceInterpretation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Contains(arg1,(resqml2_0::StratigraphicOccurrenceInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicOccurrenceInterpretation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__IndexOf(arg1,(resqml2_0::StratigraphicOccurrenceInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicOccurrenceInterpretation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::StratigraphicOccurrenceInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StratigraphicOccurrenceInterpretationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation **arg2 = 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg2;
  arg2 = (resqml2_0::StratigraphicOccurrenceInterpretation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_StratigraphicOccurrenceInterpretation_Sm__Sg__Remove(arg1,(resqml2_0::StratigraphicOccurrenceInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StratigraphicOccurrenceInterpretationVector(void * jarg1) {
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  resqml2_0::HorizonInterpretation **arg2 = 0 ;
  resqml2_0::HorizonInterpretation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::HorizonInterpretation *)jarg2;
  arg2 = (resqml2_0::HorizonInterpretation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::HorizonInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HorizonInterpretationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  std::vector< resqml2_0::HorizonInterpretation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::HorizonInterpretation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HorizonInterpretationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  std::vector< resqml2_0::HorizonInterpretation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::HorizonInterpretation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  std::vector< resqml2_0::HorizonInterpretation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::HorizonInterpretation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HorizonInterpretationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::HorizonInterpretation * > *)new std::vector< resqml2_0::HorizonInterpretation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HorizonInterpretationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = 0 ;
  std::vector< resqml2_0::HorizonInterpretation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::HorizonInterpretation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::HorizonInterpretation * > *)new std::vector< resqml2_0::HorizonInterpretation * >((std::vector< resqml2_0::HorizonInterpretation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HorizonInterpretationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::HorizonInterpretation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::HorizonInterpretation * > *)new_std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HorizonInterpretationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::HorizonInterpretation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::HorizonInterpretation *)std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HorizonInterpretationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::HorizonInterpretation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::HorizonInterpretation **) &std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::HorizonInterpretation **arg3 = 0 ;
  resqml2_0::HorizonInterpretation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::HorizonInterpretation *)jarg3;
  arg3 = (resqml2_0::HorizonInterpretation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::HorizonInterpretation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::HorizonInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::HorizonInterpretation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HorizonInterpretationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::HorizonInterpretation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::HorizonInterpretation * > *)std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  resqml2_0::HorizonInterpretation **arg3 = 0 ;
  resqml2_0::HorizonInterpretation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::HorizonInterpretation *)jarg3;
  arg3 = (resqml2_0::HorizonInterpretation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::HorizonInterpretation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::HorizonInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::HorizonInterpretation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HorizonInterpretationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::HorizonInterpretation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::HorizonInterpretation *temp1 = 0 ;
  std::vector< resqml2_0::HorizonInterpretation * > *result = 0 ;
  
  temp1 = (resqml2_0::HorizonInterpretation *)jarg1;
  arg1 = (resqml2_0::HorizonInterpretation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::HorizonInterpretation * > *)std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Repeat((resqml2_0::HorizonInterpretation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HorizonInterpretationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::HorizonInterpretation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::HorizonInterpretation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HorizonInterpretationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  resqml2_0::HorizonInterpretation **arg2 = 0 ;
  resqml2_0::HorizonInterpretation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::HorizonInterpretation *)jarg2;
  arg2 = (resqml2_0::HorizonInterpretation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Contains(arg1,(resqml2_0::HorizonInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HorizonInterpretationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  resqml2_0::HorizonInterpretation **arg2 = 0 ;
  resqml2_0::HorizonInterpretation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::HorizonInterpretation *)jarg2;
  arg2 = (resqml2_0::HorizonInterpretation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__IndexOf(arg1,(resqml2_0::HorizonInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HorizonInterpretationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  resqml2_0::HorizonInterpretation **arg2 = 0 ;
  resqml2_0::HorizonInterpretation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::HorizonInterpretation *)jarg2;
  arg2 = (resqml2_0::HorizonInterpretation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::HorizonInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HorizonInterpretationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  resqml2_0::HorizonInterpretation **arg2 = 0 ;
  resqml2_0::HorizonInterpretation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  temp2 = (resqml2_0::HorizonInterpretation *)jarg2;
  arg2 = (resqml2_0::HorizonInterpretation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_HorizonInterpretation_Sm__Sg__Remove(arg1,(resqml2_0::HorizonInterpretation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HorizonInterpretationVector(void * jarg1) {
  std::vector< resqml2_0::HorizonInterpretation * > *arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::HorizonInterpretation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  resqml2_0::Grid2dSetRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dSetRepresentation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dSetRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dSetRepresentation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::Grid2dSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Grid2dSetRepresentation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Grid2dSetRepresentation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Grid2dSetRepresentation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Grid2dSetRepresentationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)new std::vector< resqml2_0::Grid2dSetRepresentation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Grid2dSetRepresentationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = 0 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Grid2dSetRepresentation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)new std::vector< resqml2_0::Grid2dSetRepresentation * >((std::vector< resqml2_0::Grid2dSetRepresentation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Grid2dSetRepresentationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)new_std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::Grid2dSetRepresentation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Grid2dSetRepresentation *)std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::Grid2dSetRepresentation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Grid2dSetRepresentation **) &std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::Grid2dSetRepresentation **arg3 = 0 ;
  resqml2_0::Grid2dSetRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Grid2dSetRepresentation *)jarg3;
  arg3 = (resqml2_0::Grid2dSetRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::Grid2dSetRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Grid2dSetRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::Grid2dSetRepresentation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::Grid2dSetRepresentation **arg3 = 0 ;
  resqml2_0::Grid2dSetRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Grid2dSetRepresentation *)jarg3;
  arg3 = (resqml2_0::Grid2dSetRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::Grid2dSetRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Grid2dSetRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::Grid2dSetRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::Grid2dSetRepresentation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::Grid2dSetRepresentation *temp1 = 0 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *result = 0 ;
  
  temp1 = (resqml2_0::Grid2dSetRepresentation *)jarg1;
  arg1 = (resqml2_0::Grid2dSetRepresentation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Repeat((resqml2_0::Grid2dSetRepresentation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Grid2dSetRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::Grid2dSetRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  resqml2_0::Grid2dSetRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dSetRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dSetRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dSetRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Contains(arg1,(resqml2_0::Grid2dSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  resqml2_0::Grid2dSetRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dSetRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dSetRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dSetRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__IndexOf(arg1,(resqml2_0::Grid2dSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  resqml2_0::Grid2dSetRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dSetRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dSetRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dSetRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::Grid2dSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Grid2dSetRepresentationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  resqml2_0::Grid2dSetRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dSetRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dSetRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dSetRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Grid2dSetRepresentation_Sm__Sg__Remove(arg1,(resqml2_0::Grid2dSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Grid2dSetRepresentationVector(void * jarg1) {
  std::vector< resqml2_0::Grid2dSetRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dSetRepresentation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  resqml2_0::Grid2dRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dRepresentation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dRepresentation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::Grid2dRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Grid2dRepresentationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  std::vector< resqml2_0::Grid2dRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Grid2dRepresentation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Grid2dRepresentationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  std::vector< resqml2_0::Grid2dRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::Grid2dRepresentation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  std::vector< resqml2_0::Grid2dRepresentation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Grid2dRepresentation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Grid2dRepresentationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::Grid2dRepresentation * > *)new std::vector< resqml2_0::Grid2dRepresentation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Grid2dRepresentationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = 0 ;
  std::vector< resqml2_0::Grid2dRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Grid2dRepresentation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::Grid2dRepresentation * > *)new std::vector< resqml2_0::Grid2dRepresentation * >((std::vector< resqml2_0::Grid2dRepresentation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Grid2dRepresentationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::Grid2dRepresentation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Grid2dRepresentation * > *)new_std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grid2dRepresentationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::Grid2dRepresentation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Grid2dRepresentation *)std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grid2dRepresentationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::Grid2dRepresentation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::Grid2dRepresentation **) &std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::Grid2dRepresentation **arg3 = 0 ;
  resqml2_0::Grid2dRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Grid2dRepresentation *)jarg3;
  arg3 = (resqml2_0::Grid2dRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::Grid2dRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Grid2dRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::Grid2dRepresentation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grid2dRepresentationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::Grid2dRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Grid2dRepresentation * > *)std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::Grid2dRepresentation **arg3 = 0 ;
  resqml2_0::Grid2dRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::Grid2dRepresentation *)jarg3;
  arg3 = (resqml2_0::Grid2dRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::Grid2dRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Grid2dRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::Grid2dRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grid2dRepresentationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::Grid2dRepresentation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::Grid2dRepresentation *temp1 = 0 ;
  std::vector< resqml2_0::Grid2dRepresentation * > *result = 0 ;
  
  temp1 = (resqml2_0::Grid2dRepresentation *)jarg1;
  arg1 = (resqml2_0::Grid2dRepresentation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::Grid2dRepresentation * > *)std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Repeat((resqml2_0::Grid2dRepresentation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Grid2dRepresentationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::Grid2dRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::Grid2dRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Grid2dRepresentationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  resqml2_0::Grid2dRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Contains(arg1,(resqml2_0::Grid2dRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Grid2dRepresentationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  resqml2_0::Grid2dRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__IndexOf(arg1,(resqml2_0::Grid2dRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Grid2dRepresentationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  resqml2_0::Grid2dRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::Grid2dRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Grid2dRepresentationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  resqml2_0::Grid2dRepresentation **arg2 = 0 ;
  resqml2_0::Grid2dRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::Grid2dRepresentation *)jarg2;
  arg2 = (resqml2_0::Grid2dRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_Grid2dRepresentation_Sm__Sg__Remove(arg1,(resqml2_0::Grid2dRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Grid2dRepresentationVector(void * jarg1) {
  std::vector< resqml2_0::Grid2dRepresentation * > *arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::Grid2dRepresentation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  resqml2_0::PolylineRepresentation **arg2 = 0 ;
  resqml2_0::PolylineRepresentation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineRepresentation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::PolylineRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PolylineRepresentationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  std::vector< resqml2_0::PolylineRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::PolylineRepresentation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PolylineRepresentationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  std::vector< resqml2_0::PolylineRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::PolylineRepresentation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  std::vector< resqml2_0::PolylineRepresentation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::PolylineRepresentation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolylineRepresentationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::PolylineRepresentation * > *)new std::vector< resqml2_0::PolylineRepresentation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolylineRepresentationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = 0 ;
  std::vector< resqml2_0::PolylineRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::PolylineRepresentation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::PolylineRepresentation * > *)new std::vector< resqml2_0::PolylineRepresentation * >((std::vector< resqml2_0::PolylineRepresentation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolylineRepresentationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::PolylineRepresentation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::PolylineRepresentation * > *)new_std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolylineRepresentationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::PolylineRepresentation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::PolylineRepresentation *)std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolylineRepresentationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::PolylineRepresentation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::PolylineRepresentation **) &std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::PolylineRepresentation **arg3 = 0 ;
  resqml2_0::PolylineRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::PolylineRepresentation *)jarg3;
  arg3 = (resqml2_0::PolylineRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::PolylineRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::PolylineRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::PolylineRepresentation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolylineRepresentationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::PolylineRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::PolylineRepresentation * > *)std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::PolylineRepresentation **arg3 = 0 ;
  resqml2_0::PolylineRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::PolylineRepresentation *)jarg3;
  arg3 = (resqml2_0::PolylineRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::PolylineRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::PolylineRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::PolylineRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolylineRepresentationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::PolylineRepresentation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::PolylineRepresentation *temp1 = 0 ;
  std::vector< resqml2_0::PolylineRepresentation * > *result = 0 ;
  
  temp1 = (resqml2_0::PolylineRepresentation *)jarg1;
  arg1 = (resqml2_0::PolylineRepresentation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::PolylineRepresentation * > *)std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Repeat((resqml2_0::PolylineRepresentation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineRepresentationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::PolylineRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::PolylineRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolylineRepresentationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  resqml2_0::PolylineRepresentation **arg2 = 0 ;
  resqml2_0::PolylineRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Contains(arg1,(resqml2_0::PolylineRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PolylineRepresentationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  resqml2_0::PolylineRepresentation **arg2 = 0 ;
  resqml2_0::PolylineRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__IndexOf(arg1,(resqml2_0::PolylineRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PolylineRepresentationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  resqml2_0::PolylineRepresentation **arg2 = 0 ;
  resqml2_0::PolylineRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::PolylineRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolylineRepresentationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  resqml2_0::PolylineRepresentation **arg2 = 0 ;
  resqml2_0::PolylineRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_PolylineRepresentation_Sm__Sg__Remove(arg1,(resqml2_0::PolylineRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolylineRepresentationVector(void * jarg1) {
  std::vector< resqml2_0::PolylineRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineRepresentation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  resqml2_0::PolylineSetRepresentation **arg2 = 0 ;
  resqml2_0::PolylineSetRepresentation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineSetRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineSetRepresentation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::PolylineSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PolylineSetRepresentationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::PolylineSetRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::PolylineSetRepresentation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PolylineSetRepresentationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::PolylineSetRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::PolylineSetRepresentation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::PolylineSetRepresentation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::PolylineSetRepresentation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolylineSetRepresentationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::PolylineSetRepresentation * > *)new std::vector< resqml2_0::PolylineSetRepresentation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolylineSetRepresentationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = 0 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::PolylineSetRepresentation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::PolylineSetRepresentation * > *)new std::vector< resqml2_0::PolylineSetRepresentation * >((std::vector< resqml2_0::PolylineSetRepresentation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolylineSetRepresentationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::PolylineSetRepresentation * > *)new_std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolylineSetRepresentationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::PolylineSetRepresentation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::PolylineSetRepresentation *)std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolylineSetRepresentationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::PolylineSetRepresentation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::PolylineSetRepresentation **) &std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::PolylineSetRepresentation **arg3 = 0 ;
  resqml2_0::PolylineSetRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::PolylineSetRepresentation *)jarg3;
  arg3 = (resqml2_0::PolylineSetRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::PolylineSetRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::PolylineSetRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::PolylineSetRepresentation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolylineSetRepresentationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::PolylineSetRepresentation * > *)std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::PolylineSetRepresentation **arg3 = 0 ;
  resqml2_0::PolylineSetRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::PolylineSetRepresentation *)jarg3;
  arg3 = (resqml2_0::PolylineSetRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::PolylineSetRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::PolylineSetRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::PolylineSetRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolylineSetRepresentationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::PolylineSetRepresentation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::PolylineSetRepresentation *temp1 = 0 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *result = 0 ;
  
  temp1 = (resqml2_0::PolylineSetRepresentation *)jarg1;
  arg1 = (resqml2_0::PolylineSetRepresentation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::PolylineSetRepresentation * > *)std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Repeat((resqml2_0::PolylineSetRepresentation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolylineSetRepresentationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::PolylineSetRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::PolylineSetRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolylineSetRepresentationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  resqml2_0::PolylineSetRepresentation **arg2 = 0 ;
  resqml2_0::PolylineSetRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineSetRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineSetRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Contains(arg1,(resqml2_0::PolylineSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PolylineSetRepresentationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  resqml2_0::PolylineSetRepresentation **arg2 = 0 ;
  resqml2_0::PolylineSetRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineSetRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineSetRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__IndexOf(arg1,(resqml2_0::PolylineSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PolylineSetRepresentationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  resqml2_0::PolylineSetRepresentation **arg2 = 0 ;
  resqml2_0::PolylineSetRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineSetRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineSetRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::PolylineSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolylineSetRepresentationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  resqml2_0::PolylineSetRepresentation **arg2 = 0 ;
  resqml2_0::PolylineSetRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::PolylineSetRepresentation *)jarg2;
  arg2 = (resqml2_0::PolylineSetRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_PolylineSetRepresentation_Sm__Sg__Remove(arg1,(resqml2_0::PolylineSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolylineSetRepresentationVector(void * jarg1) {
  std::vector< resqml2_0::PolylineSetRepresentation * > *arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::PolylineSetRepresentation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  resqml2_0::TriangulatedSetRepresentation **arg2 = 0 ;
  resqml2_0::TriangulatedSetRepresentation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::TriangulatedSetRepresentation *)jarg2;
  arg2 = (resqml2_0::TriangulatedSetRepresentation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::TriangulatedSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::TriangulatedSetRepresentation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::TriangulatedSetRepresentation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::TriangulatedSetRepresentation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriangulatedSetRepresentationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)new std::vector< resqml2_0::TriangulatedSetRepresentation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriangulatedSetRepresentationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::TriangulatedSetRepresentation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)new std::vector< resqml2_0::TriangulatedSetRepresentation * >((std::vector< resqml2_0::TriangulatedSetRepresentation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TriangulatedSetRepresentationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)new_std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::TriangulatedSetRepresentation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::TriangulatedSetRepresentation *)std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::TriangulatedSetRepresentation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::TriangulatedSetRepresentation **) &std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::TriangulatedSetRepresentation **arg3 = 0 ;
  resqml2_0::TriangulatedSetRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::TriangulatedSetRepresentation *)jarg3;
  arg3 = (resqml2_0::TriangulatedSetRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::TriangulatedSetRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::TriangulatedSetRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::TriangulatedSetRepresentation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::TriangulatedSetRepresentation **arg3 = 0 ;
  resqml2_0::TriangulatedSetRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::TriangulatedSetRepresentation *)jarg3;
  arg3 = (resqml2_0::TriangulatedSetRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::TriangulatedSetRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::TriangulatedSetRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::TriangulatedSetRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::TriangulatedSetRepresentation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::TriangulatedSetRepresentation *temp1 = 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *result = 0 ;
  
  temp1 = (resqml2_0::TriangulatedSetRepresentation *)jarg1;
  arg1 = (resqml2_0::TriangulatedSetRepresentation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Repeat((resqml2_0::TriangulatedSetRepresentation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::TriangulatedSetRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::TriangulatedSetRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  resqml2_0::TriangulatedSetRepresentation **arg2 = 0 ;
  resqml2_0::TriangulatedSetRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::TriangulatedSetRepresentation *)jarg2;
  arg2 = (resqml2_0::TriangulatedSetRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Contains(arg1,(resqml2_0::TriangulatedSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  resqml2_0::TriangulatedSetRepresentation **arg2 = 0 ;
  resqml2_0::TriangulatedSetRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::TriangulatedSetRepresentation *)jarg2;
  arg2 = (resqml2_0::TriangulatedSetRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__IndexOf(arg1,(resqml2_0::TriangulatedSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  resqml2_0::TriangulatedSetRepresentation **arg2 = 0 ;
  resqml2_0::TriangulatedSetRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::TriangulatedSetRepresentation *)jarg2;
  arg2 = (resqml2_0::TriangulatedSetRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::TriangulatedSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TriangulatedSetRepresentationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  resqml2_0::TriangulatedSetRepresentation **arg2 = 0 ;
  resqml2_0::TriangulatedSetRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::TriangulatedSetRepresentation *)jarg2;
  arg2 = (resqml2_0::TriangulatedSetRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_TriangulatedSetRepresentation_Sm__Sg__Remove(arg1,(resqml2_0::TriangulatedSetRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TriangulatedSetRepresentationVector(void * jarg1) {
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_Clear(void * jarg1) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  resqml2_0::SeismicLineFeature **arg2 = 0 ;
  resqml2_0::SeismicLineFeature *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  temp2 = (resqml2_0::SeismicLineFeature *)jarg2;
  arg2 = (resqml2_0::SeismicLineFeature **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::SeismicLineFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SeismicLineFeatureVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  std::vector< resqml2_0::SeismicLineFeature * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::SeismicLineFeature * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SeismicLineFeatureVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  std::vector< resqml2_0::SeismicLineFeature * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::SeismicLineFeature * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  std::vector< resqml2_0::SeismicLineFeature * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::SeismicLineFeature * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SeismicLineFeatureVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::SeismicLineFeature * > *)new std::vector< resqml2_0::SeismicLineFeature * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SeismicLineFeatureVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = 0 ;
  std::vector< resqml2_0::SeismicLineFeature * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::SeismicLineFeature * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::SeismicLineFeature * > *)new std::vector< resqml2_0::SeismicLineFeature * >((std::vector< resqml2_0::SeismicLineFeature * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SeismicLineFeatureVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::SeismicLineFeature * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::SeismicLineFeature * > *)new_std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SeismicLineFeatureVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  resqml2_0::SeismicLineFeature *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::SeismicLineFeature *)std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SeismicLineFeatureVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  resqml2_0::SeismicLineFeature **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::SeismicLineFeature **) &std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  resqml2_0::SeismicLineFeature **arg3 = 0 ;
  resqml2_0::SeismicLineFeature *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::SeismicLineFeature *)jarg3;
  arg3 = (resqml2_0::SeismicLineFeature **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__setitem(arg1,arg2,(resqml2_0::SeismicLineFeature *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::SeismicLineFeature * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::SeismicLineFeature * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SeismicLineFeatureVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::SeismicLineFeature * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::SeismicLineFeature * > *)std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  resqml2_0::SeismicLineFeature **arg3 = 0 ;
  resqml2_0::SeismicLineFeature *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::SeismicLineFeature *)jarg3;
  arg3 = (resqml2_0::SeismicLineFeature **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Insert(arg1,arg2,(resqml2_0::SeismicLineFeature *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::SeismicLineFeature * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::SeismicLineFeature * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SeismicLineFeatureVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::SeismicLineFeature **arg1 = 0 ;
  int arg2 ;
  resqml2_0::SeismicLineFeature *temp1 = 0 ;
  std::vector< resqml2_0::SeismicLineFeature * > *result = 0 ;
  
  temp1 = (resqml2_0::SeismicLineFeature *)jarg1;
  arg1 = (resqml2_0::SeismicLineFeature **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::SeismicLineFeature * > *)std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Repeat((resqml2_0::SeismicLineFeature *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeismicLineFeatureVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::SeismicLineFeature * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::SeismicLineFeature * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SeismicLineFeatureVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  resqml2_0::SeismicLineFeature **arg2 = 0 ;
  resqml2_0::SeismicLineFeature *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  temp2 = (resqml2_0::SeismicLineFeature *)jarg2;
  arg2 = (resqml2_0::SeismicLineFeature **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Contains(arg1,(resqml2_0::SeismicLineFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeismicLineFeatureVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  resqml2_0::SeismicLineFeature **arg2 = 0 ;
  resqml2_0::SeismicLineFeature *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  temp2 = (resqml2_0::SeismicLineFeature *)jarg2;
  arg2 = (resqml2_0::SeismicLineFeature **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__IndexOf(arg1,(resqml2_0::SeismicLineFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeismicLineFeatureVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  resqml2_0::SeismicLineFeature **arg2 = 0 ;
  resqml2_0::SeismicLineFeature *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  temp2 = (resqml2_0::SeismicLineFeature *)jarg2;
  arg2 = (resqml2_0::SeismicLineFeature **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__LastIndexOf(arg1,(resqml2_0::SeismicLineFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SeismicLineFeatureVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  resqml2_0::SeismicLineFeature **arg2 = 0 ;
  resqml2_0::SeismicLineFeature *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  temp2 = (resqml2_0::SeismicLineFeature *)jarg2;
  arg2 = (resqml2_0::SeismicLineFeature **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_SeismicLineFeature_Sm__Sg__Remove(arg1,(resqml2_0::SeismicLineFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SeismicLineFeatureVector(void * jarg1) {
  std::vector< resqml2_0::SeismicLineFeature * > *arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::SeismicLineFeature * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_Clear(void * jarg1) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  resqml2_0::WellboreFeature **arg2 = 0 ;
  resqml2_0::WellboreFeature *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  temp2 = (resqml2_0::WellboreFeature *)jarg2;
  arg2 = (resqml2_0::WellboreFeature **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::WellboreFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreFeatureVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  std::vector< resqml2_0::WellboreFeature * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::WellboreFeature * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreFeatureVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  std::vector< resqml2_0::WellboreFeature * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::WellboreFeature * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  std::vector< resqml2_0::WellboreFeature * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::WellboreFeature * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreFeatureVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::WellboreFeature * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::WellboreFeature * > *)new std::vector< resqml2_0::WellboreFeature * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreFeatureVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = 0 ;
  std::vector< resqml2_0::WellboreFeature * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreFeature * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::WellboreFeature * > *)new std::vector< resqml2_0::WellboreFeature * >((std::vector< resqml2_0::WellboreFeature * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreFeatureVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::WellboreFeature * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreFeature * > *)new_std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreFeatureVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreFeature *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::WellboreFeature *)std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreFeatureVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreFeature **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::WellboreFeature **) &std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreFeature **arg3 = 0 ;
  resqml2_0::WellboreFeature *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::WellboreFeature *)jarg3;
  arg3 = (resqml2_0::WellboreFeature **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__setitem(arg1,arg2,(resqml2_0::WellboreFeature *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  std::vector< resqml2_0::WellboreFeature * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::WellboreFeature * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreFeature * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::WellboreFeature * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreFeatureVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::WellboreFeature * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreFeature * > *)std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreFeature **arg3 = 0 ;
  resqml2_0::WellboreFeature *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::WellboreFeature *)jarg3;
  arg3 = (resqml2_0::WellboreFeature **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Insert(arg1,arg2,(resqml2_0::WellboreFeature *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::WellboreFeature * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::WellboreFeature * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreFeature * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::WellboreFeature * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreFeatureVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::WellboreFeature **arg1 = 0 ;
  int arg2 ;
  resqml2_0::WellboreFeature *temp1 = 0 ;
  std::vector< resqml2_0::WellboreFeature * > *result = 0 ;
  
  temp1 = (resqml2_0::WellboreFeature *)jarg1;
  arg1 = (resqml2_0::WellboreFeature **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreFeature * > *)std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Repeat((resqml2_0::WellboreFeature *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreFeatureVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::WellboreFeature * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::WellboreFeature * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreFeature * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::WellboreFeature * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreFeatureVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  resqml2_0::WellboreFeature **arg2 = 0 ;
  resqml2_0::WellboreFeature *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  temp2 = (resqml2_0::WellboreFeature *)jarg2;
  arg2 = (resqml2_0::WellboreFeature **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Contains(arg1,(resqml2_0::WellboreFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreFeatureVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  resqml2_0::WellboreFeature **arg2 = 0 ;
  resqml2_0::WellboreFeature *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  temp2 = (resqml2_0::WellboreFeature *)jarg2;
  arg2 = (resqml2_0::WellboreFeature **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__IndexOf(arg1,(resqml2_0::WellboreFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreFeatureVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  resqml2_0::WellboreFeature **arg2 = 0 ;
  resqml2_0::WellboreFeature *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  temp2 = (resqml2_0::WellboreFeature *)jarg2;
  arg2 = (resqml2_0::WellboreFeature **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__LastIndexOf(arg1,(resqml2_0::WellboreFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreFeatureVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  resqml2_0::WellboreFeature **arg2 = 0 ;
  resqml2_0::WellboreFeature *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  temp2 = (resqml2_0::WellboreFeature *)jarg2;
  arg2 = (resqml2_0::WellboreFeature **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_WellboreFeature_Sm__Sg__Remove(arg1,(resqml2_0::WellboreFeature *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WellboreFeatureVector(void * jarg1) {
  std::vector< resqml2_0::WellboreFeature * > *arg1 = (std::vector< resqml2_0::WellboreFeature * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreFeature * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  resqml2_0::WellboreTrajectoryRepresentation **arg2 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreTrajectoryRepresentation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::WellboreTrajectoryRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreTrajectoryRepresentationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)new std::vector< resqml2_0::WellboreTrajectoryRepresentation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreTrajectoryRepresentationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = 0 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)new std::vector< resqml2_0::WellboreTrajectoryRepresentation * >((std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreTrajectoryRepresentationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)new_std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreTrajectoryRepresentation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::WellboreTrajectoryRepresentation *)std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreTrajectoryRepresentation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::WellboreTrajectoryRepresentation **) &std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreTrajectoryRepresentation **arg3 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg3;
  arg3 = (resqml2_0::WellboreTrajectoryRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::WellboreTrajectoryRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreTrajectoryRepresentation **arg3 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg3;
  arg3 = (resqml2_0::WellboreTrajectoryRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::WellboreTrajectoryRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::WellboreTrajectoryRepresentation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::WellboreTrajectoryRepresentation *temp1 = 0 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *result = 0 ;
  
  temp1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1;
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Repeat((resqml2_0::WellboreTrajectoryRepresentation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::WellboreTrajectoryRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  resqml2_0::WellboreTrajectoryRepresentation **arg2 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreTrajectoryRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Contains(arg1,(resqml2_0::WellboreTrajectoryRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  resqml2_0::WellboreTrajectoryRepresentation **arg2 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreTrajectoryRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__IndexOf(arg1,(resqml2_0::WellboreTrajectoryRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  resqml2_0::WellboreTrajectoryRepresentation **arg2 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreTrajectoryRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::WellboreTrajectoryRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreTrajectoryRepresentationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  resqml2_0::WellboreTrajectoryRepresentation **arg2 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreTrajectoryRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_WellboreTrajectoryRepresentation_Sm__Sg__Remove(arg1,(resqml2_0::WellboreTrajectoryRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WellboreTrajectoryRepresentationVector(void * jarg1) {
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreTrajectoryRepresentation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation **arg2 = 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreMarkerFrameRepresentation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::WellboreMarkerFrameRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreMarkerFrameRepresentationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)new std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreMarkerFrameRepresentationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = 0 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)new std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >((std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreMarkerFrameRepresentationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)new_std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreMarkerFrameRepresentation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::WellboreMarkerFrameRepresentation *)std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreMarkerFrameRepresentation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::WellboreMarkerFrameRepresentation **) &std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreMarkerFrameRepresentation **arg3 = 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg3;
  arg3 = (resqml2_0::WellboreMarkerFrameRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::WellboreMarkerFrameRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreMarkerFrameRepresentation **arg3 = 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg3;
  arg3 = (resqml2_0::WellboreMarkerFrameRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::WellboreMarkerFrameRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::WellboreMarkerFrameRepresentation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::WellboreMarkerFrameRepresentation *temp1 = 0 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *result = 0 ;
  
  temp1 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg1;
  arg1 = (resqml2_0::WellboreMarkerFrameRepresentation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Repeat((resqml2_0::WellboreMarkerFrameRepresentation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation **arg2 = 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreMarkerFrameRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Contains(arg1,(resqml2_0::WellboreMarkerFrameRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation **arg2 = 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreMarkerFrameRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__IndexOf(arg1,(resqml2_0::WellboreMarkerFrameRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation **arg2 = 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreMarkerFrameRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::WellboreMarkerFrameRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreMarkerFrameRepresentationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation **arg2 = 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg2;
  arg2 = (resqml2_0::WellboreMarkerFrameRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_WellboreMarkerFrameRepresentation_Sm__Sg__Remove(arg1,(resqml2_0::WellboreMarkerFrameRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WellboreMarkerFrameRepresentationVector(void * jarg1) {
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_Clear(void * jarg1) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  resqml2_0::HdfProxy **arg2 = 0 ;
  resqml2_0::HdfProxy *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  temp2 = (resqml2_0::HdfProxy *)jarg2;
  arg2 = (resqml2_0::HdfProxy **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::HdfProxy *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HdfProxyVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  std::vector< resqml2_0::HdfProxy * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::HdfProxy * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HdfProxyVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  std::vector< resqml2_0::HdfProxy * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::HdfProxy * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  std::vector< resqml2_0::HdfProxy * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::HdfProxy * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HdfProxyVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::HdfProxy * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::HdfProxy * > *)new std::vector< resqml2_0::HdfProxy * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HdfProxyVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = 0 ;
  std::vector< resqml2_0::HdfProxy * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::HdfProxy * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::HdfProxy * > *)new std::vector< resqml2_0::HdfProxy * >((std::vector< resqml2_0::HdfProxy * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HdfProxyVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::HdfProxy * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::HdfProxy * > *)new_std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HdfProxyVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  resqml2_0::HdfProxy *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::HdfProxy *)std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HdfProxyVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  resqml2_0::HdfProxy **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::HdfProxy **) &std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  resqml2_0::HdfProxy **arg3 = 0 ;
  resqml2_0::HdfProxy *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::HdfProxy *)jarg3;
  arg3 = (resqml2_0::HdfProxy **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__setitem(arg1,arg2,(resqml2_0::HdfProxy *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  std::vector< resqml2_0::HdfProxy * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::HdfProxy * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::HdfProxy * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::HdfProxy * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HdfProxyVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::HdfProxy * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::HdfProxy * > *)std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  resqml2_0::HdfProxy **arg3 = 0 ;
  resqml2_0::HdfProxy *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::HdfProxy *)jarg3;
  arg3 = (resqml2_0::HdfProxy **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Insert(arg1,arg2,(resqml2_0::HdfProxy *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::HdfProxy * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::HdfProxy * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::HdfProxy * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::HdfProxy * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HdfProxyVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::HdfProxy **arg1 = 0 ;
  int arg2 ;
  resqml2_0::HdfProxy *temp1 = 0 ;
  std::vector< resqml2_0::HdfProxy * > *result = 0 ;
  
  temp1 = (resqml2_0::HdfProxy *)jarg1;
  arg1 = (resqml2_0::HdfProxy **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::HdfProxy * > *)std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Repeat((resqml2_0::HdfProxy *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HdfProxyVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::HdfProxy * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::HdfProxy * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::HdfProxy * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::HdfProxy * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HdfProxyVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  resqml2_0::HdfProxy **arg2 = 0 ;
  resqml2_0::HdfProxy *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  temp2 = (resqml2_0::HdfProxy *)jarg2;
  arg2 = (resqml2_0::HdfProxy **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Contains(arg1,(resqml2_0::HdfProxy *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HdfProxyVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  resqml2_0::HdfProxy **arg2 = 0 ;
  resqml2_0::HdfProxy *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  temp2 = (resqml2_0::HdfProxy *)jarg2;
  arg2 = (resqml2_0::HdfProxy **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__IndexOf(arg1,(resqml2_0::HdfProxy *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HdfProxyVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  resqml2_0::HdfProxy **arg2 = 0 ;
  resqml2_0::HdfProxy *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  temp2 = (resqml2_0::HdfProxy *)jarg2;
  arg2 = (resqml2_0::HdfProxy **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__LastIndexOf(arg1,(resqml2_0::HdfProxy *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HdfProxyVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  resqml2_0::HdfProxy **arg2 = 0 ;
  resqml2_0::HdfProxy *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  temp2 = (resqml2_0::HdfProxy *)jarg2;
  arg2 = (resqml2_0::HdfProxy **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_HdfProxy_Sm__Sg__Remove(arg1,(resqml2_0::HdfProxy *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HdfProxyVector(void * jarg1) {
  std::vector< resqml2_0::HdfProxy * > *arg1 = (std::vector< resqml2_0::HdfProxy * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::HdfProxy * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  resqml2_0::IjkGridRepresentation **arg2 = 0 ;
  resqml2_0::IjkGridRepresentation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::IjkGridRepresentation *)jarg2;
  arg2 = (resqml2_0::IjkGridRepresentation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::IjkGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IjkGridRepresentationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  std::vector< resqml2_0::IjkGridRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::IjkGridRepresentation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IjkGridRepresentationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  std::vector< resqml2_0::IjkGridRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::IjkGridRepresentation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  std::vector< resqml2_0::IjkGridRepresentation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::IjkGridRepresentation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IjkGridRepresentationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::IjkGridRepresentation * > *)new std::vector< resqml2_0::IjkGridRepresentation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IjkGridRepresentationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = 0 ;
  std::vector< resqml2_0::IjkGridRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::IjkGridRepresentation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::IjkGridRepresentation * > *)new std::vector< resqml2_0::IjkGridRepresentation * >((std::vector< resqml2_0::IjkGridRepresentation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IjkGridRepresentationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::IjkGridRepresentation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::IjkGridRepresentation * > *)new_std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IjkGridRepresentationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::IjkGridRepresentation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::IjkGridRepresentation *)std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IjkGridRepresentationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::IjkGridRepresentation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::IjkGridRepresentation **) &std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::IjkGridRepresentation **arg3 = 0 ;
  resqml2_0::IjkGridRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::IjkGridRepresentation *)jarg3;
  arg3 = (resqml2_0::IjkGridRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::IjkGridRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::IjkGridRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::IjkGridRepresentation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IjkGridRepresentationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::IjkGridRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::IjkGridRepresentation * > *)std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::IjkGridRepresentation **arg3 = 0 ;
  resqml2_0::IjkGridRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::IjkGridRepresentation *)jarg3;
  arg3 = (resqml2_0::IjkGridRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::IjkGridRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::IjkGridRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::IjkGridRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IjkGridRepresentationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::IjkGridRepresentation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::IjkGridRepresentation *temp1 = 0 ;
  std::vector< resqml2_0::IjkGridRepresentation * > *result = 0 ;
  
  temp1 = (resqml2_0::IjkGridRepresentation *)jarg1;
  arg1 = (resqml2_0::IjkGridRepresentation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::IjkGridRepresentation * > *)std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Repeat((resqml2_0::IjkGridRepresentation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IjkGridRepresentationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::IjkGridRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::IjkGridRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IjkGridRepresentationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  resqml2_0::IjkGridRepresentation **arg2 = 0 ;
  resqml2_0::IjkGridRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::IjkGridRepresentation *)jarg2;
  arg2 = (resqml2_0::IjkGridRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Contains(arg1,(resqml2_0::IjkGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IjkGridRepresentationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  resqml2_0::IjkGridRepresentation **arg2 = 0 ;
  resqml2_0::IjkGridRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::IjkGridRepresentation *)jarg2;
  arg2 = (resqml2_0::IjkGridRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__IndexOf(arg1,(resqml2_0::IjkGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IjkGridRepresentationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  resqml2_0::IjkGridRepresentation **arg2 = 0 ;
  resqml2_0::IjkGridRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::IjkGridRepresentation *)jarg2;
  arg2 = (resqml2_0::IjkGridRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::IjkGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IjkGridRepresentationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  resqml2_0::IjkGridRepresentation **arg2 = 0 ;
  resqml2_0::IjkGridRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::IjkGridRepresentation *)jarg2;
  arg2 = (resqml2_0::IjkGridRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_IjkGridRepresentation_Sm__Sg__Remove(arg1,(resqml2_0::IjkGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IjkGridRepresentationVector(void * jarg1) {
  std::vector< resqml2_0::IjkGridRepresentation * > *arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::IjkGridRepresentation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_Clear(void * jarg1) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  resqml2_0::UnstructuredGridRepresentation **arg2 = 0 ;
  resqml2_0::UnstructuredGridRepresentation *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::UnstructuredGridRepresentation *)jarg2;
  arg2 = (resqml2_0::UnstructuredGridRepresentation **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::UnstructuredGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::UnstructuredGridRepresentation * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::UnstructuredGridRepresentation * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::UnstructuredGridRepresentation * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnstructuredGridRepresentationVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)new std::vector< resqml2_0::UnstructuredGridRepresentation * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnstructuredGridRepresentationVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = 0 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::UnstructuredGridRepresentation * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)new std::vector< resqml2_0::UnstructuredGridRepresentation * >((std::vector< resqml2_0::UnstructuredGridRepresentation * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnstructuredGridRepresentationVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)new_std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::UnstructuredGridRepresentation *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::UnstructuredGridRepresentation *)std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::UnstructuredGridRepresentation **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::UnstructuredGridRepresentation **) &std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::UnstructuredGridRepresentation **arg3 = 0 ;
  resqml2_0::UnstructuredGridRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::UnstructuredGridRepresentation *)jarg3;
  arg3 = (resqml2_0::UnstructuredGridRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__setitem(arg1,arg2,(resqml2_0::UnstructuredGridRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::UnstructuredGridRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::UnstructuredGridRepresentation * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  resqml2_0::UnstructuredGridRepresentation **arg3 = 0 ;
  resqml2_0::UnstructuredGridRepresentation *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::UnstructuredGridRepresentation *)jarg3;
  arg3 = (resqml2_0::UnstructuredGridRepresentation **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Insert(arg1,arg2,(resqml2_0::UnstructuredGridRepresentation *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::UnstructuredGridRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::UnstructuredGridRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::UnstructuredGridRepresentation **arg1 = 0 ;
  int arg2 ;
  resqml2_0::UnstructuredGridRepresentation *temp1 = 0 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *result = 0 ;
  
  temp1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1;
  arg1 = (resqml2_0::UnstructuredGridRepresentation **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Repeat((resqml2_0::UnstructuredGridRepresentation *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::UnstructuredGridRepresentation * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::UnstructuredGridRepresentation * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  resqml2_0::UnstructuredGridRepresentation **arg2 = 0 ;
  resqml2_0::UnstructuredGridRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::UnstructuredGridRepresentation *)jarg2;
  arg2 = (resqml2_0::UnstructuredGridRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Contains(arg1,(resqml2_0::UnstructuredGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  resqml2_0::UnstructuredGridRepresentation **arg2 = 0 ;
  resqml2_0::UnstructuredGridRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::UnstructuredGridRepresentation *)jarg2;
  arg2 = (resqml2_0::UnstructuredGridRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__IndexOf(arg1,(resqml2_0::UnstructuredGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  resqml2_0::UnstructuredGridRepresentation **arg2 = 0 ;
  resqml2_0::UnstructuredGridRepresentation *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::UnstructuredGridRepresentation *)jarg2;
  arg2 = (resqml2_0::UnstructuredGridRepresentation **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__LastIndexOf(arg1,(resqml2_0::UnstructuredGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnstructuredGridRepresentationVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  resqml2_0::UnstructuredGridRepresentation **arg2 = 0 ;
  resqml2_0::UnstructuredGridRepresentation *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  temp2 = (resqml2_0::UnstructuredGridRepresentation *)jarg2;
  arg2 = (resqml2_0::UnstructuredGridRepresentation **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_UnstructuredGridRepresentation_Sm__Sg__Remove(arg1,(resqml2_0::UnstructuredGridRepresentation *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnstructuredGridRepresentationVector(void * jarg1) {
  std::vector< resqml2_0::UnstructuredGridRepresentation * > *arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::UnstructuredGridRepresentation * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->push_back((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StringVector_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_Clear(void * jarg1) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_Add(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  resqml2_0::WellboreMarker **arg2 = 0 ;
  resqml2_0::WellboreMarker *temp2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarker *)jarg2;
  arg2 = (resqml2_0::WellboreMarker **)&temp2; 
  {
    try {
      (arg1)->push_back((resqml2_0::WellboreMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreMarkerVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  std::vector< resqml2_0::WellboreMarker * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::WellboreMarker * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreMarkerVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  std::vector< resqml2_0::WellboreMarker * >::size_type result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  {
    try {
      result = ((std::vector< resqml2_0::WellboreMarker * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  std::vector< resqml2_0::WellboreMarker * >::size_type arg2 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::WellboreMarker * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreMarkerVector__SWIG_0() {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarker * > *result = 0 ;
  
  {
    try {
      result = (std::vector< resqml2_0::WellboreMarker * > *)new std::vector< resqml2_0::WellboreMarker * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreMarkerVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = 0 ;
  std::vector< resqml2_0::WellboreMarker * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreMarker * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< resqml2_0::WellboreMarker * > *)new std::vector< resqml2_0::WellboreMarker * >((std::vector< resqml2_0::WellboreMarker * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreMarkerVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< resqml2_0::WellboreMarker * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreMarker * > *)new_std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreMarkerVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreMarker *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::WellboreMarker *)std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreMarkerVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreMarker **result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (resqml2_0::WellboreMarker **) &std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreMarker **arg3 = 0 ;
  resqml2_0::WellboreMarker *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::WellboreMarker *)jarg3;
  arg3 = (resqml2_0::WellboreMarker **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__setitem(arg1,arg2,(resqml2_0::WellboreMarker *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  std::vector< resqml2_0::WellboreMarker * > *arg2 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (std::vector< resqml2_0::WellboreMarker * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreMarker * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__AddRange(arg1,(std::vector< resqml2_0::WellboreMarker * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreMarkerVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< resqml2_0::WellboreMarker * > *result = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreMarker * > *)std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  resqml2_0::WellboreMarker **arg3 = 0 ;
  resqml2_0::WellboreMarker *temp3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (resqml2_0::WellboreMarker *)jarg3;
  arg3 = (resqml2_0::WellboreMarker **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Insert(arg1,arg2,(resqml2_0::WellboreMarker *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::WellboreMarker * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::WellboreMarker * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreMarker * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__InsertRange(arg1,arg2,(std::vector< resqml2_0::WellboreMarker * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreMarkerVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  resqml2_0::WellboreMarker **arg1 = 0 ;
  int arg2 ;
  resqml2_0::WellboreMarker *temp1 = 0 ;
  std::vector< resqml2_0::WellboreMarker * > *result = 0 ;
  
  temp1 = (resqml2_0::WellboreMarker *)jarg1;
  arg1 = (resqml2_0::WellboreMarker **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< resqml2_0::WellboreMarker * > *)std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Repeat((resqml2_0::WellboreMarker *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  {
    try {
      std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreMarkerVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  int arg2 ;
  std::vector< resqml2_0::WellboreMarker * > *arg3 = 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< resqml2_0::WellboreMarker * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< resqml2_0::WellboreMarker * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__SetRange(arg1,arg2,(std::vector< resqml2_0::WellboreMarker * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreMarkerVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  resqml2_0::WellboreMarker **arg2 = 0 ;
  resqml2_0::WellboreMarker *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarker *)jarg2;
  arg2 = (resqml2_0::WellboreMarker **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Contains(arg1,(resqml2_0::WellboreMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreMarkerVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  resqml2_0::WellboreMarker **arg2 = 0 ;
  resqml2_0::WellboreMarker *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarker *)jarg2;
  arg2 = (resqml2_0::WellboreMarker **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__IndexOf(arg1,(resqml2_0::WellboreMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreMarkerVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  resqml2_0::WellboreMarker **arg2 = 0 ;
  resqml2_0::WellboreMarker *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarker *)jarg2;
  arg2 = (resqml2_0::WellboreMarker **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__LastIndexOf(arg1,(resqml2_0::WellboreMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreMarkerVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  resqml2_0::WellboreMarker **arg2 = 0 ;
  resqml2_0::WellboreMarker *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  temp2 = (resqml2_0::WellboreMarker *)jarg2;
  arg2 = (resqml2_0::WellboreMarker **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_resqml2_0_WellboreMarker_Sm__Sg__Remove(arg1,(resqml2_0::WellboreMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WellboreMarkerVector(void * jarg1) {
  std::vector< resqml2_0::WellboreMarker * > *arg1 = (std::vector< resqml2_0::WellboreMarker * > *) 0 ;
  
  arg1 = (std::vector< resqml2_0::WellboreMarker * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getEpcDocument(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  common::EpcDocument *result = 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = (common::EpcDocument *)((resqml2_0::AbstractObject const *)arg1)->getEpcDocument();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getTitle(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getTitle();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getEditor(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getEditor();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getCreation(void * jarg1) {
  long long jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  time_t result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = (time_t)((resqml2_0::AbstractObject const *)arg1)->getCreation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getOriginator(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getOriginator();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getDescription(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getDescription();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getLastUpdate(void * jarg1) {
  long long jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  time_t result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = (time_t)((resqml2_0::AbstractObject const *)arg1)->getLastUpdate();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getFormat(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getFormat();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getDescriptiveKeywords(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getDescriptiveKeywords();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setUuid(void * jarg1, char * jarg2) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setUuid((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setMetadata(void * jarg1, char * jarg2, char * jarg3, char * jarg4, long long jarg5, char * jarg6, char * jarg7, long long jarg8, char * jarg9, char * jarg10) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  time_t *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  time_t *arg8 = 0 ;
  std::string *arg9 = 0 ;
  std::string *arg10 = 0 ;
  time_t temp5 ;
  time_t temp8 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (time_t)jarg5; 
  arg5 = &temp5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  temp8 = (time_t)jarg8; 
  arg8 = &temp8; 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  if (!jarg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg10_str(jarg10);
  arg10 = &arg10_str; 
  {
    try {
      (arg1)->setMetadata((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(time_t const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(time_t const &)*arg8,(std::string const &)*arg9,(std::string const &)*arg10);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setTitle(void * jarg1, char * jarg2) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setTitle((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setEditor(void * jarg1, char * jarg2) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setEditor((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setCreation(void * jarg1, long long jarg2) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  time_t *arg2 = 0 ;
  time_t temp2 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  temp2 = (time_t)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->setCreation((time_t const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setOriginator(void * jarg1, char * jarg2) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setOriginator((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setDescription(void * jarg1, char * jarg2) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setDescription((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setLastUpdate(void * jarg1, long long jarg2) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  time_t *arg2 = 0 ;
  time_t temp2 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  temp2 = (time_t)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->setLastUpdate((time_t const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setFormat(void * jarg1, char * jarg2) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setFormat((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_setDescriptiveKeywords(void * jarg1, char * jarg2) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setDescriptiveKeywords((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getXmlTag(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getXmlTag();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractObject_addOrSetAlias(void * jarg1, char * jarg2, char * jarg3) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->addOrSetAlias((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getAliasTitle(void * jarg1, char * jarg2) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->getAliasTitle((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getAliasCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractObject const *)arg1)->getAliasCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getAliasAuthorityAtIndex(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getAliasAuthorityAtIndex((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractObject_getAliasTitleAtIndex(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((resqml2_0::AbstractObject const *)arg1)->getAliasTitleAtIndex((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractObject(void * jarg1) {
  resqml2_0::AbstractObject *arg1 = (resqml2_0::AbstractObject *) 0 ;
  
  arg1 = (resqml2_0::AbstractObject *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractResqmlDataObject_addOrSetExtraMetadata(void * jarg1, char * jarg2, char * jarg3) {
  resqml2_0::AbstractResqmlDataObject *arg1 = (resqml2_0::AbstractResqmlDataObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (resqml2_0::AbstractResqmlDataObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->addOrSetExtraMetadata((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractResqmlDataObject_getExtraMetadata(void * jarg1, char * jarg2) {
  char * jresult ;
  resqml2_0::AbstractResqmlDataObject *arg1 = (resqml2_0::AbstractResqmlDataObject *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractResqmlDataObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->getExtraMetadata((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractResqmlDataObject_getExtraMetadataCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractResqmlDataObject *arg1 = (resqml2_0::AbstractResqmlDataObject *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractResqmlDataObject *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractResqmlDataObject const *)arg1)->getExtraMetadataCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractResqmlDataObject_getExtraMetadataKeyAtIndex(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  resqml2_0::AbstractResqmlDataObject *arg1 = (resqml2_0::AbstractResqmlDataObject *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractResqmlDataObject *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((resqml2_0::AbstractResqmlDataObject const *)arg1)->getExtraMetadataKeyAtIndex((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractResqmlDataObject_getExtraMetadataStringValueAtIndex(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  resqml2_0::AbstractResqmlDataObject *arg1 = (resqml2_0::AbstractResqmlDataObject *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractResqmlDataObject *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((resqml2_0::AbstractResqmlDataObject const *)arg1)->getExtraMetadataStringValueAtIndex((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractResqmlDataObject(void * jarg1) {
  resqml2_0::AbstractResqmlDataObject *arg1 = (resqml2_0::AbstractResqmlDataObject *) 0 ;
  
  arg1 = (resqml2_0::AbstractResqmlDataObject *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_EpcExternalPartReference(void * jarg1) {
  resqml2_0::EpcExternalPartReference *arg1 = (resqml2_0::EpcExternalPartReference *) 0 ;
  
  arg1 = (resqml2_0::EpcExternalPartReference *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_HdfProxy_isOpened(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::HdfProxy *arg1 = (resqml2_0::HdfProxy *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::HdfProxy *)jarg1; 
  {
    try {
      result = (bool)(arg1)->isOpened();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_HdfProxy_close(void * jarg1) {
  resqml2_0::HdfProxy *arg1 = (resqml2_0::HdfProxy *) 0 ;
  
  arg1 = (resqml2_0::HdfProxy *)jarg1; 
  {
    try {
      (arg1)->close();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_HdfProxy_setCompressionLevel(void * jarg1, unsigned int jarg2) {
  resqml2_0::HdfProxy *arg1 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::HdfProxy *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->setCompressionLevel((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_HdfProxy(void * jarg1) {
  resqml2_0::HdfProxy *arg1 = (resqml2_0::HdfProxy *) 0 ;
  
  arg1 = (resqml2_0::HdfProxy *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getOriginOrdinal1(void * jarg1) {
  double jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  double result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::AbstractLocal3dCrs const *)arg1)->getOriginOrdinal1();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getOriginOrdinal2(void * jarg1) {
  double jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  double result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::AbstractLocal3dCrs const *)arg1)->getOriginOrdinal2();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getOriginDepthOrElevation(void * jarg1) {
  double jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  double result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::AbstractLocal3dCrs const *)arg1)->getOriginDepthOrElevation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getArealRotation(void * jarg1) {
  double jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  double result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::AbstractLocal3dCrs const *)arg1)->getArealRotation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_isDepthOriented(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::AbstractLocal3dCrs const *)arg1)->isDepthOriented();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getProjectedCrsEpsgCode(void * jarg1) {
  unsigned long long jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  unsigned long long result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (unsigned long long)((resqml2_0::AbstractLocal3dCrs const *)arg1)->getProjectedCrsEpsgCode();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getVerticalCrsEpsgCode(void * jarg1) {
  unsigned long long jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  unsigned long long result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (unsigned long long)((resqml2_0::AbstractLocal3dCrs const *)arg1)->getVerticalCrsEpsgCode();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getProjectedCrsUnit(void * jarg1) {
  int jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  gsoap_resqml2_0::eml__LengthUom result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::eml__LengthUom)((resqml2_0::AbstractLocal3dCrs const *)arg1)->getProjectedCrsUnit();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getProjectedCrsUnitAsString(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractLocal3dCrs const *)arg1)->getProjectedCrsUnitAsString();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getVerticalCrsUnit(void * jarg1) {
  int jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  gsoap_resqml2_0::eml__LengthUom result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::eml__LengthUom)((resqml2_0::AbstractLocal3dCrs const *)arg1)->getVerticalCrsUnit();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getVerticalCrsUnitAsString(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractLocal3dCrs const *)arg1)->getVerticalCrsUnitAsString();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_getAxisOrder(void * jarg1) {
  int jresult ;
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  gsoap_resqml2_0::eml__AxisOrder2d result;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::eml__AxisOrder2d)((resqml2_0::AbstractLocal3dCrs const *)arg1)->getAxisOrder();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractLocal3dCrs(void * jarg1) {
  resqml2_0::AbstractLocal3dCrs *arg1 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  
  arg1 = (resqml2_0::AbstractLocal3dCrs *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_LocalDepth3dCrs(void * jarg1) {
  resqml2_0::LocalDepth3dCrs *arg1 = (resqml2_0::LocalDepth3dCrs *) 0 ;
  
  arg1 = (resqml2_0::LocalDepth3dCrs *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_LocalTime3dCrs_getUnit(void * jarg1) {
  int jresult ;
  resqml2_0::LocalTime3dCrs *arg1 = (resqml2_0::LocalTime3dCrs *) 0 ;
  gsoap_resqml2_0::eml__TimeUom result;
  
  arg1 = (resqml2_0::LocalTime3dCrs *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::eml__TimeUom)((resqml2_0::LocalTime3dCrs const *)arg1)->getUnit();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_LocalTime3dCrs_getUnitAsString(void * jarg1) {
  char * jresult ;
  resqml2_0::LocalTime3dCrs *arg1 = (resqml2_0::LocalTime3dCrs *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::LocalTime3dCrs *)jarg1; 
  {
    try {
      result = ((resqml2_0::LocalTime3dCrs const *)arg1)->getUnitAsString();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_LocalTime3dCrs(void * jarg1) {
  resqml2_0::LocalTime3dCrs *arg1 = (resqml2_0::LocalTime3dCrs *) 0 ;
  
  arg1 = (resqml2_0::LocalTime3dCrs *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_MdDatum_getLocalCrsUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::MdDatum *arg1 = (resqml2_0::MdDatum *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::MdDatum *)jarg1; 
  {
    try {
      result = ((resqml2_0::MdDatum const *)arg1)->getLocalCrsUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_MdDatum_getLocalCrs(void * jarg1) {
  void * jresult ;
  resqml2_0::MdDatum *arg1 = (resqml2_0::MdDatum *) 0 ;
  resqml2_0::AbstractLocal3dCrs *result = 0 ;
  
  arg1 = (resqml2_0::MdDatum *)jarg1; 
  {
    try {
      result = (resqml2_0::AbstractLocal3dCrs *)(arg1)->getLocalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_MdDatum_getLocationOrdinal1(void * jarg1) {
  double jresult ;
  resqml2_0::MdDatum *arg1 = (resqml2_0::MdDatum *) 0 ;
  double *result = 0 ;
  
  arg1 = (resqml2_0::MdDatum *)jarg1; 
  {
    try {
      result = (double *) &((resqml2_0::MdDatum const *)arg1)->getLocationOrdinal1();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_MdDatum_getLocationOrdinal2(void * jarg1) {
  double jresult ;
  resqml2_0::MdDatum *arg1 = (resqml2_0::MdDatum *) 0 ;
  double *result = 0 ;
  
  arg1 = (resqml2_0::MdDatum *)jarg1; 
  {
    try {
      result = (double *) &((resqml2_0::MdDatum const *)arg1)->getLocationOrdinal2();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_MdDatum_getLocationOrdinal3(void * jarg1) {
  double jresult ;
  resqml2_0::MdDatum *arg1 = (resqml2_0::MdDatum *) 0 ;
  double *result = 0 ;
  
  arg1 = (resqml2_0::MdDatum *)jarg1; 
  {
    try {
      result = (double *) &((resqml2_0::MdDatum const *)arg1)->getLocationOrdinal3();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_MdDatum_getOriginKind(void * jarg1) {
  int jresult ;
  resqml2_0::MdDatum *arg1 = (resqml2_0::MdDatum *) 0 ;
  gsoap_resqml2_0::resqml2__MdReference *result = 0 ;
  
  arg1 = (resqml2_0::MdDatum *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__MdReference *) &((resqml2_0::MdDatum const *)arg1)->getOriginKind();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_MdDatum(void * jarg1) {
  resqml2_0::MdDatum *arg1 = (resqml2_0::MdDatum *) 0 ;
  
  arg1 = (resqml2_0::MdDatum *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractFeature_getInterpretationCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractFeature *arg1 = (resqml2_0::AbstractFeature *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractFeature *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractFeature const *)arg1)->getInterpretationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractFeature_getInterpretation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::AbstractFeature *arg1 = (resqml2_0::AbstractFeature *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::AbstractFeatureInterpretation *result = 0 ;
  
  arg1 = (resqml2_0::AbstractFeature *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::AbstractFeatureInterpretation *)((resqml2_0::AbstractFeature const *)arg1)->getInterpretation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractFeature(void * jarg1) {
  resqml2_0::AbstractFeature *arg1 = (resqml2_0::AbstractFeature *) 0 ;
  
  arg1 = (resqml2_0::AbstractFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractGeologicFeature(void * jarg1) {
  resqml2_0::AbstractGeologicFeature *arg1 = (resqml2_0::AbstractGeologicFeature *) 0 ;
  
  arg1 = (resqml2_0::AbstractGeologicFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_BoundaryFeature(void * jarg1) {
  resqml2_0::BoundaryFeature *arg1 = (resqml2_0::BoundaryFeature *) 0 ;
  
  arg1 = (resqml2_0::BoundaryFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_GeologicUnitFeature(void * jarg1) {
  resqml2_0::GeologicUnitFeature *arg1 = (resqml2_0::GeologicUnitFeature *) 0 ;
  
  arg1 = (resqml2_0::GeologicUnitFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_GeneticBoundaryFeature(void * jarg1) {
  resqml2_0::GeneticBoundaryFeature *arg1 = (resqml2_0::GeneticBoundaryFeature *) 0 ;
  
  arg1 = (resqml2_0::GeneticBoundaryFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_Horizon(void * jarg1) {
  resqml2_0::Horizon *arg1 = (resqml2_0::Horizon *) 0 ;
  
  arg1 = (resqml2_0::Horizon *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_TectonicBoundaryFeature_isAFracture(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::TectonicBoundaryFeature *arg1 = (resqml2_0::TectonicBoundaryFeature *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::TectonicBoundaryFeature *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::TectonicBoundaryFeature const *)arg1)->isAFracture();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_TectonicBoundaryFeature(void * jarg1) {
  resqml2_0::TectonicBoundaryFeature *arg1 = (resqml2_0::TectonicBoundaryFeature *) 0 ;
  
  arg1 = (resqml2_0::TectonicBoundaryFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_Fault(void * jarg1) {
  resqml2_0::Fault *arg1 = (resqml2_0::Fault *) 0 ;
  
  arg1 = (resqml2_0::Fault *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_Fracture(void * jarg1) {
  resqml2_0::Fracture *arg1 = (resqml2_0::Fracture *) 0 ;
  
  arg1 = (resqml2_0::Fracture *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractTechnicalFeature(void * jarg1) {
  resqml2_0::AbstractTechnicalFeature *arg1 = (resqml2_0::AbstractTechnicalFeature *) 0 ;
  
  arg1 = (resqml2_0::AbstractTechnicalFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_SeismicLineSetFeature(void * jarg1) {
  resqml2_0::SeismicLineSetFeature *arg1 = (resqml2_0::SeismicLineSetFeature *) 0 ;
  
  arg1 = (resqml2_0::SeismicLineSetFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_SeismicLineFeature_getTraceIndexIncrement(void * jarg1) {
  int jresult ;
  resqml2_0::SeismicLineFeature *arg1 = (resqml2_0::SeismicLineFeature *) 0 ;
  int result;
  
  arg1 = (resqml2_0::SeismicLineFeature *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::SeismicLineFeature const *)arg1)->getTraceIndexIncrement();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_SeismicLineFeature_getFirstTraceIndex(void * jarg1) {
  int jresult ;
  resqml2_0::SeismicLineFeature *arg1 = (resqml2_0::SeismicLineFeature *) 0 ;
  int result;
  
  arg1 = (resqml2_0::SeismicLineFeature *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::SeismicLineFeature const *)arg1)->getFirstTraceIndex();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_SeismicLineFeature_getTraceCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::SeismicLineFeature *arg1 = (resqml2_0::SeismicLineFeature *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::SeismicLineFeature *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::SeismicLineFeature const *)arg1)->getTraceCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_SeismicLineFeature_getSeismicLineSet(void * jarg1) {
  void * jresult ;
  resqml2_0::SeismicLineFeature *arg1 = (resqml2_0::SeismicLineFeature *) 0 ;
  resqml2_0::SeismicLineSetFeature *result = 0 ;
  
  arg1 = (resqml2_0::SeismicLineFeature *)jarg1; 
  {
    try {
      result = (resqml2_0::SeismicLineSetFeature *)(arg1)->getSeismicLineSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_SeismicLineFeature_setSeismicLineSet(void * jarg1, void * jarg2) {
  resqml2_0::SeismicLineFeature *arg1 = (resqml2_0::SeismicLineFeature *) 0 ;
  resqml2_0::SeismicLineSetFeature *arg2 = (resqml2_0::SeismicLineSetFeature *) 0 ;
  
  arg1 = (resqml2_0::SeismicLineFeature *)jarg1; 
  arg2 = (resqml2_0::SeismicLineSetFeature *)jarg2; 
  {
    try {
      (arg1)->setSeismicLineSet(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_SeismicLineFeature(void * jarg1) {
  resqml2_0::SeismicLineFeature *arg1 = (resqml2_0::SeismicLineFeature *) 0 ;
  
  arg1 = (resqml2_0::SeismicLineFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_SeismicLatticeFeature_getCrosslineIncrement(void * jarg1) {
  int jresult ;
  resqml2_0::SeismicLatticeFeature *arg1 = (resqml2_0::SeismicLatticeFeature *) 0 ;
  int result;
  
  arg1 = (resqml2_0::SeismicLatticeFeature *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::SeismicLatticeFeature const *)arg1)->getCrosslineIncrement();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_SeismicLatticeFeature_getInlineIncrement(void * jarg1) {
  int jresult ;
  resqml2_0::SeismicLatticeFeature *arg1 = (resqml2_0::SeismicLatticeFeature *) 0 ;
  int result;
  
  arg1 = (resqml2_0::SeismicLatticeFeature *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::SeismicLatticeFeature const *)arg1)->getInlineIncrement();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_SeismicLatticeFeature_getOriginCrossline(void * jarg1) {
  int jresult ;
  resqml2_0::SeismicLatticeFeature *arg1 = (resqml2_0::SeismicLatticeFeature *) 0 ;
  int result;
  
  arg1 = (resqml2_0::SeismicLatticeFeature *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::SeismicLatticeFeature const *)arg1)->getOriginCrossline();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_SeismicLatticeFeature_getOriginInline(void * jarg1) {
  int jresult ;
  resqml2_0::SeismicLatticeFeature *arg1 = (resqml2_0::SeismicLatticeFeature *) 0 ;
  int result;
  
  arg1 = (resqml2_0::SeismicLatticeFeature *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::SeismicLatticeFeature const *)arg1)->getOriginInline();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_SeismicLatticeFeature(void * jarg1) {
  resqml2_0::SeismicLatticeFeature *arg1 = (resqml2_0::SeismicLatticeFeature *) 0 ;
  
  arg1 = (resqml2_0::SeismicLatticeFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreFeature_getWitsmlWellbore(void * jarg1) {
  void * jresult ;
  resqml2_0::WellboreFeature *arg1 = (resqml2_0::WellboreFeature *) 0 ;
  witsml1_4_1_1::Wellbore *result = 0 ;
  
  arg1 = (resqml2_0::WellboreFeature *)jarg1; 
  {
    try {
      result = (witsml1_4_1_1::Wellbore *)(arg1)->getWitsmlWellbore();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreFeature_setWitsmlWellbore(void * jarg1, void * jarg2) {
  resqml2_0::WellboreFeature *arg1 = (resqml2_0::WellboreFeature *) 0 ;
  witsml1_4_1_1::Wellbore *arg2 = (witsml1_4_1_1::Wellbore *) 0 ;
  
  arg1 = (resqml2_0::WellboreFeature *)jarg1; 
  arg2 = (witsml1_4_1_1::Wellbore *)jarg2; 
  {
    try {
      (arg1)->setWitsmlWellbore(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_WellboreFeature(void * jarg1) {
  resqml2_0::WellboreFeature *arg1 = (resqml2_0::WellboreFeature *) 0 ;
  
  arg1 = (resqml2_0::WellboreFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_OrganizationFeature(void * jarg1) {
  resqml2_0::OrganizationFeature *arg1 = (resqml2_0::OrganizationFeature *) 0 ;
  
  arg1 = (resqml2_0::OrganizationFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_FrontierFeature(void * jarg1) {
  resqml2_0::FrontierFeature *arg1 = (resqml2_0::FrontierFeature *) 0 ;
  
  arg1 = (resqml2_0::FrontierFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_StratigraphicUnitFeature(void * jarg1) {
  resqml2_0::StratigraphicUnitFeature *arg1 = (resqml2_0::StratigraphicUnitFeature *) 0 ;
  
  arg1 = (resqml2_0::StratigraphicUnitFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_FluidBoundaryFeature(void * jarg1) {
  resqml2_0::FluidBoundaryFeature *arg1 = (resqml2_0::FluidBoundaryFeature *) 0 ;
  
  arg1 = (resqml2_0::FluidBoundaryFeature *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractFeatureInterpretation_getRepresentationCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractFeatureInterpretation *arg1 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractFeatureInterpretation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractFeatureInterpretation const *)arg1)->getRepresentationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractFeatureInterpretation_getInterpretedFeature(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractFeatureInterpretation *arg1 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractFeature *result = 0 ;
  
  arg1 = (resqml2_0::AbstractFeatureInterpretation *)jarg1; 
  {
    try {
      result = (resqml2_0::AbstractFeature *)(arg1)->getInterpretedFeature();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractFeatureInterpretation_getRepresentation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::AbstractFeatureInterpretation *arg1 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::AbstractRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::AbstractFeatureInterpretation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::AbstractRepresentation *)((resqml2_0::AbstractFeatureInterpretation const *)arg1)->getRepresentation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractFeatureInterpretation_getInterpretedFeatureUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractFeatureInterpretation *arg1 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractFeatureInterpretation *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractFeatureInterpretation const *)arg1)->getInterpretedFeatureUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractFeatureInterpretation_getWellboreMarkerFrameRepresentationSet(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractFeatureInterpretation *arg1 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > result;
  
  arg1 = (resqml2_0::AbstractFeatureInterpretation *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractFeatureInterpretation const *)arg1)->getWellboreMarkerFrameRepresentationSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::WellboreMarkerFrameRepresentation * >((const std::vector< resqml2_0::WellboreMarkerFrameRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractFeatureInterpretation(void * jarg1) {
  resqml2_0::AbstractFeatureInterpretation *arg1 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  
  arg1 = (resqml2_0::AbstractFeatureInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_GenericFeatureInterpretation(void * jarg1) {
  resqml2_0::GenericFeatureInterpretation *arg1 = (resqml2_0::GenericFeatureInterpretation *) 0 ;
  
  arg1 = (resqml2_0::GenericFeatureInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_BoundaryFeatureInterpretation(void * jarg1) {
  resqml2_0::BoundaryFeatureInterpretation *arg1 = (resqml2_0::BoundaryFeatureInterpretation *) 0 ;
  
  arg1 = (resqml2_0::BoundaryFeatureInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_FaultInterpretation_pushBackThrowInterpretation(void * jarg1, int jarg2) {
  resqml2_0::FaultInterpretation *arg1 = (resqml2_0::FaultInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ThrowKind *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__ThrowKind temp2 ;
  
  arg1 = (resqml2_0::FaultInterpretation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__ThrowKind)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->pushBackThrowInterpretation((gsoap_resqml2_0::resqml2__ThrowKind const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_FaultInterpretation(void * jarg1) {
  resqml2_0::FaultInterpretation *arg1 = (resqml2_0::FaultInterpretation *) 0 ;
  
  arg1 = (resqml2_0::FaultInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_HorizonInterpretation(void * jarg1) {
  resqml2_0::HorizonInterpretation *arg1 = (resqml2_0::HorizonInterpretation *) 0 ;
  
  arg1 = (resqml2_0::HorizonInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_WellboreInterpretation_isDrilled(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::WellboreInterpretation *arg1 = (resqml2_0::WellboreInterpretation *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::WellboreInterpretation *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::WellboreInterpretation const *)arg1)->isDrilled();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_WellboreInterpretation(void * jarg1) {
  resqml2_0::WellboreInterpretation *arg1 = (resqml2_0::WellboreInterpretation *) 0 ;
  
  arg1 = (resqml2_0::WellboreInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_StratigraphicUnitInterpretation(void * jarg1) {
  resqml2_0::StratigraphicUnitInterpretation *arg1 = (resqml2_0::StratigraphicUnitInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StratigraphicUnitInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractOrganizationInterpretation_pushBackBinaryContact__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  resqml2_0::AbstractOrganizationInterpretation *arg1 = (resqml2_0::AbstractOrganizationInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactRelationship *arg2 = 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg3 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactVerb *arg4 = 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg5 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactRelationship temp2 ;
  gsoap_resqml2_0::resqml2__ContactVerb temp4 ;
  
  arg1 = (resqml2_0::AbstractOrganizationInterpretation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__ContactRelationship)jarg2; 
  arg2 = &temp2; 
  arg3 = (resqml2_0::AbstractFeatureInterpretation *)jarg3; 
  temp4 = (gsoap_resqml2_0::resqml2__ContactVerb)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::AbstractFeatureInterpretation *)jarg5; 
  {
    try {
      (arg1)->pushBackBinaryContact((gsoap_resqml2_0::resqml2__ContactRelationship const &)*arg2,arg3,(gsoap_resqml2_0::resqml2__ContactVerb const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractOrganizationInterpretation_pushBackBinaryContact__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6) {
  resqml2_0::AbstractOrganizationInterpretation *arg1 = (resqml2_0::AbstractOrganizationInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactRelationship *arg2 = 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg3 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactVerb *arg4 = 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg5 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactSide *arg6 = 0 ;
  gsoap_resqml2_0::resqml2__ContactRelationship temp2 ;
  gsoap_resqml2_0::resqml2__ContactVerb temp4 ;
  gsoap_resqml2_0::resqml2__ContactSide temp6 ;
  
  arg1 = (resqml2_0::AbstractOrganizationInterpretation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__ContactRelationship)jarg2; 
  arg2 = &temp2; 
  arg3 = (resqml2_0::AbstractFeatureInterpretation *)jarg3; 
  temp4 = (gsoap_resqml2_0::resqml2__ContactVerb)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::AbstractFeatureInterpretation *)jarg5; 
  temp6 = (gsoap_resqml2_0::resqml2__ContactSide)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->pushBackBinaryContact((gsoap_resqml2_0::resqml2__ContactRelationship const &)*arg2,arg3,(gsoap_resqml2_0::resqml2__ContactVerb const &)*arg4,arg5,(gsoap_resqml2_0::resqml2__ContactSide const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractOrganizationInterpretation(void * jarg1) {
  resqml2_0::AbstractOrganizationInterpretation *arg1 = (resqml2_0::AbstractOrganizationInterpretation *) 0 ;
  
  arg1 = (resqml2_0::AbstractOrganizationInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StructuralOrganizationInterpretation_pushBackFaultInterpretation(void * jarg1, void * jarg2) {
  resqml2_0::StructuralOrganizationInterpretation *arg1 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  resqml2_0::FaultInterpretation *arg2 = (resqml2_0::FaultInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StructuralOrganizationInterpretation *)jarg1; 
  arg2 = (resqml2_0::FaultInterpretation *)jarg2; 
  {
    try {
      (arg1)->pushBackFaultInterpretation(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StructuralOrganizationInterpretation_pushBackHorizonInterpretation(void * jarg1, void * jarg2, int jarg3) {
  resqml2_0::StructuralOrganizationInterpretation *arg1 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  resqml2_0::HorizonInterpretation *arg2 = (resqml2_0::HorizonInterpretation *) 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (resqml2_0::StructuralOrganizationInterpretation *)jarg1; 
  arg2 = (resqml2_0::HorizonInterpretation *)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      (arg1)->pushBackHorizonInterpretation(arg2,(int const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StructuralOrganizationInterpretation_pushBackTopFrontierInterpretation(void * jarg1, void * jarg2) {
  resqml2_0::StructuralOrganizationInterpretation *arg1 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StructuralOrganizationInterpretation *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  {
    try {
      (arg1)->pushBackTopFrontierInterpretation(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StructuralOrganizationInterpretation_pushBackBottomFrontierInterpretation(void * jarg1, void * jarg2) {
  resqml2_0::StructuralOrganizationInterpretation *arg1 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StructuralOrganizationInterpretation *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  {
    try {
      (arg1)->pushBackBottomFrontierInterpretation(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StructuralOrganizationInterpretation_pushBackSideFrontierInterpretation(void * jarg1, void * jarg2) {
  resqml2_0::StructuralOrganizationInterpretation *arg1 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StructuralOrganizationInterpretation *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  {
    try {
      (arg1)->pushBackSideFrontierInterpretation(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_StructuralOrganizationInterpretation_getFaultInterpretationCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::StructuralOrganizationInterpretation *arg1 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::StructuralOrganizationInterpretation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::StructuralOrganizationInterpretation const *)arg1)->getFaultInterpretationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_StructuralOrganizationInterpretation_getFaultInterpretation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::StructuralOrganizationInterpretation *arg1 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::FaultInterpretation *result = 0 ;
  
  arg1 = (resqml2_0::StructuralOrganizationInterpretation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::FaultInterpretation *)(arg1)->getFaultInterpretation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_StructuralOrganizationInterpretation(void * jarg1) {
  resqml2_0::StructuralOrganizationInterpretation *arg1 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StructuralOrganizationInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_pushBackStratiUnitInterpretation(void * jarg1, void * jarg2) {
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  resqml2_0::StratigraphicUnitInterpretation *arg2 = (resqml2_0::StratigraphicUnitInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  arg2 = (resqml2_0::StratigraphicUnitInterpretation *)jarg2; 
  {
    try {
      (arg1)->pushBackStratiUnitInterpretation(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_pushBackStratigraphicBinaryContact__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6) {
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  resqml2_0::StratigraphicUnitInterpretation *arg2 = (resqml2_0::StratigraphicUnitInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactMode *arg3 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *arg4 = (resqml2_0::StratigraphicUnitInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactMode *arg5 = 0 ;
  resqml2_0::HorizonInterpretation *arg6 = (resqml2_0::HorizonInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactMode temp3 ;
  gsoap_resqml2_0::resqml2__ContactMode temp5 ;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  arg2 = (resqml2_0::StratigraphicUnitInterpretation *)jarg2; 
  temp3 = (gsoap_resqml2_0::resqml2__ContactMode)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::StratigraphicUnitInterpretation *)jarg4; 
  temp5 = (gsoap_resqml2_0::resqml2__ContactMode)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HorizonInterpretation *)jarg6; 
  {
    try {
      (arg1)->pushBackStratigraphicBinaryContact(arg2,(gsoap_resqml2_0::resqml2__ContactMode const &)*arg3,arg4,(gsoap_resqml2_0::resqml2__ContactMode const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_pushBackStratigraphicBinaryContact__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  resqml2_0::StratigraphicUnitInterpretation *arg2 = (resqml2_0::StratigraphicUnitInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactMode *arg3 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *arg4 = (resqml2_0::StratigraphicUnitInterpretation *) 0 ;
  gsoap_resqml2_0::resqml2__ContactMode *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__ContactMode temp3 ;
  gsoap_resqml2_0::resqml2__ContactMode temp5 ;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  arg2 = (resqml2_0::StratigraphicUnitInterpretation *)jarg2; 
  temp3 = (gsoap_resqml2_0::resqml2__ContactMode)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::StratigraphicUnitInterpretation *)jarg4; 
  temp5 = (gsoap_resqml2_0::resqml2__ContactMode)jarg5; 
  arg5 = &temp5; 
  {
    try {
      (arg1)->pushBackStratigraphicBinaryContact(arg2,(gsoap_resqml2_0::resqml2__ContactMode const &)*arg3,arg4,(gsoap_resqml2_0::resqml2__ContactMode const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_getContactCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->getContactCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_getSubjectContactModeOfContact(void * jarg1, unsigned int jarg2) {
  int jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  gsoap_resqml2_0::resqml2__ContactMode result;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__ContactMode)((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->getSubjectContactModeOfContact((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_getDirectObjectContactModeOfContact(void * jarg1, unsigned int jarg2) {
  int jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  gsoap_resqml2_0::resqml2__ContactMode result;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__ContactMode)((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->getDirectObjectContactModeOfContact((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_getHorizonInterpretationOfContact(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::HorizonInterpretation *result = 0 ;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::HorizonInterpretation *)((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->getHorizonInterpretationOfContact((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_isAChronoStratiRank(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->isAChronoStratiRank();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_getSubjectOfContact(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::StratigraphicUnitInterpretation *result = 0 ;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::StratigraphicUnitInterpretation *)((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->getSubjectOfContact((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_getDirectObjectOfContact(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::StratigraphicUnitInterpretation *result = 0 ;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::StratigraphicUnitInterpretation *)((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->getDirectObjectOfContact((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_getStratigraphicUnitInterpretationSet(void * jarg1) {
  void * jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  std::vector< resqml2_0::StratigraphicUnitInterpretation * > result;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  {
    try {
      result = ((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->getStratigraphicUnitInterpretationSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::StratigraphicUnitInterpretation * >((const std::vector< resqml2_0::StratigraphicUnitInterpretation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_getHorizonInterpretationSet(void * jarg1) {
  void * jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  std::vector< resqml2_0::HorizonInterpretation * > result;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  {
    try {
      result = ((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->getHorizonInterpretationSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::HorizonInterpretation * >((const std::vector< resqml2_0::HorizonInterpretation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_getStratigraphicOccurrenceInterpretationSet(void * jarg1) {
  void * jresult ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > result;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  {
    try {
      result = ((resqml2_0::StratigraphicColumnRankInterpretation const *)arg1)->getStratigraphicOccurrenceInterpretationSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * >((const std::vector< resqml2_0::StratigraphicOccurrenceInterpretation * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_StratigraphicColumnRankInterpretation(void * jarg1) {
  resqml2_0::StratigraphicColumnRankInterpretation *arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StratigraphicOccurrenceInterpretation_setStratigraphicColumnRankInterpretation(void * jarg1, void * jarg2) {
  resqml2_0::StratigraphicOccurrenceInterpretation *arg1 = (resqml2_0::StratigraphicOccurrenceInterpretation *) 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg2 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg1; 
  arg2 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg2; 
  {
    try {
      (arg1)->setStratigraphicColumnRankInterpretation(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_StratigraphicOccurrenceInterpretation_getStratigraphicColumnRankInterpretation(void * jarg1) {
  void * jresult ;
  resqml2_0::StratigraphicOccurrenceInterpretation *arg1 = (resqml2_0::StratigraphicOccurrenceInterpretation *) 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *result = 0 ;
  
  arg1 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg1; 
  {
    try {
      result = (resqml2_0::StratigraphicColumnRankInterpretation *)((resqml2_0::StratigraphicOccurrenceInterpretation const *)arg1)->getStratigraphicColumnRankInterpretation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_StratigraphicOccurrenceInterpretation_getStratigraphicColumnRankInterpretationUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::StratigraphicOccurrenceInterpretation *arg1 = (resqml2_0::StratigraphicOccurrenceInterpretation *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg1; 
  {
    try {
      result = ((resqml2_0::StratigraphicOccurrenceInterpretation const *)arg1)->getStratigraphicColumnRankInterpretationUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_StratigraphicOccurrenceInterpretation(void * jarg1) {
  resqml2_0::StratigraphicOccurrenceInterpretation *arg1 = (resqml2_0::StratigraphicOccurrenceInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumn_pushBackStratiColumnRank(void * jarg1, void * jarg2) {
  resqml2_0::StratigraphicColumn *arg1 = (resqml2_0::StratigraphicColumn *) 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg2 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  
  arg1 = (resqml2_0::StratigraphicColumn *)jarg1; 
  arg2 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg2; 
  {
    try {
      (arg1)->pushBackStratiColumnRank(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumn_getStratigraphicColumnRankInterpretationSet(void * jarg1) {
  void * jresult ;
  resqml2_0::StratigraphicColumn *arg1 = (resqml2_0::StratigraphicColumn *) 0 ;
  std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > result;
  
  arg1 = (resqml2_0::StratigraphicColumn *)jarg1; 
  {
    try {
      result = ((resqml2_0::StratigraphicColumn const *)arg1)->getStratigraphicColumnRankInterpretationSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::StratigraphicColumnRankInterpretation * >((const std::vector< resqml2_0::StratigraphicColumnRankInterpretation * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_StratigraphicColumn(void * jarg1) {
  resqml2_0::StratigraphicColumn *arg1 = (resqml2_0::StratigraphicColumn *) 0 ;
  
  arg1 = (resqml2_0::StratigraphicColumn *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_EarthModelInterpretation_setStructuralOrganizationInterpretation(void * jarg1, void * jarg2) {
  resqml2_0::EarthModelInterpretation *arg1 = (resqml2_0::EarthModelInterpretation *) 0 ;
  resqml2_0::StructuralOrganizationInterpretation *arg2 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  
  arg1 = (resqml2_0::EarthModelInterpretation *)jarg1; 
  arg2 = (resqml2_0::StructuralOrganizationInterpretation *)jarg2; 
  {
    try {
      (arg1)->setStructuralOrganizationInterpretation(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_EarthModelInterpretation_setStratiColumn(void * jarg1, void * jarg2) {
  resqml2_0::EarthModelInterpretation *arg1 = (resqml2_0::EarthModelInterpretation *) 0 ;
  resqml2_0::StratigraphicColumn *arg2 = (resqml2_0::StratigraphicColumn *) 0 ;
  
  arg1 = (resqml2_0::EarthModelInterpretation *)jarg1; 
  arg2 = (resqml2_0::StratigraphicColumn *)jarg2; 
  {
    try {
      (arg1)->setStratiColumn(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_EarthModelInterpretation(void * jarg1) {
  resqml2_0::EarthModelInterpretation *arg1 = (resqml2_0::EarthModelInterpretation *) 0 ;
  
  arg1 = (resqml2_0::EarthModelInterpretation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getInterpretation(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *result = 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = (resqml2_0::AbstractFeatureInterpretation *)((resqml2_0::AbstractRepresentation const *)arg1)->getInterpretation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getInterpretationUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractRepresentation const *)arg1)->getInterpretationUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getLocalCrs(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *result = 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = (resqml2_0::AbstractLocal3dCrs *)(arg1)->getLocalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getLocalCrsUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractRepresentation const *)arg1)->getLocalCrsUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getHdfProxy(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  resqml2_0::HdfProxy *result = 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = (resqml2_0::HdfProxy *)(arg1)->getHdfProxy();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getHdfProxyUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractRepresentation const *)arg1)->getHdfProxyUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getValuesPropertyCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractRepresentation const *)arg1)->getValuesPropertyCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getValuesProperty(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::AbstractValuesProperty *result = 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::AbstractValuesProperty *)((resqml2_0::AbstractRepresentation const *)arg1)->getValuesProperty((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getSubRepresentationCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractRepresentation const *)arg1)->getSubRepresentationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getSubRepresentation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::SubRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::SubRepresentation *)((resqml2_0::AbstractRepresentation const *)arg1)->getSubRepresentation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getFaultSubRepresentationCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractRepresentation const *)arg1)->getFaultSubRepresentationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getFaultSubRepresentation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::SubRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::SubRepresentation *)((resqml2_0::AbstractRepresentation const *)arg1)->getFaultSubRepresentation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getXyzPointCountOfPatch(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractRepresentation const *)arg1)->getXyzPointCountOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getXyzPointCountOfAllPatches(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractRepresentation const *)arg1)->getXyzPointCountOfAllPatches();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getXyzPointsOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  {
    try {
      ((resqml2_0::AbstractRepresentation const *)arg1)->getXyzPointsOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getXyzPointsOfPatchInGlobalCrs(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  {
    try {
      ((resqml2_0::AbstractRepresentation const *)arg1)->getXyzPointsOfPatchInGlobalCrs((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getXyzPointsOfAllPatches(void * jarg1, void * jarg2) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      ((resqml2_0::AbstractRepresentation const *)arg1)->getXyzPointsOfAllPatches(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getXyzPointsOfAllPatchesInGlobalCrs(void * jarg1, void * jarg2) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      ((resqml2_0::AbstractRepresentation const *)arg1)->getXyzPointsOfAllPatchesInGlobalCrs(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getPatchCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractRepresentation const *)arg1)->getPatchCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getSeismicSupportOfPatch(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::AbstractRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::AbstractRepresentation *)(arg1)->getSeismicSupportOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_getSeismicLineAbscissaOfPointsOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  {
    try {
      (arg1)->getSeismicLineAbscissaOfPointsOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_addSeismic2dCoordinatesToPatch(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int arg2 ;
  double *arg3 = (double *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::AbstractRepresentation *arg5 = (resqml2_0::AbstractRepresentation *) 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::AbstractRepresentation *)jarg5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->addSeismic2dCoordinatesToPatch(arg2,arg3,(unsigned int const &)*arg4,arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_addSeismic3dCoordinatesToPatch__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6, void * jarg7) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::AbstractRepresentation *arg6 = (resqml2_0::AbstractRepresentation *) 0 ;
  resqml2_0::HdfProxy *arg7 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp5 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::AbstractRepresentation *)jarg6; 
  arg7 = (resqml2_0::HdfProxy *)jarg7; 
  {
    try {
      (arg1)->addSeismic3dCoordinatesToPatch(arg2,arg3,arg4,(unsigned int const &)*arg5,arg6,arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_addSeismic3dCoordinatesToPatch__SWIG_1(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, unsigned int jarg5, double jarg6, double jarg7, unsigned int jarg8, void * jarg9) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  unsigned int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  resqml2_0::AbstractRepresentation *arg9 = (resqml2_0::AbstractRepresentation *) 0 ;
  double temp3 ;
  double temp4 ;
  unsigned int temp5 ;
  double temp6 ;
  double temp7 ;
  unsigned int temp8 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  arg9 = (resqml2_0::AbstractRepresentation *)jarg9; 
  {
    try {
      (arg1)->addSeismic3dCoordinatesToPatch(arg2,(double const &)*arg3,(double const &)*arg4,(unsigned int const &)*arg5,(double const &)*arg6,(double const &)*arg7,(unsigned int const &)*arg8,arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_pushBackIntoRepresentationSet(void * jarg1, void * jarg2) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  resqml2_0::RepresentationSetRepresentation *arg2 = (resqml2_0::RepresentationSetRepresentation *) 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  arg2 = (resqml2_0::RepresentationSetRepresentation *)jarg2; 
  {
    try {
      (arg1)->pushBackIntoRepresentationSet(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractRepresentation(void * jarg1) {
  resqml2_0::AbstractRepresentation *arg1 = (resqml2_0::AbstractRepresentation *) 0 ;
  
  arg1 = (resqml2_0::AbstractRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_SubRepresentation_pushBackSubRepresentationPatch__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  resqml2_0::SubRepresentation *arg1 = (resqml2_0::SubRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp2 ;
  unsigned int temp3 ;
  
  arg1 = (resqml2_0::SubRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (unsigned int *)jarg4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->pushBackSubRepresentationPatch((gsoap_resqml2_0::resqml2__IndexableElements const &)*arg2,(unsigned int const &)*arg3,arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_SubRepresentation_pushBackSubRepresentationPatch__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7) {
  resqml2_0::SubRepresentation *arg1 = (resqml2_0::SubRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = (unsigned int *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  resqml2_0::HdfProxy *arg7 = (resqml2_0::HdfProxy *) 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp2 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp3 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::SubRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (unsigned int *)jarg5; 
  arg6 = (unsigned int *)jarg6; 
  arg7 = (resqml2_0::HdfProxy *)jarg7; 
  {
    try {
      (arg1)->pushBackSubRepresentationPatch((gsoap_resqml2_0::resqml2__IndexableElements const &)*arg2,(gsoap_resqml2_0::resqml2__IndexableElements const &)*arg3,(unsigned int const &)*arg4,arg5,arg6,arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_SubRepresentation_isElementPairBased(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::SubRepresentation *arg1 = (resqml2_0::SubRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (resqml2_0::SubRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)((resqml2_0::SubRepresentation const *)arg1)->isElementPairBased((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_SubRepresentation_getElementKindOfPatch(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  resqml2_0::SubRepresentation *arg1 = (resqml2_0::SubRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  gsoap_resqml2_0::resqml2__IndexableElements result;
  
  arg1 = (resqml2_0::SubRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__IndexableElements)((resqml2_0::SubRepresentation const *)arg1)->getElementKindOfPatch((unsigned int const &)*arg2,(unsigned int const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_SubRepresentation_getElementCountOfPatch(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::SubRepresentation *arg1 = (resqml2_0::SubRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::SubRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)((resqml2_0::SubRepresentation const *)arg1)->getElementCountOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_SubRepresentation_getElementIndicesOfPatch(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  resqml2_0::SubRepresentation *arg1 = (resqml2_0::SubRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  
  arg1 = (resqml2_0::SubRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (unsigned int *)jarg4; 
  {
    try {
      ((resqml2_0::SubRepresentation const *)arg1)->getElementIndicesOfPatch((unsigned int const &)*arg2,(unsigned int const &)*arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_SubRepresentation(void * jarg1) {
  resqml2_0::SubRepresentation *arg1 = (resqml2_0::SubRepresentation *) 0 ;
  
  arg1 = (resqml2_0::SubRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_getPolylineCountOfPatch(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)((resqml2_0::PolylineSetRepresentation const *)arg1)->getPolylineCountOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_getPolylineCountOfAllPatches(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::PolylineSetRepresentation const *)arg1)->getPolylineCountOfAllPatches();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_getNodeCountPerPolylineInPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (unsigned int *)jarg3; 
  {
    try {
      ((resqml2_0::PolylineSetRepresentation const *)arg1)->getNodeCountPerPolylineInPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_getNodeCountPerPolylineOfAllPatches(void * jarg1, void * jarg2) {
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::PolylineSetRepresentation const *)arg1)->getNodeCountPerPolylineOfAllPatches(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_pushBackGeometryPatch__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6) {
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int *arg4 = 0 ;
  bool *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp4 ;
  bool temp5 ;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (double *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->pushBackGeometryPatch(arg2,arg3,(unsigned int const &)*arg4,(bool const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_pushBackGeometryPatch__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int *arg4 = 0 ;
  bool *arg5 = (bool *) 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (double *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (bool *)jarg5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->pushBackGeometryPatch(arg2,arg3,(unsigned int const &)*arg4,arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_areAllPolylinesClosedOfPatch(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)((resqml2_0::PolylineSetRepresentation const *)arg1)->areAllPolylinesClosedOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_areAllPolylinesClosedOfAllPatches(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::PolylineSetRepresentation const *)arg1)->areAllPolylinesClosedOfAllPatches();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_areAllPolylinesNonClosedOfPatch(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)((resqml2_0::PolylineSetRepresentation const *)arg1)->areAllPolylinesNonClosedOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_areAllPolylinesNonClosedOfAllPatches(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::PolylineSetRepresentation const *)arg1)->areAllPolylinesNonClosedOfAllPatches();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_getClosedFlagPerPolylineOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  bool *arg3 = (bool *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (bool *)jarg3; 
  {
    try {
      ((resqml2_0::PolylineSetRepresentation const *)arg1)->getClosedFlagPerPolylineOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_getClosedFlagPerPolylineOfAllPatches(void * jarg1, void * jarg2) {
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    try {
      ((resqml2_0::PolylineSetRepresentation const *)arg1)->getClosedFlagPerPolylineOfAllPatches(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_hasALineRole(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::PolylineSetRepresentation const *)arg1)->hasALineRole();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_getLineRole(void * jarg1) {
  int jresult ;
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__LineRole result;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__LineRole)((resqml2_0::PolylineSetRepresentation const *)arg1)->getLineRole();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_PolylineSetRepresentation(void * jarg1) {
  resqml2_0::PolylineSetRepresentation *arg1 = (resqml2_0::PolylineSetRepresentation *) 0 ;
  
  arg1 = (resqml2_0::PolylineSetRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PointSetRepresentation_pushBackGeometryPatch(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  resqml2_0::PointSetRepresentation *arg1 = (resqml2_0::PointSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::PointSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  {
    try {
      (arg1)->pushBackGeometryPatch((unsigned int const &)*arg2,arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_PointSetRepresentation(void * jarg1) {
  resqml2_0::PointSetRepresentation *arg1 = (resqml2_0::PointSetRepresentation *) 0 ;
  
  arg1 = (resqml2_0::PointSetRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PlaneSetRepresentation_pushBackHorizontalPlaneGeometryPatch(void * jarg1, double jarg2) {
  resqml2_0::PlaneSetRepresentation *arg1 = (resqml2_0::PlaneSetRepresentation *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (resqml2_0::PlaneSetRepresentation *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->pushBackHorizontalPlaneGeometryPatch((double const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PlaneSetRepresentation_pushBackTiltedPlaneGeometryPatch(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10) {
  resqml2_0::PlaneSetRepresentation *arg1 = (resqml2_0::PlaneSetRepresentation *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double *arg10 = 0 ;
  double temp2 ;
  double temp3 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  double temp8 ;
  double temp9 ;
  double temp10 ;
  
  arg1 = (resqml2_0::PlaneSetRepresentation *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (double)jarg8; 
  arg8 = &temp8; 
  temp9 = (double)jarg9; 
  arg9 = &temp9; 
  temp10 = (double)jarg10; 
  arg10 = &temp10; 
  {
    try {
      (arg1)->pushBackTiltedPlaneGeometryPatch((double const &)*arg2,(double const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,(double const &)*arg8,(double const &)*arg9,(double const &)*arg10);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_PlaneSetRepresentation(void * jarg1) {
  resqml2_0::PlaneSetRepresentation *arg1 = (resqml2_0::PlaneSetRepresentation *) 0 ;
  
  arg1 = (resqml2_0::PlaneSetRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_PolylineRepresentation_setGeometry(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  resqml2_0::PolylineRepresentation *arg1 = (resqml2_0::PolylineRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  
  arg1 = (resqml2_0::PolylineRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  {
    try {
      (arg1)->setGeometry(arg2,(unsigned int const &)*arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_PolylineRepresentation_isclosed(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::PolylineRepresentation *arg1 = (resqml2_0::PolylineRepresentation *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::PolylineRepresentation *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::PolylineRepresentation const *)arg1)->isclosed();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_PolylineRepresentation_hasALineRole(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::PolylineRepresentation *arg1 = (resqml2_0::PolylineRepresentation *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::PolylineRepresentation *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::PolylineRepresentation const *)arg1)->hasALineRole();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_PolylineRepresentation_getLineRole(void * jarg1) {
  int jresult ;
  resqml2_0::PolylineRepresentation *arg1 = (resqml2_0::PolylineRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__LineRole result;
  
  arg1 = (resqml2_0::PolylineRepresentation *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__LineRole)((resqml2_0::PolylineRepresentation const *)arg1)->getLineRole();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_PolylineRepresentation(void * jarg1) {
  resqml2_0::PolylineRepresentation *arg1 = (resqml2_0::PolylineRepresentation *) 0 ;
  
  arg1 = (resqml2_0::PolylineRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractSurfaceRepresentation_setSurfaceRole(void * jarg1, int jarg2) {
  resqml2_0::AbstractSurfaceRepresentation *arg1 = (resqml2_0::AbstractSurfaceRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__SurfaceRole *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__SurfaceRole temp2 ;
  
  arg1 = (resqml2_0::AbstractSurfaceRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__SurfaceRole)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->setSurfaceRole((gsoap_resqml2_0::resqml2__SurfaceRole const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_AbstractSurfaceRepresentation_getSurfaceRole(void * jarg1) {
  int jresult ;
  resqml2_0::AbstractSurfaceRepresentation *arg1 = (resqml2_0::AbstractSurfaceRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__SurfaceRole *result = 0 ;
  
  arg1 = (resqml2_0::AbstractSurfaceRepresentation *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__SurfaceRole *) &((resqml2_0::AbstractSurfaceRepresentation const *)arg1)->getSurfaceRole();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractSurfaceRepresentation_pushBackOuterRing(void * jarg1, void * jarg2) {
  resqml2_0::AbstractSurfaceRepresentation *arg1 = (resqml2_0::AbstractSurfaceRepresentation *) 0 ;
  resqml2_0::PolylineRepresentation *arg2 = (resqml2_0::PolylineRepresentation *) 0 ;
  
  arg1 = (resqml2_0::AbstractSurfaceRepresentation *)jarg1; 
  arg2 = (resqml2_0::PolylineRepresentation *)jarg2; 
  {
    try {
      (arg1)->pushBackOuterRing(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractSurfaceRepresentation(void * jarg1) {
  resqml2_0::AbstractSurfaceRepresentation *arg1 = (resqml2_0::AbstractSurfaceRepresentation *) 0 ;
  
  arg1 = (resqml2_0::AbstractSurfaceRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getNodeCountAlongIAxis(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::Grid2dRepresentation const *)arg1)->getNodeCountAlongIAxis();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getNodeCountAlongJAxis(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::Grid2dRepresentation const *)arg1)->getNodeCountAlongJAxis();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getXOrigin(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getXOrigin();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getYOrigin(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getYOrigin();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getXOriginInGlobalCrs(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getXOriginInGlobalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getYOriginInGlobalCrs(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getYOriginInGlobalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getXJOffset(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getXJOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getYJOffset(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getYJOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getXJOffsetInGlobalCrs(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getXJOffsetInGlobalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getYJOffsetInGlobalCrs(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getYJOffsetInGlobalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getXIOffset(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getXIOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getYIOffset(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getYIOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getXIOffsetInGlobalCrs(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getXIOffsetInGlobalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getYIOffsetInGlobalCrs(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getYIOffsetInGlobalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getJSpacing(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getJSpacing();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getISpacing(void * jarg1) {
  double jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::Grid2dRepresentation const *)arg1)->getISpacing();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getZValues(void * jarg1, void * jarg2) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      ((resqml2_0::Grid2dRepresentation const *)arg1)->getZValues(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getZValuesInGlobalCrs(void * jarg1, void * jarg2) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      ((resqml2_0::Grid2dRepresentation const *)arg1)->getZValuesInGlobalCrs(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getIndexOriginOnSupportingRepresentation__SWIG_0(void * jarg1) {
  int jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  int result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::Grid2dRepresentation const *)arg1)->getIndexOriginOnSupportingRepresentation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getIndexOriginOnSupportingRepresentation__SWIG_1(void * jarg1, unsigned int jarg2) {
  int jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)((resqml2_0::Grid2dRepresentation const *)arg1)->getIndexOriginOnSupportingRepresentation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getNodeCountOnSupportingRepresentation(void * jarg1, unsigned int jarg2) {
  int jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)((resqml2_0::Grid2dRepresentation const *)arg1)->getNodeCountOnSupportingRepresentation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getIndexOffsetOnSupportingRepresentation(void * jarg1, unsigned int jarg2) {
  int jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)((resqml2_0::Grid2dRepresentation const *)arg1)->getIndexOffsetOnSupportingRepresentation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_setGeometryAsArray2dOfLatticePoints3d(void * jarg1, unsigned int jarg2, unsigned int jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11, double jarg12, double jarg13, double jarg14) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double *arg10 = 0 ;
  double *arg11 = 0 ;
  double *arg12 = 0 ;
  double *arg13 = 0 ;
  double *arg14 = 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  double temp8 ;
  double temp9 ;
  double temp10 ;
  double temp11 ;
  double temp12 ;
  double temp13 ;
  double temp14 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (double)jarg8; 
  arg8 = &temp8; 
  temp9 = (double)jarg9; 
  arg9 = &temp9; 
  temp10 = (double)jarg10; 
  arg10 = &temp10; 
  temp11 = (double)jarg11; 
  arg11 = &temp11; 
  temp12 = (double)jarg12; 
  arg12 = &temp12; 
  temp13 = (double)jarg13; 
  arg13 = &temp13; 
  temp14 = (double)jarg14; 
  arg14 = &temp14; 
  {
    try {
      (arg1)->setGeometryAsArray2dOfLatticePoints3d((unsigned int const &)*arg2,(unsigned int const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,(double const &)*arg8,(double const &)*arg9,(double const &)*arg10,(double const &)*arg11,(double const &)*arg12,(double const &)*arg13,(double const &)*arg14);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_setGeometryAsArray2dOfExplicitZ__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned int jarg7, unsigned int jarg8, int jarg9, int jarg10) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  int *arg9 = 0 ;
  int *arg10 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  int temp9 ;
  int temp10 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  temp9 = (int)jarg9; 
  arg9 = &temp9; 
  temp10 = (int)jarg10; 
  arg10 = &temp10; 
  {
    try {
      (arg1)->setGeometryAsArray2dOfExplicitZ(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8,(int const &)*arg9,(int const &)*arg10);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_setGeometryAsArray2dOfExplicitZ__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned int jarg7, unsigned int jarg8, int jarg9) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  int *arg9 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  int temp9 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  temp9 = (int)jarg9; 
  arg9 = &temp9; 
  {
    try {
      (arg1)->setGeometryAsArray2dOfExplicitZ(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8,(int const &)*arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_setGeometryAsArray2dOfExplicitZ__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned int jarg7, unsigned int jarg8) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  {
    try {
      (arg1)->setGeometryAsArray2dOfExplicitZ(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_setGeometryAsArray2dOfExplicitZ__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp7 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->setGeometryAsArray2dOfExplicitZ(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6,(unsigned int const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_setGeometryAsArray2dOfExplicitZ__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  {
    try {
      (arg1)->setGeometryAsArray2dOfExplicitZ(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_setGeometryAsArray2dOfExplicitZ__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11, double jarg12, double jarg13, double jarg14, double jarg15, double jarg16) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double *arg10 = 0 ;
  double *arg11 = 0 ;
  double *arg12 = 0 ;
  double *arg13 = 0 ;
  double *arg14 = 0 ;
  double *arg15 = 0 ;
  double *arg16 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  double temp6 ;
  double temp7 ;
  double temp8 ;
  double temp9 ;
  double temp10 ;
  double temp11 ;
  double temp12 ;
  double temp13 ;
  double temp14 ;
  double temp15 ;
  double temp16 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (double)jarg8; 
  arg8 = &temp8; 
  temp9 = (double)jarg9; 
  arg9 = &temp9; 
  temp10 = (double)jarg10; 
  arg10 = &temp10; 
  temp11 = (double)jarg11; 
  arg11 = &temp11; 
  temp12 = (double)jarg12; 
  arg12 = &temp12; 
  temp13 = (double)jarg13; 
  arg13 = &temp13; 
  temp14 = (double)jarg14; 
  arg14 = &temp14; 
  temp15 = (double)jarg15; 
  arg15 = &temp15; 
  temp16 = (double)jarg16; 
  arg16 = &temp16; 
  {
    try {
      (arg1)->setGeometryAsArray2dOfExplicitZ(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,(double const &)*arg6,(double const &)*arg7,(double const &)*arg8,(double const &)*arg9,(double const &)*arg10,(double const &)*arg11,(double const &)*arg12,(double const &)*arg13,(double const &)*arg14,(double const &)*arg15,(double const &)*arg16);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getSupportingRepresentation(void * jarg1) {
  void * jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  resqml2_0::Grid2dRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = (resqml2_0::Grid2dRepresentation *)(arg1)->getSupportingRepresentation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_getSupportingRepresentationUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      result = ((resqml2_0::Grid2dRepresentation const *)arg1)->getSupportingRepresentationUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_Grid2dRepresentation(void * jarg1) {
  resqml2_0::Grid2dRepresentation *arg1 = (resqml2_0::Grid2dRepresentation *) 0 ;
  
  arg1 = (resqml2_0::Grid2dRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_getNodeCountAlongIAxis(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)((resqml2_0::Grid2dSetRepresentation const *)arg1)->getNodeCountAlongIAxis((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_getNodeCountAlongJAxis(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)((resqml2_0::Grid2dSetRepresentation const *)arg1)->getNodeCountAlongJAxis((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_getZValuesOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  {
    try {
      ((resqml2_0::Grid2dSetRepresentation const *)arg1)->getZValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_getZValuesOfPatchInGlobalCrs(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  {
    try {
      ((resqml2_0::Grid2dSetRepresentation const *)arg1)->getZValuesOfPatchInGlobalCrs((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_pushBackGeometryPatch__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned int jarg7, unsigned int jarg8, int jarg9, int jarg10) {
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  int *arg9 = 0 ;
  int *arg10 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  int temp9 ;
  int temp10 ;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  temp9 = (int)jarg9; 
  arg9 = &temp9; 
  temp10 = (int)jarg10; 
  arg10 = &temp10; 
  {
    try {
      (arg1)->pushBackGeometryPatch(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8,(int const &)*arg9,(int const &)*arg10);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_pushBackGeometryPatch__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned int jarg7, unsigned int jarg8, int jarg9) {
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  int *arg9 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  int temp9 ;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  temp9 = (int)jarg9; 
  arg9 = &temp9; 
  {
    try {
      (arg1)->pushBackGeometryPatch(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8,(int const &)*arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_pushBackGeometryPatch__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned int jarg7, unsigned int jarg8) {
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  {
    try {
      (arg1)->pushBackGeometryPatch(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_pushBackGeometryPatch__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp7 ;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->pushBackGeometryPatch(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6,(unsigned int const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_pushBackGeometryPatch__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  resqml2_0::Grid2dRepresentation *arg6 = (resqml2_0::Grid2dRepresentation *) 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (resqml2_0::Grid2dRepresentation *)jarg6; 
  {
    try {
      (arg1)->pushBackGeometryPatch(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_getSupportingRepresentationUuid(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((resqml2_0::Grid2dSetRepresentation const *)arg1)->getSupportingRepresentationUuid((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_getSupportingRepresentation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::Grid2dRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::Grid2dRepresentation *)(arg1)->getSupportingRepresentation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_getIndexOriginOnSupportingRepresentation(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  int result;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      result = (int)((resqml2_0::Grid2dSetRepresentation const *)arg1)->getIndexOriginOnSupportingRepresentation((unsigned int const &)*arg2,(unsigned int const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_getNodeCountOnSupportingRepresentation(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  int result;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      result = (int)((resqml2_0::Grid2dSetRepresentation const *)arg1)->getNodeCountOnSupportingRepresentation((unsigned int const &)*arg2,(unsigned int const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_getIndexOffsetOnSupportingRepresentation(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  int result;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      result = (int)((resqml2_0::Grid2dSetRepresentation const *)arg1)->getIndexOffsetOnSupportingRepresentation((unsigned int const &)*arg2,(unsigned int const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_Grid2dSetRepresentation(void * jarg1) {
  resqml2_0::Grid2dSetRepresentation *arg1 = (resqml2_0::Grid2dSetRepresentation *) 0 ;
  
  arg1 = (resqml2_0::Grid2dSetRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_TriangulatedSetRepresentation_getTriangleCountOfPatch(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::TriangulatedSetRepresentation *arg1 = (resqml2_0::TriangulatedSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::TriangulatedSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)((resqml2_0::TriangulatedSetRepresentation const *)arg1)->getTriangleCountOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_TriangulatedSetRepresentation_getTriangleCountOfAllPatches(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::TriangulatedSetRepresentation *arg1 = (resqml2_0::TriangulatedSetRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::TriangulatedSetRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::TriangulatedSetRepresentation const *)arg1)->getTriangleCountOfAllPatches();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_TriangulatedSetRepresentation_getTriangleNodeIndicesOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::TriangulatedSetRepresentation *arg1 = (resqml2_0::TriangulatedSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::TriangulatedSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (unsigned int *)jarg3; 
  {
    try {
      ((resqml2_0::TriangulatedSetRepresentation const *)arg1)->getTriangleNodeIndicesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_TriangulatedSetRepresentation_getTriangleNodeIndicesOfAllPatches(void * jarg1, void * jarg2) {
  resqml2_0::TriangulatedSetRepresentation *arg1 = (resqml2_0::TriangulatedSetRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::TriangulatedSetRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::TriangulatedSetRepresentation const *)arg1)->getTriangleNodeIndicesOfAllPatches(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_TriangulatedSetRepresentation_pushBackTrianglePatch(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  resqml2_0::TriangulatedSetRepresentation *arg1 = (resqml2_0::TriangulatedSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = (unsigned int *) 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp2 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::TriangulatedSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (unsigned int *)jarg5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->pushBackTrianglePatch((unsigned int const &)*arg2,arg3,(unsigned int const &)*arg4,arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_TriangulatedSetRepresentation(void * jarg1) {
  resqml2_0::TriangulatedSetRepresentation *arg1 = (resqml2_0::TriangulatedSetRepresentation *) 0 ;
  
  arg1 = (resqml2_0::TriangulatedSetRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_getWellboreFrameRepresentationCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::WellboreTrajectoryRepresentation const *)arg1)->getWellboreFrameRepresentationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_getWellboreFrameRepresentation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::WellboreFrameRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::WellboreFrameRepresentation *)((resqml2_0::WellboreTrajectoryRepresentation const *)arg1)->getWellboreFrameRepresentation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_getMdDatumUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  {
    try {
      result = ((resqml2_0::WellboreTrajectoryRepresentation const *)arg1)->getMdDatumUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_getMdDatum(void * jarg1) {
  void * jresult ;
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  resqml2_0::MdDatum *result = 0 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  {
    try {
      result = (resqml2_0::MdDatum *)(arg1)->getMdDatum();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_setGeometry__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->setGeometry(arg2,arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_setGeometry__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp5 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->setGeometry(arg2,arg3,arg4,(unsigned int const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_addParentTrajectory(void * jarg1, double jarg2, double jarg3, void * jarg4) {
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *arg4 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  double temp2 ;
  double temp3 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg4; 
  {
    try {
      (arg1)->addParentTrajectory((double const &)*arg2,(double const &)*arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_getTangentVectors(void * jarg1, void * jarg2) {
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      (arg1)->getTangentVectors(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_getMdValues(void * jarg1, void * jarg2) {
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      (arg1)->getMdValues(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_setWitsmlTrajectory(void * jarg1, void * jarg2) {
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  witsml1_4_1_1::Trajectory *arg2 = (witsml1_4_1_1::Trajectory *) 0 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  arg2 = (witsml1_4_1_1::Trajectory *)jarg2; 
  {
    try {
      (arg1)->setWitsmlTrajectory(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_getWitsmlTrajectory(void * jarg1) {
  void * jresult ;
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  witsml1_4_1_1::Trajectory *result = 0 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  {
    try {
      result = (witsml1_4_1_1::Trajectory *)(arg1)->getWitsmlTrajectory();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_WellboreTrajectoryRepresentation(void * jarg1) {
  resqml2_0::WellboreTrajectoryRepresentation *arg1 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  
  arg1 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_setMdValuesAsArray1dOfExplicitValues(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  {
    try {
      (arg1)->setMdValuesAsArray1dOfExplicitValues(arg2,(unsigned int const &)*arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_getMdValuesCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::WellboreFrameRepresentation const *)arg1)->getMdValuesCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_getMdHdfDatatype(void * jarg1) {
  int jresult ;
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  resqml2_0::AbstractValuesProperty::hdfDatatypeEnum result;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  {
    try {
      result = (resqml2_0::AbstractValuesProperty::hdfDatatypeEnum)((resqml2_0::WellboreFrameRepresentation const *)arg1)->getMdHdfDatatype();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_getMdAsDoubleValues(void * jarg1, void * jarg2) {
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      (arg1)->getMdAsDoubleValues(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_getMdAsFloatValues(void * jarg1, void * jarg2) {
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    try {
      (arg1)->getMdAsFloatValues(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_getWellboreTrajectoryUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  {
    try {
      result = ((resqml2_0::WellboreFrameRepresentation const *)arg1)->getWellboreTrajectoryUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_getWellboreTrajectory(void * jarg1) {
  void * jresult ;
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  {
    try {
      result = (resqml2_0::WellboreTrajectoryRepresentation *)(arg1)->getWellboreTrajectory();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_setWitsmlLog(void * jarg1, void * jarg2) {
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  witsml1_4_1_1::Log *arg2 = (witsml1_4_1_1::Log *) 0 ;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  arg2 = (witsml1_4_1_1::Log *)jarg2; 
  {
    try {
      (arg1)->setWitsmlLog(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_getWitsmlLog(void * jarg1) {
  void * jresult ;
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  witsml1_4_1_1::Log *result = 0 ;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  {
    try {
      result = (witsml1_4_1_1::Log *)(arg1)->getWitsmlLog();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_WellboreFrameRepresentation(void * jarg1) {
  resqml2_0::WellboreFrameRepresentation *arg1 = (resqml2_0::WellboreFrameRepresentation *) 0 ;
  
  arg1 = (resqml2_0::WellboreFrameRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_WellboreMarker_hasAGeologicBoundaryKind(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::WellboreMarker *arg1 = (resqml2_0::WellboreMarker *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::WellboreMarker *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasAGeologicBoundaryKind();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_WellboreMarker_getGeologicBoundaryKind(void * jarg1) {
  int jresult ;
  resqml2_0::WellboreMarker *arg1 = (resqml2_0::WellboreMarker *) 0 ;
  gsoap_resqml2_0::resqml2__GeologicBoundaryKind result;
  
  arg1 = (resqml2_0::WellboreMarker *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__GeologicBoundaryKind)(arg1)->getGeologicBoundaryKind();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreMarker_getHorizonInterpretation(void * jarg1) {
  void * jresult ;
  resqml2_0::WellboreMarker *arg1 = (resqml2_0::WellboreMarker *) 0 ;
  resqml2_0::HorizonInterpretation *result = 0 ;
  
  arg1 = (resqml2_0::WellboreMarker *)jarg1; 
  {
    try {
      result = (resqml2_0::HorizonInterpretation *)((resqml2_0::WellboreMarker const *)arg1)->getHorizonInterpretation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_WellboreMarker_getHorizonInterpretationUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::WellboreMarker *arg1 = (resqml2_0::WellboreMarker *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::WellboreMarker *)jarg1; 
  {
    try {
      result = ((resqml2_0::WellboreMarker const *)arg1)->getHorizonInterpretationUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreMarker_setHorizonInterpretation(void * jarg1, void * jarg2) {
  resqml2_0::WellboreMarker *arg1 = (resqml2_0::WellboreMarker *) 0 ;
  resqml2_0::HorizonInterpretation *arg2 = (resqml2_0::HorizonInterpretation *) 0 ;
  
  arg1 = (resqml2_0::WellboreMarker *)jarg1; 
  arg2 = (resqml2_0::HorizonInterpretation *)jarg2; 
  {
    try {
      (arg1)->setHorizonInterpretation(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_WellboreMarker(void * jarg1) {
  resqml2_0::WellboreMarker *arg1 = (resqml2_0::WellboreMarker *) 0 ;
  
  arg1 = (resqml2_0::WellboreMarker *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreMarkerFrameRepresentation_pushBackNewWellboreMarker__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  resqml2_0::WellboreMarkerFrameRepresentation *arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::WellboreMarker *result = 0 ;
  
  arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::WellboreMarker *)(arg1)->pushBackNewWellboreMarker((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreMarkerFrameRepresentation_pushBackNewWellboreMarker__SWIG_1(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  resqml2_0::WellboreMarkerFrameRepresentation *arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsoap_resqml2_0::resqml2__GeologicBoundaryKind *arg4 = 0 ;
  gsoap_resqml2_0::resqml2__GeologicBoundaryKind temp4 ;
  resqml2_0::WellboreMarker *result = 0 ;
  
  arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (gsoap_resqml2_0::resqml2__GeologicBoundaryKind)jarg4; 
  arg4 = &temp4; 
  {
    try {
      result = (resqml2_0::WellboreMarker *)(arg1)->pushBackNewWellboreMarker((std::string const &)*arg2,(std::string const &)*arg3,(gsoap_resqml2_0::resqml2__GeologicBoundaryKind const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_WellboreMarkerFrameRepresentation_getWellboreMarkerCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::WellboreMarkerFrameRepresentation *arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)(arg1)->getWellboreMarkerCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_WellboreMarkerFrameRepresentation_getWellboreMarkerSet(void * jarg1) {
  void * jresult ;
  resqml2_0::WellboreMarkerFrameRepresentation *arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *) 0 ;
  std::vector< resqml2_0::WellboreMarker * > *result = 0 ;
  
  arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg1; 
  {
    try {
      result = (std::vector< resqml2_0::WellboreMarker * > *) &((resqml2_0::WellboreMarkerFrameRepresentation const *)arg1)->getWellboreMarkerSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_WellboreMarkerFrameRepresentation_setWitsmlFormationMarker(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::WellboreMarkerFrameRepresentation *arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  witsml1_4_1_1::FormationMarker *arg3 = (witsml1_4_1_1::FormationMarker *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (witsml1_4_1_1::FormationMarker *)jarg3; 
  {
    try {
      (arg1)->setWitsmlFormationMarker((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_WellboreMarkerFrameRepresentation(void * jarg1) {
  resqml2_0::WellboreMarkerFrameRepresentation *arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *) 0 ;
  
  arg1 = (resqml2_0::WellboreMarkerFrameRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_RepresentationSetRepresentation(void * jarg1) {
  resqml2_0::RepresentationSetRepresentation *arg1 = (resqml2_0::RepresentationSetRepresentation *) 0 ;
  
  arg1 = (resqml2_0::RepresentationSetRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_NonSealedSurfaceFrameworkRepresentation_pushBackNonSealedContactRepresentation(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  resqml2_0::NonSealedSurfaceFrameworkRepresentation *arg1 = (resqml2_0::NonSealedSurfaceFrameworkRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg4 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::NonSealedSurfaceFrameworkRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  arg4 = (resqml2_0::AbstractLocal3dCrs *)jarg4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->pushBackNonSealedContactRepresentation((unsigned int const &)*arg2,arg3,arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_NonSealedSurfaceFrameworkRepresentation(void * jarg1) {
  resqml2_0::NonSealedSurfaceFrameworkRepresentation *arg1 = (resqml2_0::NonSealedSurfaceFrameworkRepresentation *) 0 ;
  
  arg1 = (resqml2_0::NonSealedSurfaceFrameworkRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_SealedSurfaceFrameworkRepresentation(void * jarg1) {
  resqml2_0::SealedSurfaceFrameworkRepresentation *arg1 = (resqml2_0::SealedSurfaceFrameworkRepresentation *) 0 ;
  
  arg1 = (resqml2_0::SealedSurfaceFrameworkRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractGridRepresentation_getGridConnectionSetRepresentationCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractGridRepresentation *arg1 = (resqml2_0::AbstractGridRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractGridRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractGridRepresentation const *)arg1)->getGridConnectionSetRepresentationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractGridRepresentation_getGridConnectionSetRepresentation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::AbstractGridRepresentation *arg1 = (resqml2_0::AbstractGridRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::GridConnectionSetRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::AbstractGridRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::GridConnectionSetRepresentation *)((resqml2_0::AbstractGridRepresentation const *)arg1)->getGridConnectionSetRepresentation((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractGridRepresentation(void * jarg1) {
  resqml2_0::AbstractGridRepresentation *arg1 = (resqml2_0::AbstractGridRepresentation *) 0 ;
  
  arg1 = (resqml2_0::AbstractGridRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractColumnLayerGridRepresentation_getKCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractColumnLayerGridRepresentation *arg1 = (resqml2_0::AbstractColumnLayerGridRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractColumnLayerGridRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractColumnLayerGridRepresentation const *)arg1)->getKCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractColumnLayerGridRepresentation_setKCount(void * jarg1, unsigned int jarg2) {
  resqml2_0::AbstractColumnLayerGridRepresentation *arg1 = (resqml2_0::AbstractColumnLayerGridRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::AbstractColumnLayerGridRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->setKCount((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractColumnLayerGridRepresentation(void * jarg1) {
  resqml2_0::AbstractColumnLayerGridRepresentation *arg1 = (resqml2_0::AbstractColumnLayerGridRepresentation *) 0 ;
  
  arg1 = (resqml2_0::AbstractColumnLayerGridRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_isRightHanded(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::IjkGridRepresentation const *)arg1)->isRightHanded();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getICount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::IjkGridRepresentation const *)arg1)->getICount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setICount(void * jarg1, unsigned int jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->setICount((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getJCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::IjkGridRepresentation const *)arg1)->getJCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setJCount(void * jarg1, unsigned int jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->setJCount((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getSplitCoordinateLineCount(void * jarg1) {
  unsigned long jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned long result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (unsigned long)((resqml2_0::IjkGridRepresentation const *)arg1)->getSplitCoordinateLineCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getPillarsOfSplitCoordinateLines__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getPillarsOfSplitCoordinateLines(arg2,arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getPillarsOfSplitCoordinateLines__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  bool arg3 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getPillarsOfSplitCoordinateLines(arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getPillarsOfSplitCoordinateLines__SWIG_2(void * jarg1, void * jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getPillarsOfSplitCoordinateLines(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getColumnsOfSplitCoordinateLines__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getColumnsOfSplitCoordinateLines(arg2,arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getColumnsOfSplitCoordinateLines__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  bool arg3 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getColumnsOfSplitCoordinateLines(arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getColumnsOfSplitCoordinateLines__SWIG_2(void * jarg1, void * jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getColumnsOfSplitCoordinateLines(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getColumnCountOfSplitCoordinateLines(void * jarg1, void * jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getColumnCountOfSplitCoordinateLines(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getControlPointMaxCountPerPillar(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::IjkGridRepresentation const *)arg1)->getControlPointMaxCountPerPillar();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getControlPoints__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getControlPoints(arg2,arg3,arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getControlPoints__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getControlPoints(arg2,arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getControlPoints__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  bool arg3 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getControlPoints(arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getControlPoints__SWIG_3(void * jarg1, void * jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getControlPoints(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_hasControlPointParameters(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::IjkGridRepresentation const *)arg1)->hasControlPointParameters();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getControlPointParameters__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getControlPointParameters(arg2,arg3,arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getControlPointParameters__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getControlPointParameters(arg2,arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getControlPointParameters__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  bool arg3 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getControlPointParameters(arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getControlPointParameters__SWIG_3(void * jarg1, void * jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getControlPointParameters(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getParametricLineKind__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  short *arg2 = (short *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (short *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getParametricLineKind(arg2,arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getParametricLineKind__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  short *arg2 = (short *) 0 ;
  bool arg3 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (short *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getParametricLineKind(arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getParametricLineKind__SWIG_2(void * jarg1, void * jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (short *)jarg2; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getParametricLineKind(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getParametersOfNodes__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getParametersOfNodes(arg2,arg3,arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getParametersOfNodes__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getParametersOfNodes(arg2,arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getParametersOfNodes__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  bool arg3 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getParametersOfNodes(arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getParametersOfNodes__SWIG_3(void * jarg1, void * jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getParametersOfNodes(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getCellGeometryIsDefined__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getCellGeometryIsDefined(arg2,arg3,arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getCellGeometryIsDefined__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getCellGeometryIsDefined(arg2,arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getCellGeometryIsDefined__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool arg3 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getCellGeometryIsDefined(arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getCellGeometryIsDefined__SWIG_3(void * jarg1, void * jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getCellGeometryIsDefined(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getPillarGeometryIsDefined__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getPillarGeometryIsDefined(arg2,arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getPillarGeometryIsDefined__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool arg3 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getPillarGeometryIsDefined(arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getPillarGeometryIsDefined__SWIG_2(void * jarg1, void * jarg2) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    try {
      ((resqml2_0::IjkGridRepresentation const *)arg1)->getPillarGeometryIsDefined(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsCoordinateLineNodes__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned long jarg7, void * jarg8, void * jarg9, void * jarg10) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned long *arg7 = 0 ;
  unsigned int *arg8 = (unsigned int *) 0 ;
  unsigned int *arg9 = (unsigned int *) 0 ;
  unsigned int *arg10 = (unsigned int *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  unsigned long temp7 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  arg5 = (double *)jarg5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (unsigned long)jarg7; 
  arg7 = &temp7; 
  arg8 = (unsigned int *)jarg8; 
  arg9 = (unsigned int *)jarg9; 
  arg10 = (unsigned int *)jarg10; 
  {
    try {
      (arg1)->setGeometryAsCoordinateLineNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,arg5,arg6,(unsigned long const &)*arg7,arg8,arg9,arg10);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsCoordinateLineNodes__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned long jarg7, void * jarg8, void * jarg9) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned long *arg7 = 0 ;
  unsigned int *arg8 = (unsigned int *) 0 ;
  unsigned int *arg9 = (unsigned int *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  unsigned long temp7 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  arg5 = (double *)jarg5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (unsigned long)jarg7; 
  arg7 = &temp7; 
  arg8 = (unsigned int *)jarg8; 
  arg9 = (unsigned int *)jarg9; 
  {
    try {
      (arg1)->setGeometryAsCoordinateLineNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,arg5,arg6,(unsigned long const &)*arg7,arg8,arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsCoordinateLineNodes__SWIG_2(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned long jarg7, void * jarg8) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned long *arg7 = 0 ;
  unsigned int *arg8 = (unsigned int *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  unsigned long temp7 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  arg5 = (double *)jarg5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (unsigned long)jarg7; 
  arg7 = &temp7; 
  arg8 = (unsigned int *)jarg8; 
  {
    try {
      (arg1)->setGeometryAsCoordinateLineNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,arg5,arg6,(unsigned long const &)*arg7,arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsCoordinateLineNodes__SWIG_3(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned long jarg7) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned long *arg7 = 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  unsigned long temp7 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  arg5 = (double *)jarg5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (unsigned long)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->setGeometryAsCoordinateLineNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,arg5,arg6,(unsigned long const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsCoordinateLineNodes__SWIG_4(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  arg5 = (double *)jarg5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->setGeometryAsCoordinateLineNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsParametricNonSplittedPillarNodes__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10, void * jarg11) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  unsigned int *arg8 = 0 ;
  short *arg9 = (short *) 0 ;
  resqml2_0::HdfProxy *arg10 = (resqml2_0::HdfProxy *) 0 ;
  unsigned char *arg11 = (unsigned char *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  unsigned int temp8 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  arg9 = (short *)jarg9; 
  arg10 = (resqml2_0::HdfProxy *)jarg10; 
  arg11 = (unsigned char *)jarg11; 
  {
    try {
      (arg1)->setGeometryAsParametricNonSplittedPillarNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,arg5,arg6,arg7,(unsigned int const &)*arg8,arg9,arg10,arg11);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsParametricNonSplittedPillarNodes__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  unsigned int *arg8 = 0 ;
  short *arg9 = (short *) 0 ;
  resqml2_0::HdfProxy *arg10 = (resqml2_0::HdfProxy *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  unsigned int temp8 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  arg9 = (short *)jarg9; 
  arg10 = (resqml2_0::HdfProxy *)jarg10; 
  {
    try {
      (arg1)->setGeometryAsParametricNonSplittedPillarNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,arg5,arg6,arg7,(unsigned int const &)*arg8,arg9,arg10);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsParametricSplittedPillarNodes__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10, unsigned long jarg11, void * jarg12, void * jarg13, void * jarg14, void * jarg15) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  unsigned int *arg8 = 0 ;
  short *arg9 = (short *) 0 ;
  resqml2_0::HdfProxy *arg10 = (resqml2_0::HdfProxy *) 0 ;
  unsigned long *arg11 = 0 ;
  unsigned int *arg12 = (unsigned int *) 0 ;
  unsigned int *arg13 = (unsigned int *) 0 ;
  unsigned int *arg14 = (unsigned int *) 0 ;
  unsigned char *arg15 = (unsigned char *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  unsigned int temp8 ;
  unsigned long temp11 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  arg9 = (short *)jarg9; 
  arg10 = (resqml2_0::HdfProxy *)jarg10; 
  temp11 = (unsigned long)jarg11; 
  arg11 = &temp11; 
  arg12 = (unsigned int *)jarg12; 
  arg13 = (unsigned int *)jarg13; 
  arg14 = (unsigned int *)jarg14; 
  arg15 = (unsigned char *)jarg15; 
  {
    try {
      (arg1)->setGeometryAsParametricSplittedPillarNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,arg5,arg6,arg7,(unsigned int const &)*arg8,arg9,arg10,(unsigned long const &)*arg11,arg12,arg13,arg14,arg15);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsParametricSplittedPillarNodes__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10, unsigned long jarg11, void * jarg12, void * jarg13, void * jarg14) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  unsigned int *arg8 = 0 ;
  short *arg9 = (short *) 0 ;
  resqml2_0::HdfProxy *arg10 = (resqml2_0::HdfProxy *) 0 ;
  unsigned long *arg11 = 0 ;
  unsigned int *arg12 = (unsigned int *) 0 ;
  unsigned int *arg13 = (unsigned int *) 0 ;
  unsigned int *arg14 = (unsigned int *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  unsigned int temp8 ;
  unsigned long temp11 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  arg5 = (double *)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  arg9 = (short *)jarg9; 
  arg10 = (resqml2_0::HdfProxy *)jarg10; 
  temp11 = (unsigned long)jarg11; 
  arg11 = &temp11; 
  arg12 = (unsigned int *)jarg12; 
  arg13 = (unsigned int *)jarg13; 
  arg14 = (unsigned int *)jarg14; 
  {
    try {
      (arg1)->setGeometryAsParametricSplittedPillarNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,arg5,arg6,arg7,(unsigned int const &)*arg8,arg9,arg10,(unsigned long const &)*arg11,arg12,arg13,arg14);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_setGeometryAsCoordinateLineNodes__SWIG_5(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11, double jarg12, double jarg13, double jarg14, double jarg15, double jarg16, double jarg17, double jarg18, double jarg19) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  gsoap_resqml2_0::resqml2__PillarShape *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__KDirection *arg3 = 0 ;
  bool *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double *arg10 = 0 ;
  double *arg11 = 0 ;
  double *arg12 = 0 ;
  double *arg13 = 0 ;
  double *arg14 = 0 ;
  double *arg15 = 0 ;
  double *arg16 = 0 ;
  double *arg17 = 0 ;
  double *arg18 = 0 ;
  double *arg19 = 0 ;
  gsoap_resqml2_0::resqml2__PillarShape temp2 ;
  gsoap_resqml2_0::resqml2__KDirection temp3 ;
  bool temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  double temp8 ;
  double temp9 ;
  double temp10 ;
  double temp11 ;
  double temp12 ;
  double temp13 ;
  double temp14 ;
  double temp15 ;
  double temp16 ;
  double temp17 ;
  double temp18 ;
  double temp19 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__PillarShape)jarg2; 
  arg2 = &temp2; 
  temp3 = (gsoap_resqml2_0::resqml2__KDirection)jarg3; 
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (double)jarg8; 
  arg8 = &temp8; 
  temp9 = (double)jarg9; 
  arg9 = &temp9; 
  temp10 = (double)jarg10; 
  arg10 = &temp10; 
  temp11 = (double)jarg11; 
  arg11 = &temp11; 
  temp12 = (double)jarg12; 
  arg12 = &temp12; 
  temp13 = (double)jarg13; 
  arg13 = &temp13; 
  temp14 = (double)jarg14; 
  arg14 = &temp14; 
  temp15 = (double)jarg15; 
  arg15 = &temp15; 
  temp16 = (double)jarg16; 
  arg16 = &temp16; 
  temp17 = (double)jarg17; 
  arg17 = &temp17; 
  temp18 = (double)jarg18; 
  arg18 = &temp18; 
  temp19 = (double)jarg19; 
  arg19 = &temp19; 
  {
    try {
      (arg1)->setGeometryAsCoordinateLineNodes((gsoap_resqml2_0::resqml2__PillarShape const &)*arg2,(gsoap_resqml2_0::resqml2__KDirection const &)*arg3,(bool const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,(double const &)*arg8,(double const &)*arg9,(double const &)*arg10,(double const &)*arg11,(double const &)*arg12,(double const &)*arg13,(double const &)*arg14,(double const &)*arg15,(double const &)*arg16,(double const &)*arg17,(double const &)*arg18,(double const &)*arg19);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_addSeismic3dCoordinatesToPatch(void * jarg1, unsigned int jarg2, double jarg3, double jarg4, unsigned int jarg5, double jarg6, double jarg7, unsigned int jarg8, unsigned int jarg9, void * jarg10) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  unsigned int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  unsigned int *arg9 = 0 ;
  resqml2_0::AbstractRepresentation *arg10 = (resqml2_0::AbstractRepresentation *) 0 ;
  double temp3 ;
  double temp4 ;
  unsigned int temp5 ;
  double temp6 ;
  double temp7 ;
  unsigned int temp8 ;
  unsigned int temp9 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned int)jarg9; 
  arg9 = &temp9; 
  arg10 = (resqml2_0::AbstractRepresentation *)jarg10; 
  {
    try {
      (arg1)->addSeismic3dCoordinatesToPatch(arg2,(double const &)*arg3,(double const &)*arg4,(unsigned int const &)*arg5,(double const &)*arg6,(double const &)*arg7,(unsigned int const &)*arg8,(unsigned int const &)*arg9,arg10);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getXOrigin(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getXOrigin();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getYOrigin(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getYOrigin();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getZOrigin(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getZOrigin();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getXOriginInGlobalCrs(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getXOriginInGlobalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getYOriginInGlobalCrs(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getYOriginInGlobalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getZOriginInGlobalCrs(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getZOriginInGlobalCrs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getXIOffset(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getXIOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getYIOffset(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getYIOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getZIOffset(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getZIOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getXJOffset(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getXJOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getYJOffset(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getYJOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getZJOffset(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getZJOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getXKOffset(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getXKOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getYKOffset(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getYKOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getZKOffset(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getZKOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getISpacing(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getISpacing();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getJSpacing(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getJSpacing();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getKSpacing(void * jarg1) {
  double jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  double result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (double)((resqml2_0::IjkGridRepresentation const *)arg1)->getKSpacing();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getOriginInline(void * jarg1) {
  int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::IjkGridRepresentation const *)arg1)->getOriginInline();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getOriginCrossline(void * jarg1) {
  int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::IjkGridRepresentation const *)arg1)->getOriginCrossline();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getInlineIOffset(void * jarg1) {
  int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::IjkGridRepresentation const *)arg1)->getInlineIOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getInlineJOffset(void * jarg1) {
  int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::IjkGridRepresentation const *)arg1)->getInlineJOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getInlineKOffset(void * jarg1) {
  int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::IjkGridRepresentation const *)arg1)->getInlineKOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getCrosslineIOffset(void * jarg1) {
  int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::IjkGridRepresentation const *)arg1)->getCrosslineIOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getCrosslineJOffset(void * jarg1) {
  int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::IjkGridRepresentation const *)arg1)->getCrosslineJOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_getCrosslineKOffset(void * jarg1) {
  int jresult ;
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  int result;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      result = (int)((resqml2_0::IjkGridRepresentation const *)arg1)->getCrosslineKOffset();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_IjkGridRepresentation(void * jarg1) {
  resqml2_0::IjkGridRepresentation *arg1 = (resqml2_0::IjkGridRepresentation *) 0 ;
  
  arg1 = (resqml2_0::IjkGridRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_resqml2_0_UnstructuredGridRepresentation_getCellCount(void * jarg1) {
  unsigned long jresult ;
  resqml2_0::UnstructuredGridRepresentation *arg1 = (resqml2_0::UnstructuredGridRepresentation *) 0 ;
  unsigned long result;
  
  arg1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1; 
  {
    try {
      result = (unsigned long)((resqml2_0::UnstructuredGridRepresentation const *)arg1)->getCellCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_resqml2_0_UnstructuredGridRepresentation_getFaceCount(void * jarg1) {
  unsigned long jresult ;
  resqml2_0::UnstructuredGridRepresentation *arg1 = (resqml2_0::UnstructuredGridRepresentation *) 0 ;
  unsigned long result;
  
  arg1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1; 
  {
    try {
      result = (unsigned long)((resqml2_0::UnstructuredGridRepresentation const *)arg1)->getFaceCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_UnstructuredGridRepresentation_getFacesOfCells(void * jarg1, void * jarg2) {
  resqml2_0::UnstructuredGridRepresentation *arg1 = (resqml2_0::UnstructuredGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::UnstructuredGridRepresentation const *)arg1)->getFacesOfCells(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_UnstructuredGridRepresentation_getFaceCountOfCells(void * jarg1, void * jarg2) {
  resqml2_0::UnstructuredGridRepresentation *arg1 = (resqml2_0::UnstructuredGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::UnstructuredGridRepresentation const *)arg1)->getFaceCountOfCells(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_UnstructuredGridRepresentation_getNodesOfFaces(void * jarg1, void * jarg2) {
  resqml2_0::UnstructuredGridRepresentation *arg1 = (resqml2_0::UnstructuredGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::UnstructuredGridRepresentation const *)arg1)->getNodesOfFaces(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_UnstructuredGridRepresentation_getNodeCountOfFaces(void * jarg1, void * jarg2) {
  resqml2_0::UnstructuredGridRepresentation *arg1 = (resqml2_0::UnstructuredGridRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::UnstructuredGridRepresentation const *)arg1)->getNodeCountOfFaces(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_UnstructuredGridRepresentation_setGeometry(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10, unsigned int jarg11, int jarg12) {
  resqml2_0::UnstructuredGridRepresentation *arg1 = (resqml2_0::UnstructuredGridRepresentation *) 0 ;
  bool *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  unsigned int *arg7 = (unsigned int *) 0 ;
  unsigned int *arg8 = 0 ;
  unsigned int *arg9 = (unsigned int *) 0 ;
  unsigned int *arg10 = (unsigned int *) 0 ;
  unsigned int *arg11 = 0 ;
  gsoap_resqml2_0::resqml2__CellShape *arg12 = 0 ;
  bool temp2 ;
  unsigned int temp4 ;
  unsigned int temp8 ;
  unsigned int temp11 ;
  gsoap_resqml2_0::resqml2__CellShape temp12 ;
  
  arg1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (unsigned int *)jarg6; 
  arg7 = (unsigned int *)jarg7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  arg9 = (unsigned int *)jarg9; 
  arg10 = (unsigned int *)jarg10; 
  temp11 = (unsigned int)jarg11; 
  arg11 = &temp11; 
  temp12 = (gsoap_resqml2_0::resqml2__CellShape)jarg12; 
  arg12 = &temp12; 
  {
    try {
      (arg1)->setGeometry((bool const &)*arg2,arg3,(unsigned int const &)*arg4,arg5,arg6,arg7,(unsigned int const &)*arg8,arg9,arg10,(unsigned int const &)*arg11,(gsoap_resqml2_0::resqml2__CellShape const &)*arg12);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_UnstructuredGridRepresentation_setTetrahedraOnlyGeometry(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, void * jarg7, void * jarg8) {
  resqml2_0::UnstructuredGridRepresentation *arg1 = (resqml2_0::UnstructuredGridRepresentation *) 0 ;
  bool *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int *arg7 = (unsigned int *) 0 ;
  unsigned int *arg8 = (unsigned int *) 0 ;
  bool temp2 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  
  arg1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  arg7 = (unsigned int *)jarg7; 
  arg8 = (unsigned int *)jarg8; 
  {
    try {
      (arg1)->setTetrahedraOnlyGeometry((bool const &)*arg2,arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6,arg7,arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_UnstructuredGridRepresentation(void * jarg1) {
  resqml2_0::UnstructuredGridRepresentation *arg1 = (resqml2_0::UnstructuredGridRepresentation *) 0 ;
  
  arg1 = (resqml2_0::UnstructuredGridRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getCellIndexPairCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::GridConnectionSetRepresentation const *)arg1)->getCellIndexPairCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getCellIndexPairCountFromFaultIndex(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)((resqml2_0::GridConnectionSetRepresentation const *)arg1)->getCellIndexPairCountFromFaultIndex((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getCellIndexPair(void * jarg1, void * jarg2) {
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      ((resqml2_0::GridConnectionSetRepresentation const *)arg1)->getCellIndexPair(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getCellIndexPairFromFaultIndex(void * jarg1, void * jarg2, unsigned int jarg3) {
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      ((resqml2_0::GridConnectionSetRepresentation const *)arg1)->getCellIndexPairFromFaultIndex(arg2,(unsigned int const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_setCellIndexPairs(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp2 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (unsigned int *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->setCellIndexPairs((unsigned int const &)*arg2,arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_setLocalFacePerCellIndexPairs(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp2 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (unsigned int *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->setLocalFacePerCellIndexPairs((unsigned int const &)*arg2,arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_setConnectionFaultNames(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->setConnectionFaultNames(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getFaultInterpretationUuidFromFaultIndex(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((resqml2_0::GridConnectionSetRepresentation const *)arg1)->getFaultInterpretationUuidFromFaultIndex((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getFaultInterpretationFromFaultIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  resqml2_0::FaultInterpretation *result = 0 ;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (resqml2_0::FaultInterpretation *)((resqml2_0::GridConnectionSetRepresentation const *)arg1)->getFaultInterpretationFromFaultIndex((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getFaultInterpretationCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::GridConnectionSetRepresentation const *)arg1)->getFaultInterpretationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getSupportingGridRepresentationCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::GridConnectionSetRepresentation const *)arg1)->getSupportingGridRepresentationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getSupportingGridRepresentation(void * jarg1) {
  void * jresult ;
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  resqml2_0::AbstractGridRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  {
    try {
      result = (resqml2_0::AbstractGridRepresentation *)(arg1)->getSupportingGridRepresentation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_getSupportingGridRepresentationUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  {
    try {
      result = ((resqml2_0::GridConnectionSetRepresentation const *)arg1)->getSupportingGridRepresentationUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_GridConnectionSetRepresentation(void * jarg1) {
  resqml2_0::GridConnectionSetRepresentation *arg1 = (resqml2_0::GridConnectionSetRepresentation *) 0 ;
  
  arg1 = (resqml2_0::GridConnectionSetRepresentation *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_TimeSeries_pushBackTimestamp(void * jarg1, long long jarg2) {
  resqml2_0::TimeSeries *arg1 = (resqml2_0::TimeSeries *) 0 ;
  time_t *arg2 = 0 ;
  time_t temp2 ;
  
  arg1 = (resqml2_0::TimeSeries *)jarg1; 
  temp2 = (time_t)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->pushBackTimestamp((time_t const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_TimeSeries_getTimestampIndex(void * jarg1, long long jarg2) {
  unsigned int jresult ;
  resqml2_0::TimeSeries *arg1 = (resqml2_0::TimeSeries *) 0 ;
  time_t *arg2 = 0 ;
  time_t temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::TimeSeries *)jarg1; 
  temp2 = (time_t)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)((resqml2_0::TimeSeries const *)arg1)->getTimestampIndex((time_t const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_TimeSeries_getTimestampCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::TimeSeries *arg1 = (resqml2_0::TimeSeries *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::TimeSeries *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::TimeSeries const *)arg1)->getTimestampCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_resqml2_0_TimeSeries_getTimestamp(void * jarg1, unsigned int jarg2) {
  long long jresult ;
  resqml2_0::TimeSeries *arg1 = (resqml2_0::TimeSeries *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  time_t result;
  
  arg1 = (resqml2_0::TimeSeries *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (time_t)((resqml2_0::TimeSeries const *)arg1)->getTimestamp((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_TimeSeries(void * jarg1) {
  resqml2_0::TimeSeries *arg1 = (resqml2_0::TimeSeries *) 0 ;
  
  arg1 = (resqml2_0::TimeSeries *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_PropertyKind_getNamingSystem(void * jarg1) {
  char * jresult ;
  resqml2_0::PropertyKind *arg1 = (resqml2_0::PropertyKind *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (resqml2_0::PropertyKind *)jarg1; 
  {
    try {
      result = (std::string *) &((resqml2_0::PropertyKind const *)arg1)->getNamingSystem();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_PropertyKind_getUom(void * jarg1) {
  int jresult ;
  resqml2_0::PropertyKind *arg1 = (resqml2_0::PropertyKind *) 0 ;
  gsoap_resqml2_0::resqml2__ResqmlUom *result = 0 ;
  
  arg1 = (resqml2_0::PropertyKind *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__ResqmlUom *) &((resqml2_0::PropertyKind const *)arg1)->getUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)*result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_PropertyKind_getUomAsString(void * jarg1) {
  char * jresult ;
  resqml2_0::PropertyKind *arg1 = (resqml2_0::PropertyKind *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::PropertyKind *)jarg1; 
  {
    try {
      result = ((resqml2_0::PropertyKind const *)arg1)->getUomAsString();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_PropertyKind(void * jarg1) {
  resqml2_0::PropertyKind *arg1 = (resqml2_0::PropertyKind *) 0 ;
  
  arg1 = (resqml2_0::PropertyKind *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_StringTableLookup_getItemCount(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::StringTableLookup *arg1 = (resqml2_0::StringTableLookup *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::StringTableLookup *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::StringTableLookup const *)arg1)->getItemCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_resqml2_0_StringTableLookup_getKeyAtIndex(void * jarg1, unsigned int jarg2) {
  long jresult ;
  resqml2_0::StringTableLookup *arg1 = (resqml2_0::StringTableLookup *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  long result;
  
  arg1 = (resqml2_0::StringTableLookup *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (long)((resqml2_0::StringTableLookup const *)arg1)->getKeyAtIndex((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_StringTableLookup_getStringValueAtIndex(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  resqml2_0::StringTableLookup *arg1 = (resqml2_0::StringTableLookup *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::StringTableLookup *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((resqml2_0::StringTableLookup const *)arg1)->getStringValueAtIndex((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_StringTableLookup_getStringValue(void * jarg1, long jarg2) {
  char * jresult ;
  resqml2_0::StringTableLookup *arg1 = (resqml2_0::StringTableLookup *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::StringTableLookup *)jarg1; 
  temp2 = (long)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (arg1)->getStringValue((long const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StringTableLookup_addValue(void * jarg1, char * jarg2, long jarg3) {
  resqml2_0::StringTableLookup *arg1 = (resqml2_0::StringTableLookup *) 0 ;
  std::string *arg2 = 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  arg1 = (resqml2_0::StringTableLookup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (long)jarg3; 
  arg3 = &temp3; 
  {
    try {
      (arg1)->addValue((std::string const &)*arg2,(long const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_StringTableLookup_setValue(void * jarg1, char * jarg2, long jarg3) {
  resqml2_0::StringTableLookup *arg1 = (resqml2_0::StringTableLookup *) 0 ;
  std::string *arg2 = 0 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  arg1 = (resqml2_0::StringTableLookup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (long)jarg3; 
  arg3 = &temp3; 
  {
    try {
      (arg1)->setValue((std::string const &)*arg2,(long const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_StringTableLookup(void * jarg1) {
  resqml2_0::StringTableLookup *arg1 = (resqml2_0::StringTableLookup *) 0 ;
  
  arg1 = (resqml2_0::StringTableLookup *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getRepresentationUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractProperty const *)arg1)->getRepresentationUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getRepresentation(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  resqml2_0::AbstractRepresentation *result = 0 ;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = (resqml2_0::AbstractRepresentation *)(arg1)->getRepresentation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getHdfProxyUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractProperty const *)arg1)->getHdfProxyUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getHdfProxy(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  resqml2_0::HdfProxy *result = 0 ;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = (resqml2_0::HdfProxy *)(arg1)->getHdfProxy();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getPropertyKindUomAsString(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractProperty const *)arg1)->getPropertyKindUomAsString();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getPropertyKindDescription(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractProperty const *)arg1)->getPropertyKindDescription();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getPropertyKindAsString(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractProperty const *)arg1)->getPropertyKindAsString();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getPropertyKindParentAsString(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractProperty const *)arg1)->getPropertyKindParentAsString();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_isAssociatedToOneStandardEnergisticsPropertyKind(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  bool result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = (bool)((resqml2_0::AbstractProperty const *)arg1)->isAssociatedToOneStandardEnergisticsPropertyKind();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getEnergisticsPropertyKind(void * jarg1) {
  int jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)((resqml2_0::AbstractProperty const *)arg1)->getEnergisticsPropertyKind();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getLocalPropertyKindUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = ((resqml2_0::AbstractProperty const *)arg1)->getLocalPropertyKindUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getLocalPropertyKind(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  resqml2_0::PropertyKind *result = 0 ;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = (resqml2_0::PropertyKind *)((resqml2_0::AbstractProperty const *)arg1)->getLocalPropertyKind();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getElementCountPerValue(void * jarg1) {
  unsigned int jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = (unsigned int)((resqml2_0::AbstractProperty const *)arg1)->getElementCountPerValue();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getAttachmentKind(void * jarg1) {
  int jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__IndexableElements)((resqml2_0::AbstractProperty const *)arg1)->getAttachmentKind();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_setTimeIndex(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  resqml2_0::TimeSeries *arg3 = (resqml2_0::TimeSeries *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (resqml2_0::TimeSeries *)jarg3; 
  {
    try {
      (arg1)->setTimeIndex((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_setTimeStep(void * jarg1, unsigned int jarg2) {
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->setTimeStep((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getTimeSeries(void * jarg1) {
  void * jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  resqml2_0::TimeSeries *result = 0 ;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = (resqml2_0::TimeSeries *)(arg1)->getTimeSeries();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_getTimestamp(void * jarg1) {
  long long jresult ;
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  time_t result;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      result = (time_t)((resqml2_0::AbstractProperty const *)arg1)->getTimestamp();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractProperty(void * jarg1) {
  resqml2_0::AbstractProperty *arg1 = (resqml2_0::AbstractProperty *) 0 ;
  
  arg1 = (resqml2_0::AbstractProperty *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getValuesHdfDatatype(void * jarg1) {
  int jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  resqml2_0::AbstractValuesProperty::hdfDatatypeEnum result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  {
    try {
      result = (resqml2_0::AbstractValuesProperty::hdfDatatypeEnum)((resqml2_0::AbstractValuesProperty const *)arg1)->getValuesHdfDatatype();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getNullValueOfPatch(void * jarg1, unsigned int jarg2) {
  long jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  long result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (long)(arg1)->getNullValueOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getLongValuesOfPatch__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  long jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  long *arg3 = (long *) 0 ;
  unsigned int temp2 ;
  long result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (long *)jarg3; 
  {
    try {
      result = (long)(arg1)->getLongValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getULongValuesOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned long jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned long *arg3 = (unsigned long *) 0 ;
  unsigned int temp2 ;
  unsigned long result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (unsigned long *)jarg3; 
  {
    try {
      result = (unsigned long)(arg1)->getULongValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getIntValuesOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (int *)jarg3; 
  {
    try {
      result = (int)(arg1)->getIntValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getUIntValuesOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (unsigned int *)jarg3; 
  {
    try {
      result = (unsigned int)(arg1)->getUIntValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getShortValuesOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  short jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  short *arg3 = (short *) 0 ;
  unsigned int temp2 ;
  short result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (short *)jarg3; 
  {
    try {
      result = (short)(arg1)->getShortValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getUShortValuesOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned short jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned int temp2 ;
  unsigned short result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (unsigned short *)jarg3; 
  {
    try {
      result = (unsigned short)(arg1)->getUShortValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getCharValuesOfPatch(void * jarg1, unsigned int jarg2, char * jarg3) {
  char jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int temp2 ;
  char result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (char *)jarg3; 
  {
    try {
      result = (char)(arg1)->getCharValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getUCharValuesOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned char jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned int temp2 ;
  unsigned char result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (unsigned char *)jarg3; 
  {
    try {
      result = (unsigned char)(arg1)->getUCharValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getValuesCountOfPatch(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)(arg1)->getValuesCountOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getValuesCountOfDimensionOfPatch(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      result = (unsigned int)(arg1)->getValuesCountOfDimensionOfPatch((unsigned int const &)*arg2,(unsigned int const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getDimensionsCountOfPatch(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int result;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (unsigned int)(arg1)->getDimensionsCountOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_createLongHdf5ArrayOfValues(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  hsize_t *arg2 = (hsize_t *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  arg2 = (hsize_t *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  {
    try {
      (arg1)->createLongHdf5ArrayOfValues(arg2,(unsigned int const &)*arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_createLongHdf5Array3dOfValues(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->createLongHdf5Array3dOfValues((unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_pushBackLongHdf5SlabArray3dOfValues(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, void * jarg9) {
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  resqml2_0::HdfProxy *arg9 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  unsigned int temp6 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  arg9 = (resqml2_0::HdfProxy *)jarg9; 
  {
    try {
      (arg1)->pushBackLongHdf5SlabArray3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,(unsigned int const &)*arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8,arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_pushBackLongHdf5SlabArrayOfValues(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  hsize_t *arg4 = (hsize_t *) 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp5 ;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  arg4 = (hsize_t *)jarg4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->pushBackLongHdf5SlabArrayOfValues(arg2,arg3,arg4,(unsigned int const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getLongValuesOfPatch__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  long *arg3 = (long *) 0 ;
  hsize_t *arg4 = (hsize_t *) 0 ;
  hsize_t *arg5 = (hsize_t *) 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int temp2 ;
  unsigned int temp6 ;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (long *)jarg3; 
  arg4 = (hsize_t *)jarg4; 
  arg5 = (hsize_t *)jarg5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->getLongValuesOfPatch((unsigned int const &)*arg2,arg3,arg4,arg5,(unsigned int const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_getLongValuesOf3dPatch(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  long *arg3 = (long *) 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  unsigned int *arg9 = 0 ;
  unsigned int temp2 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  unsigned int temp6 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  unsigned int temp9 ;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (long *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned int)jarg9; 
  arg9 = &temp9; 
  {
    try {
      (arg1)->getLongValuesOf3dPatch((unsigned int const &)*arg2,arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,(unsigned int const &)*arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8,(unsigned int const &)*arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_AbstractValuesProperty(void * jarg1) {
  resqml2_0::AbstractValuesProperty *arg1 = (resqml2_0::AbstractValuesProperty *) 0 ;
  
  arg1 = (resqml2_0::AbstractValuesProperty *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_CommentProperty_pushBackStringHdf5ArrayOfValues(void * jarg1, void * jarg2, void * jarg3) {
  resqml2_0::CommentProperty *arg1 = (resqml2_0::CommentProperty *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  resqml2_0::HdfProxy *arg3 = (resqml2_0::HdfProxy *) 0 ;
  
  arg1 = (resqml2_0::CommentProperty *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  arg3 = (resqml2_0::HdfProxy *)jarg3; 
  {
    try {
      (arg1)->pushBackStringHdf5ArrayOfValues((std::vector< std::string > const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_CommentProperty_getStringValuesOfPatch(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  resqml2_0::CommentProperty *arg1 = (resqml2_0::CommentProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::vector< std::string > result;
  
  arg1 = (resqml2_0::CommentProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (arg1)->getStringValuesOfPatch((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_CommentProperty(void * jarg1) {
  resqml2_0::CommentProperty *arg1 = (resqml2_0::CommentProperty *) 0 ;
  
  arg1 = (resqml2_0::CommentProperty *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_getUom(void * jarg1) {
  int jresult ;
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  gsoap_resqml2_0::resqml2__ResqmlUom *result = 0 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__ResqmlUom *) &((resqml2_0::ContinuousProperty const *)arg1)->getUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)*result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_getUomAsString(void * jarg1) {
  char * jresult ;
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  {
    try {
      result = ((resqml2_0::ContinuousProperty const *)arg1)->getUomAsString();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5Array1dOfValues__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, double jarg5, double jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  unsigned int temp3 ;
  double temp5 ;
  double temp6 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->pushBackDoubleHdf5Array1dOfValues(arg2,(unsigned int const &)*arg3,arg4,(double const &)*arg5,(double const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5Array1dOfValues__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, double jarg5) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  double *arg5 = 0 ;
  unsigned int temp3 ;
  double temp5 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  {
    try {
      (arg1)->pushBackDoubleHdf5Array1dOfValues(arg2,(unsigned int const &)*arg3,arg4,(double const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5Array1dOfValues__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  {
    try {
      (arg1)->pushBackDoubleHdf5Array1dOfValues(arg2,(unsigned int const &)*arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5Array2dOfValues__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, double jarg6, double jarg7) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  double temp6 ;
  double temp7 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->pushBackDoubleHdf5Array2dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,(double const &)*arg6,(double const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5Array2dOfValues__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, double jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  double *arg6 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  double temp6 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->pushBackDoubleHdf5Array2dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,(double const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5Array2dOfValues__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->pushBackDoubleHdf5Array2dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5Array3dOfValues__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, double jarg7, double jarg8) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  double temp7 ;
  double temp8 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (double)jarg8; 
  arg8 = &temp8; 
  {
    try {
      (arg1)->pushBackDoubleHdf5Array3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6,(double const &)*arg7,(double const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5Array3dOfValues__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, double jarg7) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  double *arg7 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  double temp7 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->pushBackDoubleHdf5Array3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6,(double const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5Array3dOfValues__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->pushBackDoubleHdf5Array3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5ArrayOfValues__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  {
    try {
      (arg1)->pushBackDoubleHdf5ArrayOfValues(arg2,arg3,(unsigned int const &)*arg4,arg5,arg6,arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5ArrayOfValues__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  double *arg6 = (double *) 0 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (double *)jarg6; 
  {
    try {
      (arg1)->pushBackDoubleHdf5ArrayOfValues(arg2,arg3,(unsigned int const &)*arg4,arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackDoubleHdf5ArrayOfValues__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->pushBackDoubleHdf5ArrayOfValues(arg2,arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5Array1dOfValues__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, double jarg5, double jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  unsigned int temp3 ;
  double temp5 ;
  double temp6 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->pushBackFloatHdf5Array1dOfValues(arg2,(unsigned int const &)*arg3,arg4,(double const &)*arg5,(double const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5Array1dOfValues__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, double jarg5) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  double *arg5 = 0 ;
  unsigned int temp3 ;
  double temp5 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  {
    try {
      (arg1)->pushBackFloatHdf5Array1dOfValues(arg2,(unsigned int const &)*arg3,arg4,(double const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5Array1dOfValues__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  {
    try {
      (arg1)->pushBackFloatHdf5Array1dOfValues(arg2,(unsigned int const &)*arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5Array2dOfValues__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, double jarg6, double jarg7) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  double temp6 ;
  double temp7 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->pushBackFloatHdf5Array2dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,(double const &)*arg6,(double const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5Array2dOfValues__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, double jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  double *arg6 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  double temp6 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->pushBackFloatHdf5Array2dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,(double const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5Array2dOfValues__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->pushBackFloatHdf5Array2dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5Array3dOfValues__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, double jarg7, double jarg8) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  double temp7 ;
  double temp8 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (double)jarg8; 
  arg8 = &temp8; 
  {
    try {
      (arg1)->pushBackFloatHdf5Array3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6,(double const &)*arg7,(double const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5Array3dOfValues__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, double jarg7) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  double *arg7 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  double temp7 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->pushBackFloatHdf5Array3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6,(double const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5Array3dOfValues__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->pushBackFloatHdf5Array3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5ArrayOfValues__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (double *)jarg7; 
  {
    try {
      (arg1)->pushBackFloatHdf5ArrayOfValues(arg2,arg3,(unsigned int const &)*arg4,arg5,arg6,arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5ArrayOfValues__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  double *arg6 = (double *) 0 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  arg6 = (double *)jarg6; 
  {
    try {
      (arg1)->pushBackFloatHdf5ArrayOfValues(arg2,arg3,(unsigned int const &)*arg4,arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5ArrayOfValues__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->pushBackFloatHdf5ArrayOfValues(arg2,arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_getDoubleValuesOfPatch(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (double *)jarg3; 
  {
    try {
      (arg1)->getDoubleValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_getFloatValuesOfPatch__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int temp2 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (float *)jarg3; 
  {
    try {
      (arg1)->getFloatValuesOfPatch((unsigned int const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_createFloatHdf5ArrayOfValues(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  hsize_t *arg2 = (hsize_t *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (hsize_t *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  {
    try {
      (arg1)->createFloatHdf5ArrayOfValues(arg2,(unsigned int const &)*arg3,arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_createFloatHdf5Array3dOfValues(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  {
    try {
      (arg1)->createFloatHdf5Array3dOfValues((unsigned int const &)*arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5SlabArray3dOfValues(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, void * jarg9) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  resqml2_0::HdfProxy *arg9 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  unsigned int temp6 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  arg9 = (resqml2_0::HdfProxy *)jarg9; 
  {
    try {
      (arg1)->pushBackFloatHdf5SlabArray3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,(unsigned int const &)*arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8,arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_pushBackFloatHdf5SlabArrayOfValues(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  float *arg2 = (float *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  hsize_t *arg4 = (hsize_t *) 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  unsigned int temp5 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  arg4 = (hsize_t *)jarg4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  {
    try {
      (arg1)->pushBackFloatHdf5SlabArrayOfValues(arg2,arg3,arg4,(unsigned int const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_getFloatValuesOfPatch__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  hsize_t *arg4 = (hsize_t *) 0 ;
  hsize_t *arg5 = (hsize_t *) 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int temp2 ;
  unsigned int temp6 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (float *)jarg3; 
  arg4 = (hsize_t *)jarg4; 
  arg5 = (hsize_t *)jarg5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->getFloatValuesOfPatch((unsigned int const &)*arg2,arg3,arg4,arg5,(unsigned int const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_getFloatValuesOf3dPatch(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  unsigned int *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  unsigned int *arg9 = 0 ;
  unsigned int temp2 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  unsigned int temp6 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  unsigned int temp9 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = (float *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned int)jarg9; 
  arg9 = &temp9; 
  {
    try {
      (arg1)->getFloatValuesOf3dPatch((unsigned int const &)*arg2,arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,(unsigned int const &)*arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8,(unsigned int const &)*arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_ContinuousProperty(void * jarg1) {
  resqml2_0::ContinuousProperty *arg1 = (resqml2_0::ContinuousProperty *) 0 ;
  
  arg1 = (resqml2_0::ContinuousProperty *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_DiscreteProperty_pushBackLongHdf5Array1dOfValues__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, long jarg5, long jarg6, long jarg7) {
  resqml2_0::DiscreteProperty *arg1 = (resqml2_0::DiscreteProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  long *arg5 = 0 ;
  long *arg6 = 0 ;
  long *arg7 = 0 ;
  unsigned int temp3 ;
  long temp5 ;
  long temp6 ;
  long temp7 ;
  
  arg1 = (resqml2_0::DiscreteProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  temp5 = (long)jarg5; 
  arg5 = &temp5; 
  temp6 = (long)jarg6; 
  arg6 = &temp6; 
  temp7 = (long)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->pushBackLongHdf5Array1dOfValues(arg2,(unsigned int const &)*arg3,arg4,(long const &)*arg5,(long const &)*arg6,(long const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_DiscreteProperty_pushBackLongHdf5Array1dOfValues__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, long jarg5) {
  resqml2_0::DiscreteProperty *arg1 = (resqml2_0::DiscreteProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  long *arg5 = 0 ;
  unsigned int temp3 ;
  long temp5 ;
  
  arg1 = (resqml2_0::DiscreteProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  temp5 = (long)jarg5; 
  arg5 = &temp5; 
  {
    try {
      (arg1)->pushBackLongHdf5Array1dOfValues(arg2,(unsigned int const &)*arg3,arg4,(long const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_DiscreteProperty_pushBackLongHdf5Array2dOfValues__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, long jarg6, long jarg7, long jarg8) {
  resqml2_0::DiscreteProperty *arg1 = (resqml2_0::DiscreteProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  long *arg6 = 0 ;
  long *arg7 = 0 ;
  long *arg8 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  long temp6 ;
  long temp7 ;
  long temp8 ;
  
  arg1 = (resqml2_0::DiscreteProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (long)jarg6; 
  arg6 = &temp6; 
  temp7 = (long)jarg7; 
  arg7 = &temp7; 
  temp8 = (long)jarg8; 
  arg8 = &temp8; 
  {
    try {
      (arg1)->pushBackLongHdf5Array2dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,(long const &)*arg6,(long const &)*arg7,(long const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_DiscreteProperty_pushBackLongHdf5Array2dOfValues__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, long jarg6) {
  resqml2_0::DiscreteProperty *arg1 = (resqml2_0::DiscreteProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  long *arg6 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  long temp6 ;
  
  arg1 = (resqml2_0::DiscreteProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (long)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->pushBackLongHdf5Array2dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,(long const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_DiscreteProperty_pushBackLongHdf5Array3dOfValues__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, long jarg7, long jarg8, long jarg9) {
  resqml2_0::DiscreteProperty *arg1 = (resqml2_0::DiscreteProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  long *arg7 = 0 ;
  long *arg8 = 0 ;
  long *arg9 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  long temp7 ;
  long temp8 ;
  long temp9 ;
  
  arg1 = (resqml2_0::DiscreteProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (long)jarg7; 
  arg7 = &temp7; 
  temp8 = (long)jarg8; 
  arg8 = &temp8; 
  temp9 = (long)jarg9; 
  arg9 = &temp9; 
  {
    try {
      (arg1)->pushBackLongHdf5Array3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6,(long const &)*arg7,(long const &)*arg8,(long const &)*arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_DiscreteProperty_pushBackLongHdf5Array3dOfValues__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, long jarg7) {
  resqml2_0::DiscreteProperty *arg1 = (resqml2_0::DiscreteProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  long *arg7 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  long temp7 ;
  
  arg1 = (resqml2_0::DiscreteProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (long)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->pushBackLongHdf5Array3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6,(long const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_DiscreteProperty_pushBackLongHdf5ArrayOfValues__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, long jarg6, long jarg7, long jarg8) {
  resqml2_0::DiscreteProperty *arg1 = (resqml2_0::DiscreteProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  long *arg6 = 0 ;
  long *arg7 = 0 ;
  long *arg8 = 0 ;
  unsigned int temp4 ;
  long temp6 ;
  long temp7 ;
  long temp8 ;
  
  arg1 = (resqml2_0::DiscreteProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (long)jarg6; 
  arg6 = &temp6; 
  temp7 = (long)jarg7; 
  arg7 = &temp7; 
  temp8 = (long)jarg8; 
  arg8 = &temp8; 
  {
    try {
      (arg1)->pushBackLongHdf5ArrayOfValues(arg2,arg3,(unsigned int const &)*arg4,arg5,(long const &)*arg6,(long const &)*arg7,(long const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_DiscreteProperty_pushBackLongHdf5ArrayOfValues__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, long jarg6) {
  resqml2_0::DiscreteProperty *arg1 = (resqml2_0::DiscreteProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  long *arg6 = 0 ;
  unsigned int temp4 ;
  long temp6 ;
  
  arg1 = (resqml2_0::DiscreteProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (long)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->pushBackLongHdf5ArrayOfValues(arg2,arg3,(unsigned int const &)*arg4,arg5,(long const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_DiscreteProperty(void * jarg1) {
  resqml2_0::DiscreteProperty *arg1 = (resqml2_0::DiscreteProperty *) 0 ;
  
  arg1 = (resqml2_0::DiscreteProperty *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_CategoricalProperty_getStringLookupUuid(void * jarg1) {
  char * jresult ;
  resqml2_0::CategoricalProperty *arg1 = (resqml2_0::CategoricalProperty *) 0 ;
  std::string result;
  
  arg1 = (resqml2_0::CategoricalProperty *)jarg1; 
  {
    try {
      result = ((resqml2_0::CategoricalProperty const *)arg1)->getStringLookupUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_CategoricalProperty_getStringLookup(void * jarg1) {
  void * jresult ;
  resqml2_0::CategoricalProperty *arg1 = (resqml2_0::CategoricalProperty *) 0 ;
  resqml2_0::StringTableLookup *result = 0 ;
  
  arg1 = (resqml2_0::CategoricalProperty *)jarg1; 
  {
    try {
      result = (resqml2_0::StringTableLookup *)(arg1)->getStringLookup();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_CategoricalProperty_pushBackLongHdf5Array1dOfValues(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, long jarg5) {
  resqml2_0::CategoricalProperty *arg1 = (resqml2_0::CategoricalProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  resqml2_0::HdfProxy *arg4 = (resqml2_0::HdfProxy *) 0 ;
  long *arg5 = 0 ;
  unsigned int temp3 ;
  long temp5 ;
  
  arg1 = (resqml2_0::CategoricalProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (resqml2_0::HdfProxy *)jarg4; 
  temp5 = (long)jarg5; 
  arg5 = &temp5; 
  {
    try {
      (arg1)->pushBackLongHdf5Array1dOfValues(arg2,(unsigned int const &)*arg3,arg4,(long const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_CategoricalProperty_pushBackLongHdf5Array2dOfValues(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, long jarg6) {
  resqml2_0::CategoricalProperty *arg1 = (resqml2_0::CategoricalProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  long *arg6 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  long temp6 ;
  
  arg1 = (resqml2_0::CategoricalProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (long)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->pushBackLongHdf5Array2dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,arg5,(long const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_CategoricalProperty_pushBackLongHdf5Array3dOfValues(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, long jarg7) {
  resqml2_0::CategoricalProperty *arg1 = (resqml2_0::CategoricalProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  resqml2_0::HdfProxy *arg6 = (resqml2_0::HdfProxy *) 0 ;
  long *arg7 = 0 ;
  unsigned int temp3 ;
  unsigned int temp4 ;
  unsigned int temp5 ;
  long temp7 ;
  
  arg1 = (resqml2_0::CategoricalProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::HdfProxy *)jarg6; 
  temp7 = (long)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->pushBackLongHdf5Array3dOfValues(arg2,(unsigned int const &)*arg3,(unsigned int const &)*arg4,(unsigned int const &)*arg5,arg6,(long const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_resqml2_0_CategoricalProperty_pushBackLongHdf5ArrayOfValues(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, long jarg6) {
  resqml2_0::CategoricalProperty *arg1 = (resqml2_0::CategoricalProperty *) 0 ;
  long *arg2 = (long *) 0 ;
  hsize_t *arg3 = (hsize_t *) 0 ;
  unsigned int *arg4 = 0 ;
  resqml2_0::HdfProxy *arg5 = (resqml2_0::HdfProxy *) 0 ;
  long *arg6 = 0 ;
  unsigned int temp4 ;
  long temp6 ;
  
  arg1 = (resqml2_0::CategoricalProperty *)jarg1; 
  arg2 = (long *)jarg2; 
  arg3 = (hsize_t *)jarg3; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (resqml2_0::HdfProxy *)jarg5; 
  temp6 = (long)jarg6; 
  arg6 = &temp6; 
  {
    try {
      (arg1)->pushBackLongHdf5ArrayOfValues(arg2,arg3,(unsigned int const &)*arg4,arg5,(long const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_CategoricalProperty(void * jarg1) {
  resqml2_0::CategoricalProperty *arg1 = (resqml2_0::CategoricalProperty *) 0 ;
  
  arg1 = (resqml2_0::CategoricalProperty *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_resqml2_0_PropertyKindMapper(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::PropertyKindMapper *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (resqml2_0::PropertyKindMapper *)new resqml2_0::PropertyKindMapper(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_PropertyKindMapper_loadMappingFilesFromDirectory(void * jarg1, char * jarg2) {
  char * jresult ;
  resqml2_0::PropertyKindMapper *arg1 = (resqml2_0::PropertyKindMapper *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (resqml2_0::PropertyKindMapper *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->loadMappingFilesFromDirectory((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_PropertyKindMapper_getUomOfResqmlStandardPropertyKindName(void * jarg1, int jarg2) {
  char * jresult ;
  resqml2_0::PropertyKindMapper *arg1 = (resqml2_0::PropertyKindMapper *) 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::PropertyKindMapper *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((resqml2_0::PropertyKindMapper const *)arg1)->getUomOfResqmlStandardPropertyKindName((gsoap_resqml2_0::resqml2__ResqmlPropertyKind const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_PropertyKindMapper_getApplicationPropertyKindNameFromResqmlStandardPropertyKindName(void * jarg1, int jarg2, char * jarg3) {
  char * jresult ;
  resqml2_0::PropertyKindMapper *arg1 = (resqml2_0::PropertyKindMapper *) 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind temp2 ;
  std::string result;
  
  arg1 = (resqml2_0::PropertyKindMapper *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)jarg2; 
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = ((resqml2_0::PropertyKindMapper const *)arg1)->getApplicationPropertyKindNameFromResqmlStandardPropertyKindName((gsoap_resqml2_0::resqml2__ResqmlPropertyKind const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_resqml2_0_PropertyKindMapper_getResqmlStandardPropertyKindNameFromApplicationPropertyKindName(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  resqml2_0::PropertyKindMapper *arg1 = (resqml2_0::PropertyKindMapper *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind result;
  
  arg1 = (resqml2_0::PropertyKindMapper *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)((resqml2_0::PropertyKindMapper const *)arg1)->getResqmlStandardPropertyKindNameFromApplicationPropertyKindName((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_PropertyKindMapper_getApplicationPropertyKindNameFromResqmlLocalPropertyKindUuid(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  resqml2_0::PropertyKindMapper *arg1 = (resqml2_0::PropertyKindMapper *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  arg1 = (resqml2_0::PropertyKindMapper *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = ((resqml2_0::PropertyKindMapper const *)arg1)->getApplicationPropertyKindNameFromResqmlLocalPropertyKindUuid((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_resqml2_0_PropertyKindMapper_getResqmlLocalPropertyKindUuidFromApplicationPropertyKindName(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  resqml2_0::PropertyKindMapper *arg1 = (resqml2_0::PropertyKindMapper *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  arg1 = (resqml2_0::PropertyKindMapper *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = ((resqml2_0::PropertyKindMapper const *)arg1)->getResqmlLocalPropertyKindUuidFromApplicationPropertyKindName((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_resqml2_0_PropertyKindMapper_addResqmlLocalPropertyKindToEpcDocumentFromApplicationPropertyKindName(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  resqml2_0::PropertyKindMapper *arg1 = (resqml2_0::PropertyKindMapper *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::PropertyKind *result = 0 ;
  
  arg1 = (resqml2_0::PropertyKindMapper *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::PropertyKind *)(arg1)->addResqmlLocalPropertyKindToEpcDocumentFromApplicationPropertyKindName((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_resqml2_0_PropertyKindMapper(void * jarg1) {
  resqml2_0::PropertyKindMapper *arg1 = (resqml2_0::PropertyKindMapper *) 0 ;
  
  arg1 = (resqml2_0::PropertyKindMapper *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_Clear(void * jarg1) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_Add(void * jarg1, void * jarg2) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  witsml1_4_1_1::Wellbore **arg2 = 0 ;
  witsml1_4_1_1::Wellbore *temp2 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Wellbore *)jarg2;
  arg2 = (witsml1_4_1_1::Wellbore **)&temp2; 
  {
    try {
      (arg1)->push_back((witsml1_4_1_1::Wellbore *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  std::vector< witsml1_4_1_1::Wellbore * >::size_type result;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  {
    try {
      result = ((std::vector< witsml1_4_1_1::Wellbore * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WellboreVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  std::vector< witsml1_4_1_1::Wellbore * >::size_type result;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  {
    try {
      result = ((std::vector< witsml1_4_1_1::Wellbore * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  std::vector< witsml1_4_1_1::Wellbore * >::size_type arg2 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (std::vector< witsml1_4_1_1::Wellbore * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreVector__SWIG_0() {
  void * jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *result = 0 ;
  
  {
    try {
      result = (std::vector< witsml1_4_1_1::Wellbore * > *)new std::vector< witsml1_4_1_1::Wellbore * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = 0 ;
  std::vector< witsml1_4_1_1::Wellbore * > *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Wellbore * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< witsml1_4_1_1::Wellbore * > *)new std::vector< witsml1_4_1_1::Wellbore * >((std::vector< witsml1_4_1_1::Wellbore * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WellboreVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< witsml1_4_1_1::Wellbore * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::Wellbore * > *)new_std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Wellbore *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (witsml1_4_1_1::Wellbore *)std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Wellbore **result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (witsml1_4_1_1::Wellbore **) &std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Wellbore **arg3 = 0 ;
  witsml1_4_1_1::Wellbore *temp3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (witsml1_4_1_1::Wellbore *)jarg3;
  arg3 = (witsml1_4_1_1::Wellbore **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__setitem(arg1,arg2,(witsml1_4_1_1::Wellbore *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg2 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Wellbore * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__AddRange(arg1,(std::vector< witsml1_4_1_1::Wellbore * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< witsml1_4_1_1::Wellbore * > *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::Wellbore * > *)std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Wellbore **arg3 = 0 ;
  witsml1_4_1_1::Wellbore *temp3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (witsml1_4_1_1::Wellbore *)jarg3;
  arg3 = (witsml1_4_1_1::Wellbore **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Insert(arg1,arg2,(witsml1_4_1_1::Wellbore *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Wellbore * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__InsertRange(arg1,arg2,(std::vector< witsml1_4_1_1::Wellbore * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WellboreVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  witsml1_4_1_1::Wellbore **arg1 = 0 ;
  int arg2 ;
  witsml1_4_1_1::Wellbore *temp1 = 0 ;
  std::vector< witsml1_4_1_1::Wellbore * > *result = 0 ;
  
  temp1 = (witsml1_4_1_1::Wellbore *)jarg1;
  arg1 = (witsml1_4_1_1::Wellbore **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::Wellbore * > *)std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Repeat((witsml1_4_1_1::Wellbore *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  {
    try {
      std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WellboreVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  int arg2 ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Wellbore * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__SetRange(arg1,arg2,(std::vector< witsml1_4_1_1::Wellbore * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  witsml1_4_1_1::Wellbore **arg2 = 0 ;
  witsml1_4_1_1::Wellbore *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Wellbore *)jarg2;
  arg2 = (witsml1_4_1_1::Wellbore **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Contains(arg1,(witsml1_4_1_1::Wellbore *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  witsml1_4_1_1::Wellbore **arg2 = 0 ;
  witsml1_4_1_1::Wellbore *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Wellbore *)jarg2;
  arg2 = (witsml1_4_1_1::Wellbore **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__IndexOf(arg1,(witsml1_4_1_1::Wellbore *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WellboreVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  witsml1_4_1_1::Wellbore **arg2 = 0 ;
  witsml1_4_1_1::Wellbore *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Wellbore *)jarg2;
  arg2 = (witsml1_4_1_1::Wellbore **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__LastIndexOf(arg1,(witsml1_4_1_1::Wellbore *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WellboreVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  witsml1_4_1_1::Wellbore **arg2 = 0 ;
  witsml1_4_1_1::Wellbore *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Wellbore *)jarg2;
  arg2 = (witsml1_4_1_1::Wellbore **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_witsml1_4_1_1_Wellbore_Sm__Sg__Remove(arg1,(witsml1_4_1_1::Wellbore *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WellboreVector(void * jarg1) {
  std::vector< witsml1_4_1_1::Wellbore * > *arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Wellbore * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_Clear(void * jarg1) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_Add(void * jarg1, void * jarg2) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  witsml1_4_1_1::Trajectory **arg2 = 0 ;
  witsml1_4_1_1::Trajectory *temp2 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Trajectory *)jarg2;
  arg2 = (witsml1_4_1_1::Trajectory **)&temp2; 
  {
    try {
      (arg1)->push_back((witsml1_4_1_1::Trajectory *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TrajectoryVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  std::vector< witsml1_4_1_1::Trajectory * >::size_type result;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  {
    try {
      result = ((std::vector< witsml1_4_1_1::Trajectory * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TrajectoryVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  std::vector< witsml1_4_1_1::Trajectory * >::size_type result;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  {
    try {
      result = ((std::vector< witsml1_4_1_1::Trajectory * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  std::vector< witsml1_4_1_1::Trajectory * >::size_type arg2 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (std::vector< witsml1_4_1_1::Trajectory * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrajectoryVector__SWIG_0() {
  void * jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *result = 0 ;
  
  {
    try {
      result = (std::vector< witsml1_4_1_1::Trajectory * > *)new std::vector< witsml1_4_1_1::Trajectory * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrajectoryVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = 0 ;
  std::vector< witsml1_4_1_1::Trajectory * > *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Trajectory * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< witsml1_4_1_1::Trajectory * > *)new std::vector< witsml1_4_1_1::Trajectory * >((std::vector< witsml1_4_1_1::Trajectory * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TrajectoryVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< witsml1_4_1_1::Trajectory * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::Trajectory * > *)new_std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrajectoryVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Trajectory *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (witsml1_4_1_1::Trajectory *)std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrajectoryVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Trajectory **result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (witsml1_4_1_1::Trajectory **) &std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Trajectory **arg3 = 0 ;
  witsml1_4_1_1::Trajectory *temp3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (witsml1_4_1_1::Trajectory *)jarg3;
  arg3 = (witsml1_4_1_1::Trajectory **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__setitem(arg1,arg2,(witsml1_4_1_1::Trajectory *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg2 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Trajectory * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__AddRange(arg1,(std::vector< witsml1_4_1_1::Trajectory * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrajectoryVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< witsml1_4_1_1::Trajectory * > *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::Trajectory * > *)std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Trajectory **arg3 = 0 ;
  witsml1_4_1_1::Trajectory *temp3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (witsml1_4_1_1::Trajectory *)jarg3;
  arg3 = (witsml1_4_1_1::Trajectory **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Insert(arg1,arg2,(witsml1_4_1_1::Trajectory *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Trajectory * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__InsertRange(arg1,arg2,(std::vector< witsml1_4_1_1::Trajectory * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrajectoryVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  witsml1_4_1_1::Trajectory **arg1 = 0 ;
  int arg2 ;
  witsml1_4_1_1::Trajectory *temp1 = 0 ;
  std::vector< witsml1_4_1_1::Trajectory * > *result = 0 ;
  
  temp1 = (witsml1_4_1_1::Trajectory *)jarg1;
  arg1 = (witsml1_4_1_1::Trajectory **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::Trajectory * > *)std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Repeat((witsml1_4_1_1::Trajectory *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  {
    try {
      std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TrajectoryVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  int arg2 ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Trajectory * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__SetRange(arg1,arg2,(std::vector< witsml1_4_1_1::Trajectory * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TrajectoryVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  witsml1_4_1_1::Trajectory **arg2 = 0 ;
  witsml1_4_1_1::Trajectory *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Trajectory *)jarg2;
  arg2 = (witsml1_4_1_1::Trajectory **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Contains(arg1,(witsml1_4_1_1::Trajectory *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrajectoryVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  witsml1_4_1_1::Trajectory **arg2 = 0 ;
  witsml1_4_1_1::Trajectory *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Trajectory *)jarg2;
  arg2 = (witsml1_4_1_1::Trajectory **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__IndexOf(arg1,(witsml1_4_1_1::Trajectory *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TrajectoryVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  witsml1_4_1_1::Trajectory **arg2 = 0 ;
  witsml1_4_1_1::Trajectory *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Trajectory *)jarg2;
  arg2 = (witsml1_4_1_1::Trajectory **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__LastIndexOf(arg1,(witsml1_4_1_1::Trajectory *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TrajectoryVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  witsml1_4_1_1::Trajectory **arg2 = 0 ;
  witsml1_4_1_1::Trajectory *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Trajectory *)jarg2;
  arg2 = (witsml1_4_1_1::Trajectory **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_witsml1_4_1_1_Trajectory_Sm__Sg__Remove(arg1,(witsml1_4_1_1::Trajectory *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TrajectoryVector(void * jarg1) {
  std::vector< witsml1_4_1_1::Trajectory * > *arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Trajectory * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_Clear(void * jarg1) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_Add(void * jarg1, void * jarg2) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  witsml1_4_1_1::Log **arg2 = 0 ;
  witsml1_4_1_1::Log *temp2 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Log *)jarg2;
  arg2 = (witsml1_4_1_1::Log **)&temp2; 
  {
    try {
      (arg1)->push_back((witsml1_4_1_1::Log *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LogVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  std::vector< witsml1_4_1_1::Log * >::size_type result;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  {
    try {
      result = ((std::vector< witsml1_4_1_1::Log * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LogVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  std::vector< witsml1_4_1_1::Log * >::size_type result;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  {
    try {
      result = ((std::vector< witsml1_4_1_1::Log * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  std::vector< witsml1_4_1_1::Log * >::size_type arg2 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (std::vector< witsml1_4_1_1::Log * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogVector__SWIG_0() {
  void * jresult ;
  std::vector< witsml1_4_1_1::Log * > *result = 0 ;
  
  {
    try {
      result = (std::vector< witsml1_4_1_1::Log * > *)new std::vector< witsml1_4_1_1::Log * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = 0 ;
  std::vector< witsml1_4_1_1::Log * > *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Log * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< witsml1_4_1_1::Log * > *)new std::vector< witsml1_4_1_1::Log * >((std::vector< witsml1_4_1_1::Log * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< witsml1_4_1_1::Log * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::Log * > *)new_std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Log *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (witsml1_4_1_1::Log *)std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Log **result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (witsml1_4_1_1::Log **) &std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Log **arg3 = 0 ;
  witsml1_4_1_1::Log *temp3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (witsml1_4_1_1::Log *)jarg3;
  arg3 = (witsml1_4_1_1::Log **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__setitem(arg1,arg2,(witsml1_4_1_1::Log *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  std::vector< witsml1_4_1_1::Log * > *arg2 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (std::vector< witsml1_4_1_1::Log * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Log * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__AddRange(arg1,(std::vector< witsml1_4_1_1::Log * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< witsml1_4_1_1::Log * > *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::Log * > *)std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::Log **arg3 = 0 ;
  witsml1_4_1_1::Log *temp3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (witsml1_4_1_1::Log *)jarg3;
  arg3 = (witsml1_4_1_1::Log **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Insert(arg1,arg2,(witsml1_4_1_1::Log *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  std::vector< witsml1_4_1_1::Log * > *arg3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< witsml1_4_1_1::Log * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Log * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__InsertRange(arg1,arg2,(std::vector< witsml1_4_1_1::Log * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  witsml1_4_1_1::Log **arg1 = 0 ;
  int arg2 ;
  witsml1_4_1_1::Log *temp1 = 0 ;
  std::vector< witsml1_4_1_1::Log * > *result = 0 ;
  
  temp1 = (witsml1_4_1_1::Log *)jarg1;
  arg1 = (witsml1_4_1_1::Log **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::Log * > *)std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Repeat((witsml1_4_1_1::Log *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  {
    try {
      std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  int arg2 ;
  std::vector< witsml1_4_1_1::Log * > *arg3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< witsml1_4_1_1::Log * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::Log * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__SetRange(arg1,arg2,(std::vector< witsml1_4_1_1::Log * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LogVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  witsml1_4_1_1::Log **arg2 = 0 ;
  witsml1_4_1_1::Log *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Log *)jarg2;
  arg2 = (witsml1_4_1_1::Log **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Contains(arg1,(witsml1_4_1_1::Log *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  witsml1_4_1_1::Log **arg2 = 0 ;
  witsml1_4_1_1::Log *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Log *)jarg2;
  arg2 = (witsml1_4_1_1::Log **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__IndexOf(arg1,(witsml1_4_1_1::Log *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  witsml1_4_1_1::Log **arg2 = 0 ;
  witsml1_4_1_1::Log *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Log *)jarg2;
  arg2 = (witsml1_4_1_1::Log **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__LastIndexOf(arg1,(witsml1_4_1_1::Log *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LogVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  witsml1_4_1_1::Log **arg2 = 0 ;
  witsml1_4_1_1::Log *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  temp2 = (witsml1_4_1_1::Log *)jarg2;
  arg2 = (witsml1_4_1_1::Log **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_witsml1_4_1_1_Log_Sm__Sg__Remove(arg1,(witsml1_4_1_1::Log *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogVector(void * jarg1) {
  std::vector< witsml1_4_1_1::Log * > *arg1 = (std::vector< witsml1_4_1_1::Log * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::Log * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_Clear(void * jarg1) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  {
    try {
      (arg1)->clear();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_Add(void * jarg1, void * jarg2) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  witsml1_4_1_1::FormationMarker **arg2 = 0 ;
  witsml1_4_1_1::FormationMarker *temp2 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  temp2 = (witsml1_4_1_1::FormationMarker *)jarg2;
  arg2 = (witsml1_4_1_1::FormationMarker **)&temp2; 
  {
    try {
      (arg1)->push_back((witsml1_4_1_1::FormationMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FormationMarkerVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  std::vector< witsml1_4_1_1::FormationMarker * >::size_type result;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  {
    try {
      result = ((std::vector< witsml1_4_1_1::FormationMarker * > const *)arg1)->size();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_FormationMarkerVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  std::vector< witsml1_4_1_1::FormationMarker * >::size_type result;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  {
    try {
      result = ((std::vector< witsml1_4_1_1::FormationMarker * > const *)arg1)->capacity();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  std::vector< witsml1_4_1_1::FormationMarker * >::size_type arg2 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (std::vector< witsml1_4_1_1::FormationMarker * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FormationMarkerVector__SWIG_0() {
  void * jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *result = 0 ;
  
  {
    try {
      result = (std::vector< witsml1_4_1_1::FormationMarker * > *)new std::vector< witsml1_4_1_1::FormationMarker * >();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FormationMarkerVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = 0 ;
  std::vector< witsml1_4_1_1::FormationMarker * > *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::FormationMarker * > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< witsml1_4_1_1::FormationMarker * > *)new std::vector< witsml1_4_1_1::FormationMarker * >((std::vector< witsml1_4_1_1::FormationMarker * > const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FormationMarkerVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< witsml1_4_1_1::FormationMarker * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::FormationMarker * > *)new_std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg___SWIG_2(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FormationMarkerVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::FormationMarker *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (witsml1_4_1_1::FormationMarker *)std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__getitemcopy(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FormationMarkerVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::FormationMarker **result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (witsml1_4_1_1::FormationMarker **) &std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__getitem(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::FormationMarker **arg3 = 0 ;
  witsml1_4_1_1::FormationMarker *temp3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (witsml1_4_1_1::FormationMarker *)jarg3;
  arg3 = (witsml1_4_1_1::FormationMarker **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__setitem(arg1,arg2,(witsml1_4_1_1::FormationMarker *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg2 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::FormationMarker * > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__AddRange(arg1,(std::vector< witsml1_4_1_1::FormationMarker * > const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FormationMarkerVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< witsml1_4_1_1::FormationMarker * > *result = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::FormationMarker * > *)std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__GetRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  witsml1_4_1_1::FormationMarker **arg3 = 0 ;
  witsml1_4_1_1::FormationMarker *temp3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (witsml1_4_1_1::FormationMarker *)jarg3;
  arg3 = (witsml1_4_1_1::FormationMarker **)&temp3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Insert(arg1,arg2,(witsml1_4_1_1::FormationMarker *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::FormationMarker * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__InsertRange(arg1,arg2,(std::vector< witsml1_4_1_1::FormationMarker * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__RemoveAt(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__RemoveRange(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FormationMarkerVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  witsml1_4_1_1::FormationMarker **arg1 = 0 ;
  int arg2 ;
  witsml1_4_1_1::FormationMarker *temp1 = 0 ;
  std::vector< witsml1_4_1_1::FormationMarker * > *result = 0 ;
  
  temp1 = (witsml1_4_1_1::FormationMarker *)jarg1;
  arg1 = (witsml1_4_1_1::FormationMarker **)&temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< witsml1_4_1_1::FormationMarker * > *)std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Repeat((witsml1_4_1_1::FormationMarker *const &)*arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  {
    try {
      std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Reverse__SWIG_0(arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormationMarkerVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  int arg2 ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg3 = 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< witsml1_4_1_1::FormationMarker * > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__SetRange(arg1,arg2,(std::vector< witsml1_4_1_1::FormationMarker * > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
      
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FormationMarkerVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  witsml1_4_1_1::FormationMarker **arg2 = 0 ;
  witsml1_4_1_1::FormationMarker *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  temp2 = (witsml1_4_1_1::FormationMarker *)jarg2;
  arg2 = (witsml1_4_1_1::FormationMarker **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Contains(arg1,(witsml1_4_1_1::FormationMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FormationMarkerVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  witsml1_4_1_1::FormationMarker **arg2 = 0 ;
  witsml1_4_1_1::FormationMarker *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  temp2 = (witsml1_4_1_1::FormationMarker *)jarg2;
  arg2 = (witsml1_4_1_1::FormationMarker **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__IndexOf(arg1,(witsml1_4_1_1::FormationMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FormationMarkerVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  witsml1_4_1_1::FormationMarker **arg2 = 0 ;
  witsml1_4_1_1::FormationMarker *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  temp2 = (witsml1_4_1_1::FormationMarker *)jarg2;
  arg2 = (witsml1_4_1_1::FormationMarker **)&temp2; 
  {
    try {
      result = (int)std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__LastIndexOf(arg1,(witsml1_4_1_1::FormationMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FormationMarkerVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  witsml1_4_1_1::FormationMarker **arg2 = 0 ;
  witsml1_4_1_1::FormationMarker *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  temp2 = (witsml1_4_1_1::FormationMarker *)jarg2;
  arg2 = (witsml1_4_1_1::FormationMarker **)&temp2; 
  {
    try {
      result = (bool)std_vector_Sl_witsml1_4_1_1_FormationMarker_Sm__Sg__Remove(arg1,(witsml1_4_1_1::FormationMarker *const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FormationMarkerVector(void * jarg1) {
  std::vector< witsml1_4_1_1::FormationMarker * > *arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *) 0 ;
  
  arg1 = (std::vector< witsml1_4_1_1::FormationMarker * > *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_AbstractObject_getEpcDocument(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::AbstractObject *arg1 = (witsml1_4_1_1::AbstractObject *) 0 ;
  common::EpcDocument *result = 0 ;
  
  arg1 = (witsml1_4_1_1::AbstractObject *)jarg1; 
  {
    try {
      result = (common::EpcDocument *)((witsml1_4_1_1::AbstractObject const *)arg1)->getEpcDocument();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_witsml1_4_1_1_AbstractObject_getXmlTag(void * jarg1) {
  char * jresult ;
  witsml1_4_1_1::AbstractObject *arg1 = (witsml1_4_1_1::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (witsml1_4_1_1::AbstractObject *)jarg1; 
  {
    try {
      result = ((witsml1_4_1_1::AbstractObject const *)arg1)->getXmlTag();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_witsml1_4_1_1_AbstractObject_getTitle(void * jarg1) {
  char * jresult ;
  witsml1_4_1_1::AbstractObject *arg1 = (witsml1_4_1_1::AbstractObject *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (witsml1_4_1_1::AbstractObject *)jarg1; 
  {
    try {
      result = (std::string *) &((witsml1_4_1_1::AbstractObject const *)arg1)->getTitle();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_witsml1_4_1_1_AbstractObject_getUuid(void * jarg1) {
  char * jresult ;
  witsml1_4_1_1::AbstractObject *arg1 = (witsml1_4_1_1::AbstractObject *) 0 ;
  std::string result;
  
  arg1 = (witsml1_4_1_1::AbstractObject *)jarg1; 
  {
    try {
      result = ((witsml1_4_1_1::AbstractObject const *)arg1)->getUuid();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_witsml1_4_1_1_AbstractObject_getCreation(void * jarg1) {
  long long jresult ;
  witsml1_4_1_1::AbstractObject *arg1 = (witsml1_4_1_1::AbstractObject *) 0 ;
  time_t result;
  
  arg1 = (witsml1_4_1_1::AbstractObject *)jarg1; 
  {
    try {
      result = (time_t)((witsml1_4_1_1::AbstractObject const *)arg1)->getCreation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_witsml1_4_1_1_AbstractObject_getLastUpdate(void * jarg1) {
  long long jresult ;
  witsml1_4_1_1::AbstractObject *arg1 = (witsml1_4_1_1::AbstractObject *) 0 ;
  time_t result;
  
  arg1 = (witsml1_4_1_1::AbstractObject *)jarg1; 
  {
    try {
      result = (time_t)((witsml1_4_1_1::AbstractObject const *)arg1)->getLastUpdate();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_AbstractObject_getCoordinateReferenceSystem(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::AbstractObject *arg1 = (witsml1_4_1_1::AbstractObject *) 0 ;
  witsml1_4_1_1::CoordinateReferenceSystem *result = 0 ;
  
  arg1 = (witsml1_4_1_1::AbstractObject *)jarg1; 
  {
    try {
      result = (witsml1_4_1_1::CoordinateReferenceSystem *)((witsml1_4_1_1::AbstractObject const *)arg1)->getCoordinateReferenceSystem();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_witsml1_4_1_1_AbstractObject(void * jarg1) {
  witsml1_4_1_1::AbstractObject *arg1 = (witsml1_4_1_1::AbstractObject *) 0 ;
  
  arg1 = (witsml1_4_1_1::AbstractObject *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_witsml1_4_1_1_CoordinateReferenceSystem(void * jarg1) {
  witsml1_4_1_1::CoordinateReferenceSystem *arg1 = (witsml1_4_1_1::CoordinateReferenceSystem *) 0 ;
  
  arg1 = (witsml1_4_1_1::CoordinateReferenceSystem *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Well_getWellbores(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  std::vector< witsml1_4_1_1::Wellbore * > *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  {
    try {
      result = (std::vector< witsml1_4_1_1::Wellbore * > *) &((witsml1_4_1_1::Well const *)arg1)->getWellbores();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Well_createWellbore__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  witsml1_4_1_1::Wellbore *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (witsml1_4_1_1::Wellbore *)(arg1)->createWellbore((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Well_createWellbore__SWIG_1(void * jarg1, char * jarg2, char * jarg3, int jarg4, unsigned int jarg5, int jarg6, int jarg7, unsigned int jarg8, char * jarg9, long long jarg10, long long jarg11, char * jarg12) {
  void * jresult ;
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellStatus arg4 ;
  bool *arg5 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellPurpose arg6 ;
  gsoap_witsml1_4_1_1::witsml1__WellboreType arg7 ;
  bool *arg8 = 0 ;
  std::string *arg9 = 0 ;
  time_t *arg10 = 0 ;
  time_t *arg11 = 0 ;
  std::string *arg12 = 0 ;
  bool temp5 ;
  bool temp8 ;
  time_t temp10 ;
  time_t temp11 ;
  witsml1_4_1_1::Wellbore *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (gsoap_witsml1_4_1_1::witsml1__WellStatus)jarg4; 
  temp5 = jarg5 ? true : false; 
  arg5 = &temp5; 
  arg6 = (gsoap_witsml1_4_1_1::witsml1__WellPurpose)jarg6; 
  arg7 = (gsoap_witsml1_4_1_1::witsml1__WellboreType)jarg7; 
  temp8 = jarg8 ? true : false; 
  arg8 = &temp8; 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  temp10 = (time_t)jarg10; 
  arg10 = &temp10; 
  temp11 = (time_t)jarg11; 
  arg11 = &temp11; 
  if (!jarg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg12_str(jarg12);
  arg12 = &arg12_str; 
  {
    try {
      result = (witsml1_4_1_1::Wellbore *)(arg1)->createWellbore((std::string const &)*arg2,(std::string const &)*arg3,arg4,(bool const &)*arg5,arg6,arg7,(bool const &)*arg8,(std::string const &)*arg9,(time_t const &)*arg10,(time_t const &)*arg11,(std::string const &)*arg12);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Well_setOperator(void * jarg1, char * jarg2) {
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setOperator((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_witsml1_4_1_1_Well_getWellHeadEastingLocationValue(void * jarg1) {
  double jresult ;
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  double result;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  {
    try {
      result = (double)(arg1)->getWellHeadEastingLocationValue();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Well_getWellHeadEastingLocationUom(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom result;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__LengthUom)(arg1)->getWellHeadEastingLocationUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_witsml1_4_1_1_Well_getWellHeadNorthingLocationValue(void * jarg1) {
  double jresult ;
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  double result;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  {
    try {
      result = (double)(arg1)->getWellHeadNorthingLocationValue();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Well_getWellHeadNorthingLocationUom(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom result;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__LengthUom)(arg1)->getWellHeadNorthingLocationUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Well_setEastingNorthingLocation(void * jarg1, int jarg2, double jarg3, double jarg4, void * jarg5) {
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  witsml1_4_1_1::CoordinateReferenceSystem *arg5 = (witsml1_4_1_1::CoordinateReferenceSystem *) 0 ;
  double temp3 ;
  double temp4 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  arg2 = (gsoap_witsml1_4_1_1::witsml1__LengthUom)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  arg5 = (witsml1_4_1_1::CoordinateReferenceSystem *)jarg5; 
  {
    try {
      (arg1)->setEastingNorthingLocation(arg2,(double const &)*arg3,(double const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Well_setWestingSouthingLocation(void * jarg1, int jarg2, double jarg3, double jarg4, void * jarg5) {
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  witsml1_4_1_1::CoordinateReferenceSystem *arg5 = (witsml1_4_1_1::CoordinateReferenceSystem *) 0 ;
  double temp3 ;
  double temp4 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  arg2 = (gsoap_witsml1_4_1_1::witsml1__LengthUom)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  arg5 = (witsml1_4_1_1::CoordinateReferenceSystem *)jarg5; 
  {
    try {
      (arg1)->setWestingSouthingLocation(arg2,(double const &)*arg3,(double const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Well_setProjectedXProjectedYLocation(void * jarg1, int jarg2, double jarg3, double jarg4, void * jarg5) {
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  witsml1_4_1_1::CoordinateReferenceSystem *arg5 = (witsml1_4_1_1::CoordinateReferenceSystem *) 0 ;
  double temp3 ;
  double temp4 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  arg2 = (gsoap_witsml1_4_1_1::witsml1__LengthUom)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  arg5 = (witsml1_4_1_1::CoordinateReferenceSystem *)jarg5; 
  {
    try {
      (arg1)->setProjectedXProjectedYLocation(arg2,(double const &)*arg3,(double const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Well_pushBackDatum__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4, unsigned int jarg5, int jarg6, double jarg7) {
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__ElevCodeEnum arg4 ;
  unsigned int *arg5 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom arg6 ;
  double *arg7 = 0 ;
  unsigned int temp5 ;
  double temp7 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (gsoap_witsml1_4_1_1::witsml1__ElevCodeEnum)jarg4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  arg6 = (gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom)jarg6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  {
    try {
      (arg1)->pushBackDatum((std::string const &)*arg2,(std::string const &)*arg3,arg4,(unsigned int const &)*arg5,arg6,(double const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Well_pushBackDatum__SWIG_1(void * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5, char * jarg6, char * jarg7) {
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__ElevCodeEnum arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (gsoap_witsml1_4_1_1::witsml1__ElevCodeEnum)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  {
    try {
      (arg1)->pushBackDatum((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_witsml1_4_1_1_Well_getDatumCount(void * jarg1) {
  unsigned int jresult ;
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  unsigned int result;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  {
    try {
      result = (unsigned int)((witsml1_4_1_1::Well const *)arg1)->getDatumCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_witsml1_4_1_1_Well(void * jarg1) {
  witsml1_4_1_1::Well *arg1 = (witsml1_4_1_1::Well *) 0 ;
  
  arg1 = (witsml1_4_1_1::Well *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_createTrajectory__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  witsml1_4_1_1::Trajectory *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (witsml1_4_1_1::Trajectory *)(arg1)->createTrajectory((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_createTrajectory__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, long long jarg5, long long jarg6, char * jarg7) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  time_t *arg5 = 0 ;
  time_t *arg6 = 0 ;
  std::string *arg7 = 0 ;
  time_t temp5 ;
  time_t temp6 ;
  witsml1_4_1_1::Trajectory *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (time_t)jarg5; 
  arg5 = &temp5; 
  temp6 = (time_t)jarg6; 
  arg6 = &temp6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  {
    try {
      result = (witsml1_4_1_1::Trajectory *)(arg1)->createTrajectory((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(time_t const &)*arg5,(time_t const &)*arg6,(std::string const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_createLog__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__LogIndexType arg4 ;
  std::string *arg5 = 0 ;
  witsml1_4_1_1::Log *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (gsoap_witsml1_4_1_1::witsml1__LogIndexType)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (witsml1_4_1_1::Log *)(arg1)->createLog((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_createLog__SWIG_1(void * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5, char * jarg6, long long jarg7, long long jarg8, char * jarg9) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__LogIndexType arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  time_t *arg7 = 0 ;
  time_t *arg8 = 0 ;
  std::string *arg9 = 0 ;
  time_t temp7 ;
  time_t temp8 ;
  witsml1_4_1_1::Log *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (gsoap_witsml1_4_1_1::witsml1__LogIndexType)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  temp7 = (time_t)jarg7; 
  arg7 = &temp7; 
  temp8 = (time_t)jarg8; 
  arg8 = &temp8; 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  {
    try {
      result = (witsml1_4_1_1::Log *)(arg1)->createLog((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,(time_t const &)*arg7,(time_t const &)*arg8,(std::string const &)*arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_createFormationMarker__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, int jarg5, double jarg6) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom arg5 ;
  double *arg6 = 0 ;
  unsigned int temp4 ;
  double temp6 ;
  witsml1_4_1_1::FormationMarker *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom)jarg5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  {
    try {
      result = (witsml1_4_1_1::FormationMarker *)(arg1)->createFormationMarker((std::string const &)*arg2,(std::string const &)*arg3,(unsigned int const &)*arg4,arg5,(double const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_createFormationMarker__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, int jarg5, double jarg6, unsigned int jarg7, int jarg8, double jarg9, int jarg10, double jarg11, int jarg12, double jarg13, char * jarg14, long long jarg15, long long jarg16, char * jarg17) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom arg5 ;
  double *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom arg8 ;
  double *arg9 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom arg10 ;
  double *arg11 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom arg12 ;
  double *arg13 = 0 ;
  std::string *arg14 = 0 ;
  time_t *arg15 = 0 ;
  time_t *arg16 = 0 ;
  std::string *arg17 = 0 ;
  unsigned int temp4 ;
  double temp6 ;
  unsigned int temp7 ;
  double temp9 ;
  double temp11 ;
  double temp13 ;
  time_t temp15 ;
  time_t temp16 ;
  witsml1_4_1_1::FormationMarker *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (unsigned int)jarg4; 
  arg4 = &temp4; 
  arg5 = (gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom)jarg5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  arg8 = (gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom)jarg8; 
  temp9 = (double)jarg9; 
  arg9 = &temp9; 
  arg10 = (gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom)jarg10; 
  temp11 = (double)jarg11; 
  arg11 = &temp11; 
  arg12 = (gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom)jarg12; 
  temp13 = (double)jarg13; 
  arg13 = &temp13; 
  if (!jarg14) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg14_str(jarg14);
  arg14 = &arg14_str; 
  temp15 = (time_t)jarg15; 
  arg15 = &temp15; 
  temp16 = (time_t)jarg16; 
  arg16 = &temp16; 
  if (!jarg17) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg17_str(jarg17);
  arg17 = &arg17_str; 
  {
    try {
      result = (witsml1_4_1_1::FormationMarker *)(arg1)->createFormationMarker((std::string const &)*arg2,(std::string const &)*arg3,(unsigned int const &)*arg4,arg5,(double const &)*arg6,(unsigned int const &)*arg7,arg8,(double const &)*arg9,arg10,(double const &)*arg11,arg12,(double const &)*arg13,(std::string const &)*arg14,(time_t const &)*arg15,(time_t const &)*arg16,(std::string const &)*arg17);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_getWell(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  witsml1_4_1_1::Well *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  {
    try {
      result = (witsml1_4_1_1::Well *)(arg1)->getWell();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_getResqmlWellboreFeature(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  resqml2_0::WellboreFeature *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  {
    try {
      result = (resqml2_0::WellboreFeature *)(arg1)->getResqmlWellboreFeature();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_getTrajectories(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  std::vector< witsml1_4_1_1::Trajectory * > *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  {
    try {
      result = (std::vector< witsml1_4_1_1::Trajectory * > *) &((witsml1_4_1_1::Wellbore const *)arg1)->getTrajectories();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_getLogs(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  std::vector< witsml1_4_1_1::Log * > *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  {
    try {
      result = (std::vector< witsml1_4_1_1::Log * > *) &((witsml1_4_1_1::Wellbore const *)arg1)->getLogs();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_getFormationMarkers(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  std::vector< witsml1_4_1_1::FormationMarker * > *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  {
    try {
      result = (std::vector< witsml1_4_1_1::FormationMarker * > *) &((witsml1_4_1_1::Wellbore const *)arg1)->getFormationMarkers();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_setShape(void * jarg1, int jarg2) {
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellboreShape *arg2 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellboreShape temp2 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  temp2 = (gsoap_witsml1_4_1_1::witsml1__WellboreShape)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->setShape((gsoap_witsml1_4_1_1::witsml1__WellboreShape const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_witsml1_4_1_1_Wellbore(void * jarg1) {
  witsml1_4_1_1::Wellbore *arg1 = (witsml1_4_1_1::Wellbore *) 0 ;
  
  arg1 = (witsml1_4_1_1::Wellbore *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getMdDatumElevation(void * jarg1) {
  double jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  double result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (double)(arg1)->getMdDatumElevation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getMdDatumElevationUom(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom)(arg1)->getMdDatumElevationUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getMdDatumName(void * jarg1) {
  char * jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  std::string result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (arg1)->getMdDatumName();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getTrajectoryStationCount(void * jarg1) {
  unsigned int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  unsigned int result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (unsigned int)((witsml1_4_1_1::Trajectory const *)arg1)->getTrajectoryStationCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getMds(void * jarg1, void * jarg2) {
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      ((witsml1_4_1_1::Trajectory const *)arg1)->getMds(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getMdUom(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom)((witsml1_4_1_1::Trajectory const *)arg1)->getMdUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getInclinometries(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (unsigned int)((witsml1_4_1_1::Trajectory const *)arg1)->getInclinometries(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getInclinometryUom(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom)((witsml1_4_1_1::Trajectory const *)arg1)->getInclinometryUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getAzimuths(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (unsigned int)((witsml1_4_1_1::Trajectory const *)arg1)->getAzimuths(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getAzimuthUom(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom)((witsml1_4_1_1::Trajectory const *)arg1)->getAzimuthUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getAzimuthReference(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__AziRef result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__AziRef)((witsml1_4_1_1::Trajectory const *)arg1)->getAzimuthReference();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getEastings(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (unsigned int)((witsml1_4_1_1::Trajectory const *)arg1)->getEastings(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getEastingUom(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__LengthUom)((witsml1_4_1_1::Trajectory const *)arg1)->getEastingUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getNorthings(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (unsigned int)((witsml1_4_1_1::Trajectory const *)arg1)->getNorthings(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getNorthingUom(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__LengthUom)((witsml1_4_1_1::Trajectory const *)arg1)->getNorthingUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getTvds(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (unsigned int)((witsml1_4_1_1::Trajectory const *)arg1)->getTvds(arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getTvdUom(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom result;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom)((witsml1_4_1_1::Trajectory const *)arg1)->getTvdUom();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_setTrajectoryStations(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, void * jarg5, int jarg6, void * jarg7, int jarg8, void * jarg9) {
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom arg4 ;
  double *arg5 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom arg6 ;
  double *arg7 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__AziRef arg8 ;
  double *arg9 = (double *) 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom)jarg4; 
  arg5 = (double *)jarg5; 
  arg6 = (gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom)jarg6; 
  arg7 = (double *)jarg7; 
  arg8 = (gsoap_witsml1_4_1_1::witsml1__AziRef)jarg8; 
  arg9 = (double *)jarg9; 
  {
    try {
      (arg1)->setTrajectoryStations((unsigned int const &)*arg2,(unsigned int const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_setEastingNorthingTrajectoryStations(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, void * jarg5, unsigned int jarg6, int jarg7, void * jarg8, int jarg9, void * jarg10, int jarg11, void * jarg12, int jarg13, void * jarg14, void * jarg15, void * jarg16) {
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned int *arg6 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom arg7 ;
  double *arg8 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom arg9 ;
  double *arg10 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__AziRef arg11 ;
  double *arg12 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom arg13 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  witsml1_4_1_1::CoordinateReferenceSystem *arg16 = (witsml1_4_1_1::CoordinateReferenceSystem *) 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  unsigned int temp6 ;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom)jarg4; 
  arg5 = (double *)jarg5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  arg7 = (gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom)jarg7; 
  arg8 = (double *)jarg8; 
  arg9 = (gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom)jarg9; 
  arg10 = (double *)jarg10; 
  arg11 = (gsoap_witsml1_4_1_1::witsml1__AziRef)jarg11; 
  arg12 = (double *)jarg12; 
  arg13 = (gsoap_witsml1_4_1_1::witsml1__LengthUom)jarg13; 
  arg14 = (double *)jarg14; 
  arg15 = (double *)jarg15; 
  arg16 = (witsml1_4_1_1::CoordinateReferenceSystem *)jarg16; 
  {
    try {
      (arg1)->setEastingNorthingTrajectoryStations((unsigned int const &)*arg2,(unsigned int const &)*arg3,arg4,arg5,(unsigned int const &)*arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_setWestingSouthingTrajectoryStations(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, void * jarg5, unsigned int jarg6, int jarg7, void * jarg8, int jarg9, void * jarg10, int jarg11, void * jarg12, int jarg13, void * jarg14, void * jarg15, void * jarg16) {
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned int *arg6 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom arg7 ;
  double *arg8 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom arg9 ;
  double *arg10 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__AziRef arg11 ;
  double *arg12 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom arg13 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  witsml1_4_1_1::CoordinateReferenceSystem *arg16 = (witsml1_4_1_1::CoordinateReferenceSystem *) 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  unsigned int temp6 ;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom)jarg4; 
  arg5 = (double *)jarg5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  arg7 = (gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom)jarg7; 
  arg8 = (double *)jarg8; 
  arg9 = (gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom)jarg9; 
  arg10 = (double *)jarg10; 
  arg11 = (gsoap_witsml1_4_1_1::witsml1__AziRef)jarg11; 
  arg12 = (double *)jarg12; 
  arg13 = (gsoap_witsml1_4_1_1::witsml1__LengthUom)jarg13; 
  arg14 = (double *)jarg14; 
  arg15 = (double *)jarg15; 
  arg16 = (witsml1_4_1_1::CoordinateReferenceSystem *)jarg16; 
  {
    try {
      (arg1)->setWestingSouthingTrajectoryStations((unsigned int const &)*arg2,(unsigned int const &)*arg3,arg4,arg5,(unsigned int const &)*arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_setProjectedXProjectedYTrajectoryStations(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, void * jarg5, unsigned int jarg6, int jarg7, void * jarg8, int jarg9, void * jarg10, int jarg11, void * jarg12, int jarg13, void * jarg14, void * jarg15, void * jarg16) {
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned int *arg6 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom arg7 ;
  double *arg8 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom arg9 ;
  double *arg10 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__AziRef arg11 ;
  double *arg12 = (double *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom arg13 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  witsml1_4_1_1::CoordinateReferenceSystem *arg16 = (witsml1_4_1_1::CoordinateReferenceSystem *) 0 ;
  unsigned int temp2 ;
  unsigned int temp3 ;
  unsigned int temp6 ;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  arg4 = (gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom)jarg4; 
  arg5 = (double *)jarg5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  arg7 = (gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom)jarg7; 
  arg8 = (double *)jarg8; 
  arg9 = (gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom)jarg9; 
  arg10 = (double *)jarg10; 
  arg11 = (gsoap_witsml1_4_1_1::witsml1__AziRef)jarg11; 
  arg12 = (double *)jarg12; 
  arg13 = (gsoap_witsml1_4_1_1::witsml1__LengthUom)jarg13; 
  arg14 = (double *)jarg14; 
  arg15 = (double *)jarg15; 
  arg16 = (witsml1_4_1_1::CoordinateReferenceSystem *)jarg16; 
  {
    try {
      (arg1)->setProjectedXProjectedYTrajectoryStations((unsigned int const &)*arg2,(unsigned int const &)*arg3,arg4,arg5,(unsigned int const &)*arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getWellbore(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  witsml1_4_1_1::Wellbore *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (witsml1_4_1_1::Wellbore *)(arg1)->getWellbore();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_getResqmlWellboreTrajectoryRepresentation(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      result = (resqml2_0::WellboreTrajectoryRepresentation *)((witsml1_4_1_1::Trajectory const *)arg1)->getResqmlWellboreTrajectoryRepresentation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_witsml1_4_1_1_Trajectory(void * jarg1) {
  witsml1_4_1_1::Trajectory *arg1 = (witsml1_4_1_1::Trajectory *) 0 ;
  
  arg1 = (witsml1_4_1_1::Trajectory *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getIndexType(void * jarg1) {
  int jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LogIndexType result;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__LogIndexType)(arg1)->getIndexType();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getIndexMnemonic(void * jarg1) {
  char * jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  std::string result;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  {
    try {
      result = (arg1)->getIndexMnemonic();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getData(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  {
    try {
      result = (std::vector< std::string > *) &((witsml1_4_1_1::Log const *)arg1)->getData();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getMnemonicSet(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  {
    try {
      result = (arg1)->getMnemonicSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Log_setValues(void * jarg1, char * jarg2, char * jarg3, char * jarg4, double jarg5, double jarg6, double jarg7, int jarg8, char * jarg9, char * jarg10, void * jarg11) {
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__LogIndexDirection arg8 ;
  std::string *arg9 = 0 ;
  std::string *arg10 = 0 ;
  std::vector< std::string > *arg11 = 0 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  arg8 = (gsoap_witsml1_4_1_1::witsml1__LogIndexDirection)jarg8; 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  if (!jarg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg10_str(jarg10);
  arg10 = &arg10_str; 
  arg11 = (std::vector< std::string > *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setValues((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,arg8,(std::string const &)*arg9,(std::string const &)*arg10,(std::vector< std::string > const &)*arg11);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getLogCurveCount(void * jarg1) {
  unsigned int jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  unsigned int result;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  {
    try {
      result = (unsigned int)((witsml1_4_1_1::Log const *)arg1)->getLogCurveCount();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getLogCurveMnemonic(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::string result;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((witsml1_4_1_1::Log const *)arg1)->getLogCurveMnemonic((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getLogCurveDataType(void * jarg1, unsigned int jarg2) {
  int jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  gsoap_witsml1_4_1_1::witsml1__LogDataType result;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (gsoap_witsml1_4_1_1::witsml1__LogDataType)((witsml1_4_1_1::Log const *)arg1)->getLogCurveDataType((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getLogCurveUom(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::string result;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((witsml1_4_1_1::Log const *)arg1)->getLogCurveUom((unsigned int const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Log_pushBackLogCurveInfo__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  std::string *arg2 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__LogDataType arg3 ;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (gsoap_witsml1_4_1_1::witsml1__LogDataType)jarg3; 
  {
    try {
      (arg1)->pushBackLogCurveInfo((std::string const &)*arg2,arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_witsml1_4_1_1_Log_pushBackLogCurveInfo__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, int jarg6, char * jarg7, double jarg8, double jarg9, char * jarg10, int jarg11, double jarg12, int jarg13, int jarg14) {
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int *arg6 = 0 ;
  std::string *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  std::string *arg10 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__PerLengthUom arg11 ;
  double *arg12 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__LogTraceOrigin arg13 ;
  gsoap_witsml1_4_1_1::witsml1__LogDataType arg14 ;
  int temp6 ;
  double temp8 ;
  double temp9 ;
  double temp12 ;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  temp6 = (int)jarg6; 
  arg6 = &temp6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  temp8 = (double)jarg8; 
  arg8 = &temp8; 
  temp9 = (double)jarg9; 
  arg9 = &temp9; 
  if (!jarg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg10_str(jarg10);
  arg10 = &arg10_str; 
  arg11 = (gsoap_witsml1_4_1_1::witsml1__PerLengthUom)jarg11; 
  temp12 = (double)jarg12; 
  arg12 = &temp12; 
  arg13 = (gsoap_witsml1_4_1_1::witsml1__LogTraceOrigin)jarg13; 
  arg14 = (gsoap_witsml1_4_1_1::witsml1__LogDataType)jarg14; 
  {
    try {
      (arg1)->pushBackLogCurveInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(int const &)*arg6,(std::string const &)*arg7,(double const &)*arg8,(double const &)*arg9,(std::string const &)*arg10,arg11,(double const &)*arg12,arg13,arg14);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getWellbore(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  witsml1_4_1_1::Wellbore *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  {
    try {
      result = (witsml1_4_1_1::Wellbore *)(arg1)->getWellbore();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_Log_getResqmlWellboreFrameRepresentation(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  resqml2_0::WellboreFrameRepresentation *result = 0 ;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  {
    try {
      result = (resqml2_0::WellboreFrameRepresentation *)((witsml1_4_1_1::Log const *)arg1)->getResqmlWellboreFrameRepresentation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_witsml1_4_1_1_Log(void * jarg1) {
  witsml1_4_1_1::Log *arg1 = (witsml1_4_1_1::Log *) 0 ;
  
  arg1 = (witsml1_4_1_1::Log *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_FormationMarker_getWellbore(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::FormationMarker *arg1 = (witsml1_4_1_1::FormationMarker *) 0 ;
  witsml1_4_1_1::Wellbore *result = 0 ;
  
  arg1 = (witsml1_4_1_1::FormationMarker *)jarg1; 
  {
    try {
      result = (witsml1_4_1_1::Wellbore *)(arg1)->getWellbore();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_witsml1_4_1_1_FormationMarker_getResqmlWellboreMarkerFrameRepresentation(void * jarg1) {
  void * jresult ;
  witsml1_4_1_1::FormationMarker *arg1 = (witsml1_4_1_1::FormationMarker *) 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *result = 0 ;
  
  arg1 = (witsml1_4_1_1::FormationMarker *)jarg1; 
  {
    try {
      result = (resqml2_0::WellboreMarkerFrameRepresentation *)((witsml1_4_1_1::FormationMarker const *)arg1)->getResqmlWellboreMarkerFrameRepresentation();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_witsml1_4_1_1_FormationMarker(void * jarg1) {
  witsml1_4_1_1::FormationMarker *arg1 = (witsml1_4_1_1::FormationMarker *) 0 ;
  
  arg1 = (witsml1_4_1_1::FormationMarker *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_common_EpcDocument__SWIG_0(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  common::EpcDocument *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try {
      result = (common::EpcDocument *)new common::EpcDocument((std::string const &)*arg1);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_common_EpcDocument__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  common::EpcDocument *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (common::EpcDocument *)new common::EpcDocument((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_common_EpcDocument_serialize(void * jarg1) {
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      (arg1)->serialize();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_common_EpcDocument_deserialize(void * jarg1) {
  char * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (arg1)->deserialize();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_common_EpcDocument_close(void * jarg1) {
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      (arg1)->close();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_common_EpcDocument_getStorageDirectory(void * jarg1) {
  char * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getStorageDirectory();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_common_EpcDocument_getName(void * jarg1) {
  char * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getName();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getPropertyKindMapper(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::PropertyKindMapper *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (resqml2_0::PropertyKindMapper *)((common::EpcDocument const *)arg1)->getPropertyKindMapper();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_common_EpcDocument_getResqmlUnitOfMeasure(void * jarg1, char * jarg2) {
  int jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlUom result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (gsoap_resqml2_0::resqml2__ResqmlUom)((common::EpcDocument const *)arg1)->getResqmlUnitOfMeasure((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_common_EpcDocument_getResqmlStandardPropertyKindName(void * jarg1, int jarg2) {
  char * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind *arg2 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind temp2 ;
  std::string result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  temp2 = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getResqmlStandardPropertyKindName((gsoap_resqml2_0::resqml2__ResqmlPropertyKind const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_common_EpcDocument_getWitsmlLengthUom(void * jarg1, int jarg2) {
  char * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom *arg2 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__LengthUom temp2 ;
  std::string result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  temp2 = (gsoap_witsml1_4_1_1::witsml1__LengthUom)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getWitsmlLengthUom((gsoap_witsml1_4_1_1::witsml1__LengthUom const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_common_EpcDocument_getWitsmlWellVerticalCoordinateUom(void * jarg1, int jarg2) {
  char * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom *arg2 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom temp2 ;
  std::string result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  temp2 = (gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getWitsmlWellVerticalCoordinateUom((gsoap_witsml1_4_1_1::witsml1__WellVerticalCoordinateUom const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_common_EpcDocument_getWitsmlMeasuredDepthUom(void * jarg1, int jarg2) {
  char * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom *arg2 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom temp2 ;
  std::string result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  temp2 = (gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getWitsmlMeasuredDepthUom((gsoap_witsml1_4_1_1::witsml1__MeasuredDepthUom const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_common_EpcDocument_getWitsmlPlaneAngleUom(void * jarg1, int jarg2) {
  char * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom *arg2 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom temp2 ;
  std::string result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  temp2 = (gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getWitsmlPlaneAngleUom((gsoap_witsml1_4_1_1::witsml1__PlaneAngleUom const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getLocalDepth3dCrsSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::LocalDepth3dCrs * > *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (std::vector< resqml2_0::LocalDepth3dCrs * > *) &((common::EpcDocument const *)arg1)->getLocalDepth3dCrsSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getLocalTime3dCrsSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::LocalTime3dCrs * > *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (std::vector< resqml2_0::LocalTime3dCrs * > *) &((common::EpcDocument const *)arg1)->getLocalTime3dCrsSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getStratigraphicColumnSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::StratigraphicColumn * > *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (std::vector< resqml2_0::StratigraphicColumn * > *) &((common::EpcDocument const *)arg1)->getStratigraphicColumnSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getFaultSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::Fault * > *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (std::vector< resqml2_0::Fault * > *) &((common::EpcDocument const *)arg1)->getFaultSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getFractureSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::Fracture * > *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (std::vector< resqml2_0::Fracture * > *) &((common::EpcDocument const *)arg1)->getFractureSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getFaultPolylineSetRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getFaultPolylineSetRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::PolylineSetRepresentation * >((const std::vector< resqml2_0::PolylineSetRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getFracturePolylineSetRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getFracturePolylineSetRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::PolylineSetRepresentation * >((const std::vector< resqml2_0::PolylineSetRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getFaultTriangulatedSetRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getFaultTriangulatedSetRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::TriangulatedSetRepresentation * >((const std::vector< resqml2_0::TriangulatedSetRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getFractureTriangulatedSetRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getFractureTriangulatedSetRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::TriangulatedSetRepresentation * >((const std::vector< resqml2_0::TriangulatedSetRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getHorizonSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::Horizon * > *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (std::vector< resqml2_0::Horizon * > *) &((common::EpcDocument const *)arg1)->getHorizonSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getHorizonGrid2dSetRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::Grid2dSetRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getHorizonGrid2dSetRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::Grid2dSetRepresentation * >((const std::vector< resqml2_0::Grid2dSetRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getHorizonGrid2dRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::Grid2dRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getHorizonGrid2dRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::Grid2dRepresentation * >((const std::vector< resqml2_0::Grid2dRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getHorizonPolylineRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::PolylineRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getHorizonPolylineRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::PolylineRepresentation * >((const std::vector< resqml2_0::PolylineRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getHorizonPolylineSetRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::PolylineSetRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getHorizonPolylineSetRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::PolylineSetRepresentation * >((const std::vector< resqml2_0::PolylineSetRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getHorizonTriangulatedSetRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getHorizonTriangulatedSetRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::TriangulatedSetRepresentation * >((const std::vector< resqml2_0::TriangulatedSetRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getAllTriangulatedSetRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = (std::vector< resqml2_0::TriangulatedSetRepresentation * > *) &((common::EpcDocument const *)arg1)->getAllTriangulatedSetRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getUnclassifiedTriangulatedSetRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::TriangulatedSetRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getUnclassifiedTriangulatedSetRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::TriangulatedSetRepresentation * >((const std::vector< resqml2_0::TriangulatedSetRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getSeismicLineSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::SeismicLineFeature * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getSeismicLineSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::SeismicLineFeature * >((const std::vector< resqml2_0::SeismicLineFeature * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getWellboreSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::WellboreFeature * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getWellboreSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::WellboreFeature * >((const std::vector< resqml2_0::WellboreFeature * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getWellboreCubicParamLineTrajRepSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::WellboreTrajectoryRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getWellboreCubicParamLineTrajRepSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::WellboreTrajectoryRepresentation * >((const std::vector< resqml2_0::WellboreTrajectoryRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getHdfProxySet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::HdfProxy * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getHdfProxySet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::HdfProxy * >((const std::vector< resqml2_0::HdfProxy * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getIjkGridRepresentationSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::IjkGridRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getIjkGridRepresentationSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::IjkGridRepresentation * >((const std::vector< resqml2_0::IjkGridRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getIjkParametricGridRepresentationSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::IjkGridRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getIjkParametricGridRepresentationSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::IjkGridRepresentation * >((const std::vector< resqml2_0::IjkGridRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getIjkSeismicCubeGridRepresentationSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::IjkGridRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getIjkSeismicCubeGridRepresentationSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::IjkGridRepresentation * >((const std::vector< resqml2_0::IjkGridRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getUnstructuredGridRepresentationSet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< resqml2_0::UnstructuredGridRepresentation * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getUnstructuredGridRepresentationSet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< resqml2_0::UnstructuredGridRepresentation * >((const std::vector< resqml2_0::UnstructuredGridRepresentation * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_common_EpcDocument_setExtendedCoreProperty(void * jarg1, char * jarg2, char * jarg3) {
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->setExtendedCoreProperty((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_common_EpcDocument_getExtendedCoreProperty(void * jarg1, char * jarg2) {
  char * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (arg1)->getExtendedCoreProperty((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getResqmlAbstractObjectByUuid(void * jarg1, char * jarg2) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  resqml2_0::AbstractObject *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (resqml2_0::AbstractObject *)((common::EpcDocument const *)arg1)->getResqmlAbstractObjectByUuid((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getWitsmlAbstractObjectByUuid(void * jarg1, char * jarg2) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  witsml1_4_1_1::AbstractObject *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (witsml1_4_1_1::AbstractObject *)((common::EpcDocument const *)arg1)->getWitsmlAbstractObjectByUuid((std::string const &)*arg2);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createHdfProxy(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::HdfProxy *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (resqml2_0::HdfProxy *)(arg1)->createHdfProxy((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createLocalDepth3dCrs__SWIG_0(void * jarg1, char * jarg2, char * jarg3, double jarg4, double jarg5, double jarg6, double jarg7, int jarg8, unsigned long jarg9, int jarg10, unsigned int jarg11, unsigned int jarg12) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg8 = 0 ;
  unsigned long *arg9 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg10 = 0 ;
  bool *arg11 = 0 ;
  unsigned int *arg12 = 0 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  gsoap_resqml2_0::eml__LengthUom temp8 ;
  unsigned long temp9 ;
  gsoap_resqml2_0::eml__LengthUom temp10 ;
  bool temp11 ;
  unsigned int temp12 ;
  resqml2_0::LocalDepth3dCrs *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (gsoap_resqml2_0::eml__LengthUom)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned long)jarg9; 
  arg9 = &temp9; 
  temp10 = (gsoap_resqml2_0::eml__LengthUom)jarg10; 
  arg10 = &temp10; 
  temp11 = jarg11 ? true : false; 
  arg11 = &temp11; 
  temp12 = (unsigned int)jarg12; 
  arg12 = &temp12; 
  {
    try {
      result = (resqml2_0::LocalDepth3dCrs *)(arg1)->createLocalDepth3dCrs((std::string const &)*arg2,(std::string const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,(gsoap_resqml2_0::eml__LengthUom const &)*arg8,(unsigned long const &)*arg9,(gsoap_resqml2_0::eml__LengthUom const &)*arg10,(bool const &)*arg11,(unsigned int const &)*arg12);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createLocalDepth3dCrs__SWIG_1(void * jarg1, char * jarg2, char * jarg3, double jarg4, double jarg5, double jarg6, double jarg7, int jarg8, unsigned long jarg9, int jarg10, unsigned int jarg11) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg8 = 0 ;
  unsigned long *arg9 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg10 = 0 ;
  bool *arg11 = 0 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  gsoap_resqml2_0::eml__LengthUom temp8 ;
  unsigned long temp9 ;
  gsoap_resqml2_0::eml__LengthUom temp10 ;
  bool temp11 ;
  resqml2_0::LocalDepth3dCrs *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (gsoap_resqml2_0::eml__LengthUom)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned long)jarg9; 
  arg9 = &temp9; 
  temp10 = (gsoap_resqml2_0::eml__LengthUom)jarg10; 
  arg10 = &temp10; 
  temp11 = jarg11 ? true : false; 
  arg11 = &temp11; 
  {
    try {
      result = (resqml2_0::LocalDepth3dCrs *)(arg1)->createLocalDepth3dCrs((std::string const &)*arg2,(std::string const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,(gsoap_resqml2_0::eml__LengthUom const &)*arg8,(unsigned long const &)*arg9,(gsoap_resqml2_0::eml__LengthUom const &)*arg10,(bool const &)*arg11);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createLocalDepth3dCrs__SWIG_2(void * jarg1, char * jarg2, char * jarg3, double jarg4, double jarg5, double jarg6, double jarg7, int jarg8, unsigned long jarg9, int jarg10) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg8 = 0 ;
  unsigned long *arg9 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg10 = 0 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  gsoap_resqml2_0::eml__LengthUom temp8 ;
  unsigned long temp9 ;
  gsoap_resqml2_0::eml__LengthUom temp10 ;
  resqml2_0::LocalDepth3dCrs *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (gsoap_resqml2_0::eml__LengthUom)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned long)jarg9; 
  arg9 = &temp9; 
  temp10 = (gsoap_resqml2_0::eml__LengthUom)jarg10; 
  arg10 = &temp10; 
  {
    try {
      result = (resqml2_0::LocalDepth3dCrs *)(arg1)->createLocalDepth3dCrs((std::string const &)*arg2,(std::string const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,(gsoap_resqml2_0::eml__LengthUom const &)*arg8,(unsigned long const &)*arg9,(gsoap_resqml2_0::eml__LengthUom const &)*arg10);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createLocalTime3dCrs__SWIG_0(void * jarg1, char * jarg2, char * jarg3, double jarg4, double jarg5, double jarg6, double jarg7, int jarg8, unsigned long jarg9, int jarg10, int jarg11, unsigned int jarg12, unsigned int jarg13) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg8 = 0 ;
  unsigned long *arg9 = 0 ;
  gsoap_resqml2_0::eml__TimeUom *arg10 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg11 = 0 ;
  bool *arg12 = 0 ;
  unsigned int *arg13 = 0 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  gsoap_resqml2_0::eml__LengthUom temp8 ;
  unsigned long temp9 ;
  gsoap_resqml2_0::eml__TimeUom temp10 ;
  gsoap_resqml2_0::eml__LengthUom temp11 ;
  bool temp12 ;
  unsigned int temp13 ;
  resqml2_0::LocalTime3dCrs *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (gsoap_resqml2_0::eml__LengthUom)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned long)jarg9; 
  arg9 = &temp9; 
  temp10 = (gsoap_resqml2_0::eml__TimeUom)jarg10; 
  arg10 = &temp10; 
  temp11 = (gsoap_resqml2_0::eml__LengthUom)jarg11; 
  arg11 = &temp11; 
  temp12 = jarg12 ? true : false; 
  arg12 = &temp12; 
  temp13 = (unsigned int)jarg13; 
  arg13 = &temp13; 
  {
    try {
      result = (resqml2_0::LocalTime3dCrs *)(arg1)->createLocalTime3dCrs((std::string const &)*arg2,(std::string const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,(gsoap_resqml2_0::eml__LengthUom const &)*arg8,(unsigned long const &)*arg9,(gsoap_resqml2_0::eml__TimeUom const &)*arg10,(gsoap_resqml2_0::eml__LengthUom const &)*arg11,(bool const &)*arg12,(unsigned int const &)*arg13);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createLocalTime3dCrs__SWIG_1(void * jarg1, char * jarg2, char * jarg3, double jarg4, double jarg5, double jarg6, double jarg7, int jarg8, unsigned long jarg9, int jarg10, int jarg11, unsigned int jarg12) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg8 = 0 ;
  unsigned long *arg9 = 0 ;
  gsoap_resqml2_0::eml__TimeUom *arg10 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg11 = 0 ;
  bool *arg12 = 0 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  gsoap_resqml2_0::eml__LengthUom temp8 ;
  unsigned long temp9 ;
  gsoap_resqml2_0::eml__TimeUom temp10 ;
  gsoap_resqml2_0::eml__LengthUom temp11 ;
  bool temp12 ;
  resqml2_0::LocalTime3dCrs *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (gsoap_resqml2_0::eml__LengthUom)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned long)jarg9; 
  arg9 = &temp9; 
  temp10 = (gsoap_resqml2_0::eml__TimeUom)jarg10; 
  arg10 = &temp10; 
  temp11 = (gsoap_resqml2_0::eml__LengthUom)jarg11; 
  arg11 = &temp11; 
  temp12 = jarg12 ? true : false; 
  arg12 = &temp12; 
  {
    try {
      result = (resqml2_0::LocalTime3dCrs *)(arg1)->createLocalTime3dCrs((std::string const &)*arg2,(std::string const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,(gsoap_resqml2_0::eml__LengthUom const &)*arg8,(unsigned long const &)*arg9,(gsoap_resqml2_0::eml__TimeUom const &)*arg10,(gsoap_resqml2_0::eml__LengthUom const &)*arg11,(bool const &)*arg12);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createLocalTime3dCrs__SWIG_2(void * jarg1, char * jarg2, char * jarg3, double jarg4, double jarg5, double jarg6, double jarg7, int jarg8, unsigned long jarg9, int jarg10, int jarg11) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg8 = 0 ;
  unsigned long *arg9 = 0 ;
  gsoap_resqml2_0::eml__TimeUom *arg10 = 0 ;
  gsoap_resqml2_0::eml__LengthUom *arg11 = 0 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  gsoap_resqml2_0::eml__LengthUom temp8 ;
  unsigned long temp9 ;
  gsoap_resqml2_0::eml__TimeUom temp10 ;
  gsoap_resqml2_0::eml__LengthUom temp11 ;
  resqml2_0::LocalTime3dCrs *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (gsoap_resqml2_0::eml__LengthUom)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned long)jarg9; 
  arg9 = &temp9; 
  temp10 = (gsoap_resqml2_0::eml__TimeUom)jarg10; 
  arg10 = &temp10; 
  temp11 = (gsoap_resqml2_0::eml__LengthUom)jarg11; 
  arg11 = &temp11; 
  {
    try {
      result = (resqml2_0::LocalTime3dCrs *)(arg1)->createLocalTime3dCrs((std::string const &)*arg2,(std::string const &)*arg3,(double const &)*arg4,(double const &)*arg5,(double const &)*arg6,(double const &)*arg7,(gsoap_resqml2_0::eml__LengthUom const &)*arg8,(unsigned long const &)*arg9,(gsoap_resqml2_0::eml__TimeUom const &)*arg10,(gsoap_resqml2_0::eml__LengthUom const &)*arg11);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createMdDatum(void * jarg1, char * jarg2, char * jarg3, void * jarg4, int jarg5, double jarg6, double jarg7, double jarg8) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::AbstractLocal3dCrs *arg4 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  gsoap_resqml2_0::resqml2__MdReference *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  gsoap_resqml2_0::resqml2__MdReference temp5 ;
  double temp6 ;
  double temp7 ;
  double temp8 ;
  resqml2_0::MdDatum *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (resqml2_0::AbstractLocal3dCrs *)jarg4; 
  temp5 = (gsoap_resqml2_0::resqml2__MdReference)jarg5; 
  arg5 = &temp5; 
  temp6 = (double)jarg6; 
  arg6 = &temp6; 
  temp7 = (double)jarg7; 
  arg7 = &temp7; 
  temp8 = (double)jarg8; 
  arg8 = &temp8; 
  {
    try {
      result = (resqml2_0::MdDatum *)(arg1)->createMdDatum((std::string const &)*arg2,(std::string const &)*arg3,arg4,(gsoap_resqml2_0::resqml2__MdReference const &)*arg5,(double const &)*arg6,(double const &)*arg7,(double const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createBoundaryFeature(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::BoundaryFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::BoundaryFeature *)(arg1)->createBoundaryFeature((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createHorizon(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::Horizon *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::Horizon *)(arg1)->createHorizon((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createTectonicBoundaryFeature(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::TectonicBoundaryFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::TectonicBoundaryFeature *)(arg1)->createTectonicBoundaryFeature((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createFault(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::Fault *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::Fault *)(arg1)->createFault((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createFracture(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::Fracture *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::Fracture *)(arg1)->createFracture((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createWellboreFeature(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::WellboreFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::WellboreFeature *)(arg1)->createWellboreFeature((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createSeismicLattice(void * jarg1, char * jarg2, char * jarg3, int jarg4, int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  unsigned int *arg9 = 0 ;
  int temp4 ;
  int temp5 ;
  unsigned int temp6 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  unsigned int temp9 ;
  resqml2_0::SeismicLatticeFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (int)jarg5; 
  arg5 = &temp5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  temp9 = (unsigned int)jarg9; 
  arg9 = &temp9; 
  {
    try {
      result = (resqml2_0::SeismicLatticeFeature *)(arg1)->createSeismicLattice((std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4,(int const &)*arg5,(unsigned int const &)*arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8,(unsigned int const &)*arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createSeismicLine(void * jarg1, char * jarg2, char * jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  int temp4 ;
  unsigned int temp5 ;
  unsigned int temp6 ;
  resqml2_0::SeismicLineFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int)jarg4; 
  arg4 = &temp4; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  {
    try {
      result = (resqml2_0::SeismicLineFeature *)(arg1)->createSeismicLine((std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4,(unsigned int const &)*arg5,(unsigned int const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createSeismicLineSet(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::SeismicLineSetFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::SeismicLineSetFeature *)(arg1)->createSeismicLineSet((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createFrontier(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::FrontierFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::FrontierFeature *)(arg1)->createFrontier((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStructuralModel(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::OrganizationFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::OrganizationFeature *)(arg1)->createStructuralModel((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStratigraphicUnit(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::StratigraphicUnitFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::StratigraphicUnitFeature *)(arg1)->createStratigraphicUnit((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStratigraphicModel(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::OrganizationFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::OrganizationFeature *)(arg1)->createStratigraphicModel((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createEarthModel(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::OrganizationFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::OrganizationFeature *)(arg1)->createEarthModel((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createFluidBoundaryFeature(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gsoap_resqml2_0::resqml2__FluidContact *arg4 = 0 ;
  gsoap_resqml2_0::resqml2__FluidContact temp4 ;
  resqml2_0::FluidBoundaryFeature *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (gsoap_resqml2_0::resqml2__FluidContact)jarg4; 
  arg4 = &temp4; 
  {
    try {
      result = (resqml2_0::FluidBoundaryFeature *)(arg1)->createFluidBoundaryFeature((std::string const &)*arg2,(std::string const &)*arg3,(gsoap_resqml2_0::resqml2__FluidContact const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createGenericFeatureInterpretation(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeature *arg2 = (resqml2_0::AbstractFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::GenericFeatureInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::GenericFeatureInterpretation *)(arg1)->createGenericFeatureInterpretation(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createBoundaryFeatureInterpretation(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::BoundaryFeature *arg2 = (resqml2_0::BoundaryFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::BoundaryFeatureInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::BoundaryFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::BoundaryFeatureInterpretation *)(arg1)->createBoundaryFeatureInterpretation(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createHorizonInterpretation(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::Horizon *arg2 = (resqml2_0::Horizon *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::HorizonInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::Horizon *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::HorizonInterpretation *)(arg1)->createHorizonInterpretation(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createFaultInterpretation(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::Fault *arg2 = (resqml2_0::Fault *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::FaultInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::Fault *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::FaultInterpretation *)(arg1)->createFaultInterpretation(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createWellboreInterpretation(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::WellboreFeature *arg2 = (resqml2_0::WellboreFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  resqml2_0::WellboreInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::WellboreFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (resqml2_0::WellboreInterpretation *)(arg1)->createWellboreInterpretation(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createEarthModelInterpretation(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::OrganizationFeature *arg2 = (resqml2_0::OrganizationFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::EarthModelInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::OrganizationFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::EarthModelInterpretation *)(arg1)->createEarthModelInterpretation(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStructuralOrganizationInterpretationInAge(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::OrganizationFeature *arg2 = (resqml2_0::OrganizationFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::StructuralOrganizationInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::OrganizationFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::StructuralOrganizationInterpretation *)(arg1)->createStructuralOrganizationInterpretationInAge(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStructuralOrganizationInterpretationInApparentDepth(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::OrganizationFeature *arg2 = (resqml2_0::OrganizationFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::StructuralOrganizationInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::OrganizationFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::StructuralOrganizationInterpretation *)(arg1)->createStructuralOrganizationInterpretationInApparentDepth(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStructuralOrganizationInterpretationInMeasuredDepth(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::OrganizationFeature *arg2 = (resqml2_0::OrganizationFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::StructuralOrganizationInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::OrganizationFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::StructuralOrganizationInterpretation *)(arg1)->createStructuralOrganizationInterpretationInMeasuredDepth(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStratigraphicUnitInterpretation(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::StratigraphicUnitFeature *arg2 = (resqml2_0::StratigraphicUnitFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::StratigraphicUnitInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::StratigraphicUnitFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::StratigraphicUnitInterpretation *)(arg1)->createStratigraphicUnitInterpretation(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStratigraphicColumn(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::StratigraphicColumn *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::StratigraphicColumn *)(arg1)->createStratigraphicColumn((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStratigraphicColumnRankInterpretationInAge(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned long jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::OrganizationFeature *arg2 = (resqml2_0::OrganizationFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned long *arg5 = 0 ;
  unsigned long temp5 ;
  resqml2_0::StratigraphicColumnRankInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::OrganizationFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned long)jarg5; 
  arg5 = &temp5; 
  {
    try {
      result = (resqml2_0::StratigraphicColumnRankInterpretation *)(arg1)->createStratigraphicColumnRankInterpretationInAge(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned long const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStratigraphicColumnRankInterpretationInApparentDepth(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned long jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::OrganizationFeature *arg2 = (resqml2_0::OrganizationFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned long *arg5 = 0 ;
  unsigned long temp5 ;
  resqml2_0::StratigraphicColumnRankInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::OrganizationFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned long)jarg5; 
  arg5 = &temp5; 
  {
    try {
      result = (resqml2_0::StratigraphicColumnRankInterpretation *)(arg1)->createStratigraphicColumnRankInterpretationInApparentDepth(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned long const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStratigraphicOccurrenceInterpretationInAge(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::OrganizationFeature *arg2 = (resqml2_0::OrganizationFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::OrganizationFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::StratigraphicOccurrenceInterpretation *)(arg1)->createStratigraphicOccurrenceInterpretationInAge(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStratigraphicOccurrenceInterpretationInApparentDepth(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::OrganizationFeature *arg2 = (resqml2_0::OrganizationFeature *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::OrganizationFeature *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (resqml2_0::StratigraphicOccurrenceInterpretation *)(arg1)->createStratigraphicOccurrenceInterpretationInApparentDepth(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createTriangulatedSetRepresentation(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::TriangulatedSetRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (resqml2_0::TriangulatedSetRepresentation *)(arg1)->createTriangulatedSetRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPolylineSetRepresentation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::PolylineSetRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (resqml2_0::PolylineSetRepresentation *)(arg1)->createPolylineSetRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPolylineSetRepresentation__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, int jarg6) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__LineRole *arg6 = 0 ;
  gsoap_resqml2_0::resqml2__LineRole temp6 ;
  resqml2_0::PolylineSetRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  temp6 = (gsoap_resqml2_0::resqml2__LineRole)jarg6; 
  arg6 = &temp6; 
  {
    try {
      result = (resqml2_0::PolylineSetRepresentation *)(arg1)->createPolylineSetRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(gsoap_resqml2_0::resqml2__LineRole const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPointSetRepresentation(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::PointSetRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (resqml2_0::PointSetRepresentation *)(arg1)->createPointSetRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPlaneSetRepresentation(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::PlaneSetRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (resqml2_0::PlaneSetRepresentation *)(arg1)->createPlaneSetRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPolylineRepresentation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, unsigned int jarg6) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  resqml2_0::PolylineRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = (resqml2_0::PolylineRepresentation *)(arg1)->createPolylineRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPolylineRepresentation__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::PolylineRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (resqml2_0::PolylineRepresentation *)(arg1)->createPolylineRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPolylineRepresentation__SWIG_2(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, int jarg6, unsigned int jarg7) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__LineRole *arg6 = 0 ;
  bool arg7 ;
  gsoap_resqml2_0::resqml2__LineRole temp6 ;
  resqml2_0::PolylineRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  temp6 = (gsoap_resqml2_0::resqml2__LineRole)jarg6; 
  arg6 = &temp6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = (resqml2_0::PolylineRepresentation *)(arg1)->createPolylineRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(gsoap_resqml2_0::resqml2__LineRole const &)*arg6,arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPolylineRepresentation__SWIG_3(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, int jarg6) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__LineRole *arg6 = 0 ;
  gsoap_resqml2_0::resqml2__LineRole temp6 ;
  resqml2_0::PolylineRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  temp6 = (gsoap_resqml2_0::resqml2__LineRole)jarg6; 
  arg6 = &temp6; 
  {
    try {
      result = (resqml2_0::PolylineRepresentation *)(arg1)->createPolylineRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(gsoap_resqml2_0::resqml2__LineRole const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createGrid2dRepresentation(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::Grid2dRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (resqml2_0::Grid2dRepresentation *)(arg1)->createGrid2dRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createWellboreTrajectoryRepresentation(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::WellboreInterpretation *arg2 = (resqml2_0::WellboreInterpretation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::MdDatum *arg5 = (resqml2_0::MdDatum *) 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::WellboreInterpretation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (resqml2_0::MdDatum *)jarg5; 
  {
    try {
      result = (resqml2_0::WellboreTrajectoryRepresentation *)(arg1)->createWellboreTrajectoryRepresentation(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createWellboreFrameRepresentation(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::WellboreInterpretation *arg2 = (resqml2_0::WellboreInterpretation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *arg5 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  resqml2_0::WellboreFrameRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::WellboreInterpretation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg5; 
  {
    try {
      result = (resqml2_0::WellboreFrameRepresentation *)(arg1)->createWellboreFrameRepresentation(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createWellboreMarkerFrameRepresentation__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::WellboreInterpretation *arg2 = (resqml2_0::WellboreInterpretation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *arg5 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::WellboreInterpretation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg5; 
  {
    try {
      result = (resqml2_0::WellboreMarkerFrameRepresentation *)(arg1)->createWellboreMarkerFrameRepresentation(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createWellboreMarkerFrameRepresentation__SWIG_1(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::StratigraphicColumnRankInterpretation *arg2 = (resqml2_0::StratigraphicColumnRankInterpretation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *arg5 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::StratigraphicColumnRankInterpretation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg5; 
  {
    try {
      result = (resqml2_0::WellboreMarkerFrameRepresentation *)(arg1)->createWellboreMarkerFrameRepresentation(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createWellboreMarkerFrameRepresentation__SWIG_2(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::StratigraphicOccurrenceInterpretation *arg2 = (resqml2_0::StratigraphicOccurrenceInterpretation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::WellboreTrajectoryRepresentation *arg5 = (resqml2_0::WellboreTrajectoryRepresentation *) 0 ;
  resqml2_0::WellboreMarkerFrameRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::StratigraphicOccurrenceInterpretation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (resqml2_0::WellboreTrajectoryRepresentation *)jarg5; 
  {
    try {
      result = (resqml2_0::WellboreMarkerFrameRepresentation *)(arg1)->createWellboreMarkerFrameRepresentation(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createRepresentationSetRepresentation(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractOrganizationInterpretation *arg2 = (resqml2_0::AbstractOrganizationInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::RepresentationSetRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractOrganizationInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (resqml2_0::RepresentationSetRepresentation *)(arg1)->createRepresentationSetRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createNonSealedSurfaceFrameworkRepresentation(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, unsigned int jarg6) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::StructuralOrganizationInterpretation *arg2 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool temp6 ;
  resqml2_0::NonSealedSurfaceFrameworkRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::StructuralOrganizationInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  temp6 = jarg6 ? true : false; 
  arg6 = &temp6; 
  {
    try {
      result = (resqml2_0::NonSealedSurfaceFrameworkRepresentation *)(arg1)->createNonSealedSurfaceFrameworkRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(bool const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createSealedSurfaceFrameworkRepresentation(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::StructuralOrganizationInterpretation *arg2 = (resqml2_0::StructuralOrganizationInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::SealedSurfaceFrameworkRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::StructuralOrganizationInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      result = (resqml2_0::SealedSurfaceFrameworkRepresentation *)(arg1)->createSealedSurfaceFrameworkRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createIjkGridRepresentation__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg2 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int temp5 ;
  unsigned int temp6 ;
  unsigned int temp7 ;
  resqml2_0::IjkGridRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractLocal3dCrs *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  {
    try {
      result = (resqml2_0::IjkGridRepresentation *)(arg1)->createIjkGridRepresentation(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5,(unsigned int const &)*arg6,(unsigned int const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createIjkGridRepresentation__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  unsigned int *arg6 = 0 ;
  unsigned int *arg7 = 0 ;
  unsigned int *arg8 = 0 ;
  unsigned int temp6 ;
  unsigned int temp7 ;
  unsigned int temp8 ;
  resqml2_0::IjkGridRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  temp6 = (unsigned int)jarg6; 
  arg6 = &temp6; 
  temp7 = (unsigned int)jarg7; 
  arg7 = &temp7; 
  temp8 = (unsigned int)jarg8; 
  arg8 = &temp8; 
  {
    try {
      result = (resqml2_0::IjkGridRepresentation *)(arg1)->createIjkGridRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(unsigned int const &)*arg6,(unsigned int const &)*arg7,(unsigned int const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createUnstructuredGridRepresentation(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg2 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  unsigned int temp5 ;
  resqml2_0::UnstructuredGridRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractLocal3dCrs *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  {
    try {
      result = (resqml2_0::UnstructuredGridRepresentation *)(arg1)->createUnstructuredGridRepresentation(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createSubRepresentation__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg2 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  resqml2_0::AbstractRepresentation *arg5 = (resqml2_0::AbstractRepresentation *) 0 ;
  resqml2_0::SubRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractLocal3dCrs *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (resqml2_0::AbstractRepresentation *)jarg5; 
  {
    try {
      result = (resqml2_0::SubRepresentation *)(arg1)->createSubRepresentation(arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createSubRepresentation__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, void * jarg6) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::AbstractRepresentation *arg6 = (resqml2_0::AbstractRepresentation *) 0 ;
  resqml2_0::SubRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (resqml2_0::AbstractRepresentation *)jarg6; 
  {
    try {
      result = (resqml2_0::SubRepresentation *)(arg1)->createSubRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createGridConnectionSetRepresentation(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, void * jarg6) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractFeatureInterpretation *arg2 = (resqml2_0::AbstractFeatureInterpretation *) 0 ;
  resqml2_0::AbstractLocal3dCrs *arg3 = (resqml2_0::AbstractLocal3dCrs *) 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  resqml2_0::AbstractGridRepresentation *arg6 = (resqml2_0::AbstractGridRepresentation *) 0 ;
  resqml2_0::GridConnectionSetRepresentation *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractFeatureInterpretation *)jarg2; 
  arg3 = (resqml2_0::AbstractLocal3dCrs *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (resqml2_0::AbstractGridRepresentation *)jarg6; 
  {
    try {
      result = (resqml2_0::GridConnectionSetRepresentation *)(arg1)->createGridConnectionSetRepresentation(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createTimeSeries(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::TimeSeries *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::TimeSeries *)(arg1)->createTimeSeries((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createStringTableLookup(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  resqml2_0::StringTableLookup *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (resqml2_0::StringTableLookup *)(arg1)->createStringTableLookup((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPropertyKind__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, int jarg6) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlUom *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind *arg6 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlUom temp5 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind temp6 ;
  resqml2_0::PropertyKind *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (gsoap_resqml2_0::resqml2__ResqmlUom)jarg5; 
  arg5 = &temp5; 
  temp6 = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)jarg6; 
  arg6 = &temp6; 
  {
    try {
      result = (resqml2_0::PropertyKind *)(arg1)->createPropertyKind((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(gsoap_resqml2_0::resqml2__ResqmlUom const &)*arg5,(gsoap_resqml2_0::resqml2__ResqmlPropertyKind const &)*arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createPropertyKind__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, void * jarg6) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlUom *arg5 = 0 ;
  resqml2_0::PropertyKind *arg6 = (resqml2_0::PropertyKind *) 0 ;
  gsoap_resqml2_0::resqml2__ResqmlUom temp5 ;
  resqml2_0::PropertyKind *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (gsoap_resqml2_0::resqml2__ResqmlUom)jarg5; 
  arg5 = &temp5; 
  arg6 = (resqml2_0::PropertyKind *)jarg6; 
  {
    try {
      result = (resqml2_0::PropertyKind *)(arg1)->createPropertyKind((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(gsoap_resqml2_0::resqml2__ResqmlUom const &)*arg5,arg6);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createCommentProperty__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, int jarg6, int jarg7) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractRepresentation *arg2 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg6 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind *arg7 = 0 ;
  unsigned int temp5 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp6 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind temp7 ;
  resqml2_0::CommentProperty *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractRepresentation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg6; 
  arg6 = &temp6; 
  temp7 = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)jarg7; 
  arg7 = &temp7; 
  {
    try {
      result = (resqml2_0::CommentProperty *)(arg1)->createCommentProperty(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5,(gsoap_resqml2_0::resqml2__IndexableElements const &)*arg6,(gsoap_resqml2_0::resqml2__ResqmlPropertyKind const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createCommentProperty__SWIG_1(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, int jarg6, void * jarg7) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractRepresentation *arg2 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg6 = 0 ;
  resqml2_0::PropertyKind *arg7 = (resqml2_0::PropertyKind *) 0 ;
  unsigned int temp5 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp6 ;
  resqml2_0::CommentProperty *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractRepresentation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg6; 
  arg6 = &temp6; 
  arg7 = (resqml2_0::PropertyKind *)jarg7; 
  {
    try {
      result = (resqml2_0::CommentProperty *)(arg1)->createCommentProperty(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5,(gsoap_resqml2_0::resqml2__IndexableElements const &)*arg6,arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createContinuousProperty__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, int jarg6, int jarg7, int jarg8) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractRepresentation *arg2 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg6 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlUom *arg7 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind *arg8 = 0 ;
  unsigned int temp5 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp6 ;
  gsoap_resqml2_0::resqml2__ResqmlUom temp7 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind temp8 ;
  resqml2_0::ContinuousProperty *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractRepresentation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg6; 
  arg6 = &temp6; 
  temp7 = (gsoap_resqml2_0::resqml2__ResqmlUom)jarg7; 
  arg7 = &temp7; 
  temp8 = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)jarg8; 
  arg8 = &temp8; 
  {
    try {
      result = (resqml2_0::ContinuousProperty *)(arg1)->createContinuousProperty(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5,(gsoap_resqml2_0::resqml2__IndexableElements const &)*arg6,(gsoap_resqml2_0::resqml2__ResqmlUom const &)*arg7,(gsoap_resqml2_0::resqml2__ResqmlPropertyKind const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createContinuousProperty__SWIG_1(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, int jarg6, int jarg7, void * jarg8) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractRepresentation *arg2 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg6 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlUom *arg7 = 0 ;
  resqml2_0::PropertyKind *arg8 = (resqml2_0::PropertyKind *) 0 ;
  unsigned int temp5 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp6 ;
  gsoap_resqml2_0::resqml2__ResqmlUom temp7 ;
  resqml2_0::ContinuousProperty *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractRepresentation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg6; 
  arg6 = &temp6; 
  temp7 = (gsoap_resqml2_0::resqml2__ResqmlUom)jarg7; 
  arg7 = &temp7; 
  arg8 = (resqml2_0::PropertyKind *)jarg8; 
  {
    try {
      result = (resqml2_0::ContinuousProperty *)(arg1)->createContinuousProperty(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5,(gsoap_resqml2_0::resqml2__IndexableElements const &)*arg6,(gsoap_resqml2_0::resqml2__ResqmlUom const &)*arg7,arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createDiscreteProperty__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, int jarg6, int jarg7) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractRepresentation *arg2 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg6 = 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind *arg7 = 0 ;
  unsigned int temp5 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp6 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind temp7 ;
  resqml2_0::DiscreteProperty *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractRepresentation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg6; 
  arg6 = &temp6; 
  temp7 = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)jarg7; 
  arg7 = &temp7; 
  {
    try {
      result = (resqml2_0::DiscreteProperty *)(arg1)->createDiscreteProperty(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5,(gsoap_resqml2_0::resqml2__IndexableElements const &)*arg6,(gsoap_resqml2_0::resqml2__ResqmlPropertyKind const &)*arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createDiscreteProperty__SWIG_1(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, int jarg6, void * jarg7) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractRepresentation *arg2 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg6 = 0 ;
  resqml2_0::PropertyKind *arg7 = (resqml2_0::PropertyKind *) 0 ;
  unsigned int temp5 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp6 ;
  resqml2_0::DiscreteProperty *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractRepresentation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg6; 
  arg6 = &temp6; 
  arg7 = (resqml2_0::PropertyKind *)jarg7; 
  {
    try {
      result = (resqml2_0::DiscreteProperty *)(arg1)->createDiscreteProperty(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5,(gsoap_resqml2_0::resqml2__IndexableElements const &)*arg6,arg7);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createCategoricalProperty__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, int jarg6, void * jarg7, int jarg8) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractRepresentation *arg2 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg6 = 0 ;
  resqml2_0::StringTableLookup *arg7 = (resqml2_0::StringTableLookup *) 0 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind *arg8 = 0 ;
  unsigned int temp5 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp6 ;
  gsoap_resqml2_0::resqml2__ResqmlPropertyKind temp8 ;
  resqml2_0::CategoricalProperty *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractRepresentation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg6; 
  arg6 = &temp6; 
  arg7 = (resqml2_0::StringTableLookup *)jarg7; 
  temp8 = (gsoap_resqml2_0::resqml2__ResqmlPropertyKind)jarg8; 
  arg8 = &temp8; 
  {
    try {
      result = (resqml2_0::CategoricalProperty *)(arg1)->createCategoricalProperty(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5,(gsoap_resqml2_0::resqml2__IndexableElements const &)*arg6,arg7,(gsoap_resqml2_0::resqml2__ResqmlPropertyKind const &)*arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createCategoricalProperty__SWIG_1(void * jarg1, void * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, int jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  resqml2_0::AbstractRepresentation *arg2 = (resqml2_0::AbstractRepresentation *) 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  unsigned int *arg5 = 0 ;
  gsoap_resqml2_0::resqml2__IndexableElements *arg6 = 0 ;
  resqml2_0::StringTableLookup *arg7 = (resqml2_0::StringTableLookup *) 0 ;
  resqml2_0::PropertyKind *arg8 = (resqml2_0::PropertyKind *) 0 ;
  unsigned int temp5 ;
  gsoap_resqml2_0::resqml2__IndexableElements temp6 ;
  resqml2_0::CategoricalProperty *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  arg2 = (resqml2_0::AbstractRepresentation *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (unsigned int)jarg5; 
  arg5 = &temp5; 
  temp6 = (gsoap_resqml2_0::resqml2__IndexableElements)jarg6; 
  arg6 = &temp6; 
  arg7 = (resqml2_0::StringTableLookup *)jarg7; 
  arg8 = (resqml2_0::PropertyKind *)jarg8; 
  {
    try {
      result = (resqml2_0::CategoricalProperty *)(arg1)->createCategoricalProperty(arg2,(std::string const &)*arg3,(std::string const &)*arg4,(unsigned int const &)*arg5,(gsoap_resqml2_0::resqml2__IndexableElements const &)*arg6,arg7,arg8);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_getWitsmlTrajectorySet(void * jarg1) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::vector< witsml1_4_1_1::Trajectory * > result;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      result = ((common::EpcDocument const *)arg1)->getWitsmlTrajectorySet();
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = new std::vector< witsml1_4_1_1::Trajectory * >((const std::vector< witsml1_4_1_1::Trajectory * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createWell__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  witsml1_4_1_1::Well *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try {
      result = (witsml1_4_1_1::Well *)(arg1)->createWell((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createWell__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, int jarg6, int jarg7, int jarg8, int jarg9, long long jarg10, char * jarg11, long long jarg12, long long jarg13, char * jarg14) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  gsoap_witsml1_4_1_1::witsml1__WellStatus arg6 ;
  gsoap_witsml1_4_1_1::witsml1__WellPurpose arg7 ;
  gsoap_witsml1_4_1_1::witsml1__WellFluid arg8 ;
  gsoap_witsml1_4_1_1::witsml1__WellDirection arg9 ;
  time_t *arg10 = 0 ;
  std::string *arg11 = 0 ;
  time_t *arg12 = 0 ;
  time_t *arg13 = 0 ;
  std::string *arg14 = 0 ;
  time_t temp10 ;
  time_t temp12 ;
  time_t temp13 ;
  witsml1_4_1_1::Well *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (gsoap_witsml1_4_1_1::witsml1__WellStatus)jarg6; 
  arg7 = (gsoap_witsml1_4_1_1::witsml1__WellPurpose)jarg7; 
  arg8 = (gsoap_witsml1_4_1_1::witsml1__WellFluid)jarg8; 
  arg9 = (gsoap_witsml1_4_1_1::witsml1__WellDirection)jarg9; 
  temp10 = (time_t)jarg10; 
  arg10 = &temp10; 
  if (!jarg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg11_str(jarg11);
  arg11 = &arg11_str; 
  temp12 = (time_t)jarg12; 
  arg12 = &temp12; 
  temp13 = (time_t)jarg13; 
  arg13 = &temp13; 
  if (!jarg14) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg14_str(jarg14);
  arg14 = &arg14_str; 
  {
    try {
      result = (witsml1_4_1_1::Well *)(arg1)->createWell((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7,arg8,arg9,(time_t const &)*arg10,(std::string const &)*arg11,(time_t const &)*arg12,(time_t const &)*arg13,(std::string const &)*arg14);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_common_EpcDocument_createCoordinateReferenceSystem(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, long long jarg7, long long jarg8, char * jarg9) {
  void * jresult ;
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  time_t *arg7 = 0 ;
  time_t *arg8 = 0 ;
  std::string *arg9 = 0 ;
  time_t temp7 ;
  time_t temp8 ;
  witsml1_4_1_1::CoordinateReferenceSystem *result = 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  temp7 = (time_t)jarg7; 
  arg7 = &temp7; 
  temp8 = (time_t)jarg8; 
  arg8 = &temp8; 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  {
    try {
      result = (witsml1_4_1_1::CoordinateReferenceSystem *)(arg1)->createCoordinateReferenceSystem((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(time_t const &)*arg7,(time_t const &)*arg8,(std::string const &)*arg9);
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return 0; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return 0; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_common_EpcDocument(void * jarg1) {
  common::EpcDocument *arg1 = (common::EpcDocument *) 0 ;
  
  arg1 = (common::EpcDocument *)jarg1; 
  {
    try {
      delete arg1;
    }
    catch (std::invalid_argument & e) {
      {
        SWIG_CSharpException(SWIG_TypeError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch (std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, const_cast<char*>(e.what())); return ; 
      };
    }
    catch (std::logic_error & e) {
      {
        SWIG_CSharpException(SWIG_SyntaxError, const_cast<char*>(e.what())); return ; 
      };
    } 
    catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception at F2I C++ API level"); return ; 
      };
    }
  }
}


SWIGEXPORT resqml2_0::AbstractObject * SWIGSTDCALL CSharp_resqml2_0_AbstractResqmlDataObject_SWIGUpcast(resqml2_0::AbstractResqmlDataObject *jarg1) {
    return (resqml2_0::AbstractObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractObject * SWIGSTDCALL CSharp_resqml2_0_EpcExternalPartReference_SWIGUpcast(resqml2_0::EpcExternalPartReference *jarg1) {
    return (resqml2_0::AbstractObject *)jarg1;
}

SWIGEXPORT resqml2_0::EpcExternalPartReference * SWIGSTDCALL CSharp_resqml2_0_HdfProxy_SWIGUpcast(resqml2_0::HdfProxy *jarg1) {
    return (resqml2_0::EpcExternalPartReference *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_AbstractLocal3dCrs_SWIGUpcast(resqml2_0::AbstractLocal3dCrs *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractLocal3dCrs * SWIGSTDCALL CSharp_resqml2_0_LocalDepth3dCrs_SWIGUpcast(resqml2_0::LocalDepth3dCrs *jarg1) {
    return (resqml2_0::AbstractLocal3dCrs *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractLocal3dCrs * SWIGSTDCALL CSharp_resqml2_0_LocalTime3dCrs_SWIGUpcast(resqml2_0::LocalTime3dCrs *jarg1) {
    return (resqml2_0::AbstractLocal3dCrs *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_MdDatum_SWIGUpcast(resqml2_0::MdDatum *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_AbstractFeature_SWIGUpcast(resqml2_0::AbstractFeature *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractFeature * SWIGSTDCALL CSharp_resqml2_0_AbstractGeologicFeature_SWIGUpcast(resqml2_0::AbstractGeologicFeature *jarg1) {
    return (resqml2_0::AbstractFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractGeologicFeature * SWIGSTDCALL CSharp_resqml2_0_BoundaryFeature_SWIGUpcast(resqml2_0::BoundaryFeature *jarg1) {
    return (resqml2_0::AbstractGeologicFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractGeologicFeature * SWIGSTDCALL CSharp_resqml2_0_GeologicUnitFeature_SWIGUpcast(resqml2_0::GeologicUnitFeature *jarg1) {
    return (resqml2_0::AbstractGeologicFeature *)jarg1;
}

SWIGEXPORT resqml2_0::BoundaryFeature * SWIGSTDCALL CSharp_resqml2_0_GeneticBoundaryFeature_SWIGUpcast(resqml2_0::GeneticBoundaryFeature *jarg1) {
    return (resqml2_0::BoundaryFeature *)jarg1;
}

SWIGEXPORT resqml2_0::GeneticBoundaryFeature * SWIGSTDCALL CSharp_resqml2_0_Horizon_SWIGUpcast(resqml2_0::Horizon *jarg1) {
    return (resqml2_0::GeneticBoundaryFeature *)jarg1;
}

SWIGEXPORT resqml2_0::BoundaryFeature * SWIGSTDCALL CSharp_resqml2_0_TectonicBoundaryFeature_SWIGUpcast(resqml2_0::TectonicBoundaryFeature *jarg1) {
    return (resqml2_0::BoundaryFeature *)jarg1;
}

SWIGEXPORT resqml2_0::TectonicBoundaryFeature * SWIGSTDCALL CSharp_resqml2_0_Fault_SWIGUpcast(resqml2_0::Fault *jarg1) {
    return (resqml2_0::TectonicBoundaryFeature *)jarg1;
}

SWIGEXPORT resqml2_0::TectonicBoundaryFeature * SWIGSTDCALL CSharp_resqml2_0_Fracture_SWIGUpcast(resqml2_0::Fracture *jarg1) {
    return (resqml2_0::TectonicBoundaryFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractFeature * SWIGSTDCALL CSharp_resqml2_0_AbstractTechnicalFeature_SWIGUpcast(resqml2_0::AbstractTechnicalFeature *jarg1) {
    return (resqml2_0::AbstractFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractTechnicalFeature * SWIGSTDCALL CSharp_resqml2_0_SeismicLineSetFeature_SWIGUpcast(resqml2_0::SeismicLineSetFeature *jarg1) {
    return (resqml2_0::AbstractTechnicalFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractTechnicalFeature * SWIGSTDCALL CSharp_resqml2_0_SeismicLineFeature_SWIGUpcast(resqml2_0::SeismicLineFeature *jarg1) {
    return (resqml2_0::AbstractTechnicalFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractTechnicalFeature * SWIGSTDCALL CSharp_resqml2_0_SeismicLatticeFeature_SWIGUpcast(resqml2_0::SeismicLatticeFeature *jarg1) {
    return (resqml2_0::AbstractTechnicalFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractTechnicalFeature * SWIGSTDCALL CSharp_resqml2_0_WellboreFeature_SWIGUpcast(resqml2_0::WellboreFeature *jarg1) {
    return (resqml2_0::AbstractTechnicalFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractGeologicFeature * SWIGSTDCALL CSharp_resqml2_0_OrganizationFeature_SWIGUpcast(resqml2_0::OrganizationFeature *jarg1) {
    return (resqml2_0::AbstractGeologicFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractTechnicalFeature * SWIGSTDCALL CSharp_resqml2_0_FrontierFeature_SWIGUpcast(resqml2_0::FrontierFeature *jarg1) {
    return (resqml2_0::AbstractTechnicalFeature *)jarg1;
}

SWIGEXPORT resqml2_0::GeologicUnitFeature * SWIGSTDCALL CSharp_resqml2_0_StratigraphicUnitFeature_SWIGUpcast(resqml2_0::StratigraphicUnitFeature *jarg1) {
    return (resqml2_0::GeologicUnitFeature *)jarg1;
}

SWIGEXPORT resqml2_0::BoundaryFeature * SWIGSTDCALL CSharp_resqml2_0_FluidBoundaryFeature_SWIGUpcast(resqml2_0::FluidBoundaryFeature *jarg1) {
    return (resqml2_0::BoundaryFeature *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_AbstractFeatureInterpretation_SWIGUpcast(resqml2_0::AbstractFeatureInterpretation *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractFeatureInterpretation * SWIGSTDCALL CSharp_resqml2_0_GenericFeatureInterpretation_SWIGUpcast(resqml2_0::GenericFeatureInterpretation *jarg1) {
    return (resqml2_0::AbstractFeatureInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractFeatureInterpretation * SWIGSTDCALL CSharp_resqml2_0_BoundaryFeatureInterpretation_SWIGUpcast(resqml2_0::BoundaryFeatureInterpretation *jarg1) {
    return (resqml2_0::AbstractFeatureInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::BoundaryFeatureInterpretation * SWIGSTDCALL CSharp_resqml2_0_FaultInterpretation_SWIGUpcast(resqml2_0::FaultInterpretation *jarg1) {
    return (resqml2_0::BoundaryFeatureInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::BoundaryFeatureInterpretation * SWIGSTDCALL CSharp_resqml2_0_HorizonInterpretation_SWIGUpcast(resqml2_0::HorizonInterpretation *jarg1) {
    return (resqml2_0::BoundaryFeatureInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractFeatureInterpretation * SWIGSTDCALL CSharp_resqml2_0_WellboreInterpretation_SWIGUpcast(resqml2_0::WellboreInterpretation *jarg1) {
    return (resqml2_0::AbstractFeatureInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractFeatureInterpretation * SWIGSTDCALL CSharp_resqml2_0_StratigraphicUnitInterpretation_SWIGUpcast(resqml2_0::StratigraphicUnitInterpretation *jarg1) {
    return (resqml2_0::AbstractFeatureInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractFeatureInterpretation * SWIGSTDCALL CSharp_resqml2_0_AbstractOrganizationInterpretation_SWIGUpcast(resqml2_0::AbstractOrganizationInterpretation *jarg1) {
    return (resqml2_0::AbstractFeatureInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractOrganizationInterpretation * SWIGSTDCALL CSharp_resqml2_0_StructuralOrganizationInterpretation_SWIGUpcast(resqml2_0::StructuralOrganizationInterpretation *jarg1) {
    return (resqml2_0::AbstractOrganizationInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractOrganizationInterpretation * SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumnRankInterpretation_SWIGUpcast(resqml2_0::StratigraphicColumnRankInterpretation *jarg1) {
    return (resqml2_0::AbstractOrganizationInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractOrganizationInterpretation * SWIGSTDCALL CSharp_resqml2_0_StratigraphicOccurrenceInterpretation_SWIGUpcast(resqml2_0::StratigraphicOccurrenceInterpretation *jarg1) {
    return (resqml2_0::AbstractOrganizationInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_StratigraphicColumn_SWIGUpcast(resqml2_0::StratigraphicColumn *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractFeatureInterpretation * SWIGSTDCALL CSharp_resqml2_0_EarthModelInterpretation_SWIGUpcast(resqml2_0::EarthModelInterpretation *jarg1) {
    return (resqml2_0::AbstractFeatureInterpretation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_AbstractRepresentation_SWIGUpcast(resqml2_0::AbstractRepresentation *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_SubRepresentation_SWIGUpcast(resqml2_0::SubRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_PolylineSetRepresentation_SWIGUpcast(resqml2_0::PolylineSetRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_PointSetRepresentation_SWIGUpcast(resqml2_0::PointSetRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_PlaneSetRepresentation_SWIGUpcast(resqml2_0::PlaneSetRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_PolylineRepresentation_SWIGUpcast(resqml2_0::PolylineRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_AbstractSurfaceRepresentation_SWIGUpcast(resqml2_0::AbstractSurfaceRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractSurfaceRepresentation * SWIGSTDCALL CSharp_resqml2_0_Grid2dRepresentation_SWIGUpcast(resqml2_0::Grid2dRepresentation *jarg1) {
    return (resqml2_0::AbstractSurfaceRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractSurfaceRepresentation * SWIGSTDCALL CSharp_resqml2_0_Grid2dSetRepresentation_SWIGUpcast(resqml2_0::Grid2dSetRepresentation *jarg1) {
    return (resqml2_0::AbstractSurfaceRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractSurfaceRepresentation * SWIGSTDCALL CSharp_resqml2_0_TriangulatedSetRepresentation_SWIGUpcast(resqml2_0::TriangulatedSetRepresentation *jarg1) {
    return (resqml2_0::AbstractSurfaceRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_WellboreTrajectoryRepresentation_SWIGUpcast(resqml2_0::WellboreTrajectoryRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_WellboreFrameRepresentation_SWIGUpcast(resqml2_0::WellboreFrameRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_WellboreMarker_SWIGUpcast(resqml2_0::WellboreMarker *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::WellboreFrameRepresentation * SWIGSTDCALL CSharp_resqml2_0_WellboreMarkerFrameRepresentation_SWIGUpcast(resqml2_0::WellboreMarkerFrameRepresentation *jarg1) {
    return (resqml2_0::WellboreFrameRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_RepresentationSetRepresentation_SWIGUpcast(resqml2_0::RepresentationSetRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::RepresentationSetRepresentation * SWIGSTDCALL CSharp_resqml2_0_NonSealedSurfaceFrameworkRepresentation_SWIGUpcast(resqml2_0::NonSealedSurfaceFrameworkRepresentation *jarg1) {
    return (resqml2_0::RepresentationSetRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::RepresentationSetRepresentation * SWIGSTDCALL CSharp_resqml2_0_SealedSurfaceFrameworkRepresentation_SWIGUpcast(resqml2_0::SealedSurfaceFrameworkRepresentation *jarg1) {
    return (resqml2_0::RepresentationSetRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_AbstractGridRepresentation_SWIGUpcast(resqml2_0::AbstractGridRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractGridRepresentation * SWIGSTDCALL CSharp_resqml2_0_AbstractColumnLayerGridRepresentation_SWIGUpcast(resqml2_0::AbstractColumnLayerGridRepresentation *jarg1) {
    return (resqml2_0::AbstractGridRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractColumnLayerGridRepresentation * SWIGSTDCALL CSharp_resqml2_0_IjkGridRepresentation_SWIGUpcast(resqml2_0::IjkGridRepresentation *jarg1) {
    return (resqml2_0::AbstractColumnLayerGridRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractGridRepresentation * SWIGSTDCALL CSharp_resqml2_0_UnstructuredGridRepresentation_SWIGUpcast(resqml2_0::UnstructuredGridRepresentation *jarg1) {
    return (resqml2_0::AbstractGridRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractRepresentation * SWIGSTDCALL CSharp_resqml2_0_GridConnectionSetRepresentation_SWIGUpcast(resqml2_0::GridConnectionSetRepresentation *jarg1) {
    return (resqml2_0::AbstractRepresentation *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_TimeSeries_SWIGUpcast(resqml2_0::TimeSeries *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_PropertyKind_SWIGUpcast(resqml2_0::PropertyKind *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_StringTableLookup_SWIGUpcast(resqml2_0::StringTableLookup *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractResqmlDataObject * SWIGSTDCALL CSharp_resqml2_0_AbstractProperty_SWIGUpcast(resqml2_0::AbstractProperty *jarg1) {
    return (resqml2_0::AbstractResqmlDataObject *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractProperty * SWIGSTDCALL CSharp_resqml2_0_AbstractValuesProperty_SWIGUpcast(resqml2_0::AbstractValuesProperty *jarg1) {
    return (resqml2_0::AbstractProperty *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractValuesProperty * SWIGSTDCALL CSharp_resqml2_0_CommentProperty_SWIGUpcast(resqml2_0::CommentProperty *jarg1) {
    return (resqml2_0::AbstractValuesProperty *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractValuesProperty * SWIGSTDCALL CSharp_resqml2_0_ContinuousProperty_SWIGUpcast(resqml2_0::ContinuousProperty *jarg1) {
    return (resqml2_0::AbstractValuesProperty *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractValuesProperty * SWIGSTDCALL CSharp_resqml2_0_DiscreteProperty_SWIGUpcast(resqml2_0::DiscreteProperty *jarg1) {
    return (resqml2_0::AbstractValuesProperty *)jarg1;
}

SWIGEXPORT resqml2_0::AbstractValuesProperty * SWIGSTDCALL CSharp_resqml2_0_CategoricalProperty_SWIGUpcast(resqml2_0::CategoricalProperty *jarg1) {
    return (resqml2_0::AbstractValuesProperty *)jarg1;
}

SWIGEXPORT witsml1_4_1_1::AbstractObject * SWIGSTDCALL CSharp_witsml1_4_1_1_CoordinateReferenceSystem_SWIGUpcast(witsml1_4_1_1::CoordinateReferenceSystem *jarg1) {
    return (witsml1_4_1_1::AbstractObject *)jarg1;
}

SWIGEXPORT witsml1_4_1_1::AbstractObject * SWIGSTDCALL CSharp_witsml1_4_1_1_Well_SWIGUpcast(witsml1_4_1_1::Well *jarg1) {
    return (witsml1_4_1_1::AbstractObject *)jarg1;
}

SWIGEXPORT witsml1_4_1_1::AbstractObject * SWIGSTDCALL CSharp_witsml1_4_1_1_Wellbore_SWIGUpcast(witsml1_4_1_1::Wellbore *jarg1) {
    return (witsml1_4_1_1::AbstractObject *)jarg1;
}

SWIGEXPORT witsml1_4_1_1::AbstractObject * SWIGSTDCALL CSharp_witsml1_4_1_1_Trajectory_SWIGUpcast(witsml1_4_1_1::Trajectory *jarg1) {
    return (witsml1_4_1_1::AbstractObject *)jarg1;
}

SWIGEXPORT witsml1_4_1_1::AbstractObject * SWIGSTDCALL CSharp_witsml1_4_1_1_Log_SWIGUpcast(witsml1_4_1_1::Log *jarg1) {
    return (witsml1_4_1_1::AbstractObject *)jarg1;
}

SWIGEXPORT witsml1_4_1_1::AbstractObject * SWIGSTDCALL CSharp_witsml1_4_1_1_FormationMarker_SWIGUpcast(witsml1_4_1_1::FormationMarker *jarg1) {
    return (witsml1_4_1_1::AbstractObject *)jarg1;
}

#ifdef __cplusplus
}
#endif

